x-health-probe: &health-probe
  healthcheck:
    test: /probe.sh
    interval: 15s
    timeout: 15s
    start_period: 5s
    retries: 15

x-relaxed-health-probe: &relaxed-health-probe
  healthcheck:
    test: /probe.sh
    interval: 15s
    timeout: 30s
    start_period: 5s
    retries: 5000

x-logging-label: &logging-label
  logging: "promtail"
  logging_jobname: "containerlogs"

networks:
  deltafi:
    external: true

services:
  core-scheduler:
    image: ${DELTAFI_CORE}
    container_name: deltafi-core-scheduler
    depends_on:
      deltafi-valkey:
        condition: service_healthy
      deltafi-postgres:
        condition: service_healthy
      deltafi-minio:
        condition: service_started
    expose:
      - "8080"
    group_add:
      - ${DOCKER_GID}
    environment:
      JDK_JAVA_OPTIONS: "-Dcom.redhat.fips=false -Dschedule.diskSpace=false"
      SPRING_PROFILES_ACTIVE: monitor,localContentStorage
    env_file:
      - ${CONFIG_DIR}/common.env
      - ${SECRETS_DIR}/valkey.env
      - ${SECRETS_DIR}/postgres.env
      - ${SECRETS_DIR}/minio.env
      - ${SECRETS_DIR}/ssl.env
    <<: *relaxed-health-probe
    labels:
      deltafi-group: deltafi-core
      <<: *logging-label
    networks:
      deltafi:
        aliases:
          - "deltafi-core"
          - "deltafi-core-scheduler"
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DATA_DIR}/certs:/certs
  core-worker:
    image: ${DELTAFI_CORE}
    profiles: ["worker"]
    deploy:
      replicas: 1
    depends_on:
      deltafi-valkey:
        condition: service_healthy
      deltafi-postgres:
        condition: service_healthy
      deltafi-minio:
        condition: service_started
    group_add:
      - ${DOCKER_GID}
    expose:
      - "8080"
    environment:
      JDK_JAVA_OPTIONS: "-Dcom.redhat.fips=false -Dschedule.maintenance=false -Dschedule.diskSpace=false"
    env_file:
      - ${CONFIG_DIR}/common.env
      - ${SECRETS_DIR}/valkey.env
      - ${SECRETS_DIR}/postgres.env
      - ${SECRETS_DIR}/minio.env
      - ${SECRETS_DIR}/ssl.env
    <<: *relaxed-health-probe
    labels:
      deltafi-group: deltafi-core
      <<: *logging-label
    networks:
      deltafi:
        aliases:
          - "deltafi-core"
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DATA_DIR}/certs:/certs
  deltafi-entity-resolver:
    image: ${DELTAFI_ENTITY_RESOLVER}
    container_name: deltafi-entity-resolver
    env_file:
      - ${SECRETS_DIR}/ssl.env
    expose:
      - "${ENTITY_RESOLVER_PORT}"
    labels:
      deltafi-group: deltafi-core
      <<: *logging-label
    networks:
      - deltafi
    restart: unless-stopped
    profiles: ["entity-resolver"]
    volumes:
      - ${DATA_DIR}/entityResolver:/config
      - ${DATA_DIR}/certs:/certs
  core-actions:
    image: ${DELTAFI_CORE_ACTIONS}
    # container_name: deltafi-core-actions
    depends_on:
      core-scheduler:
        condition: service_healthy
    env_file:
      - ${CONFIG_DIR}/common.env
      - ${SECRETS_DIR}/valkey.env
      - ${SECRETS_DIR}/minio.env
      - ${SECRETS_DIR}/ssl.env
    healthcheck:
      test: cat /tmp/running
      interval: 30s
      timeout: 30s
      retries: 4
      start_period: 10s
    labels:
      deltafi-group: deltafi-core
      <<: *logging-label
    networks:
      - deltafi
    restart: unless-stopped
    user: "${USER_ID}:${GROUP_ID}"
    volumes:
      - ${DATA_DIR}/certs:/certs
  deltafi-nodemonitor:
    image: ${DELTAFI_NODEMONITOR}
    container_name: deltafi-nodemonitor
    depends_on:
      deltafi-graphite:
        condition: service_started
    env_file:
      - ${CONFIG_DIR}/common.env
      - ${SECRETS_DIR}/valkey.env
    group_add:
      - ${DOCKER_GID}
    labels:
      deltafi-group: deltafi-core
      <<: *logging-label
    networks:
      - deltafi
    restart: unless-stopped
    user: "${USER_ID}:${GROUP_ID}"
    volumes:
      - ${DATA_DIR}:/data/deltafi
      - /var/run/docker.sock:/var/run/docker.sock
  deltafi-node-fastdelete:
    image: ${DELTAFI_NODEMONITOR}
    container_name: deltafi-node-fastdelete
    command: ["/bin/bash", "-c", "/app/deleteit.sh"]
    depends_on:
      deltafi-graphite:
        condition: service_started
    env_file:
      - ${CONFIG_DIR}/common.env
      - ${SECRETS_DIR}/postgres.env
    group_add:
      - ${DOCKER_GID}
    labels:
      deltafi-group: deltafi-core
      <<: *logging-label
    networks:
      - deltafi
    restart: unless-stopped
    user: "${USER_ID}:${GROUP_ID}"
    volumes:
      - ${DATA_DIR}:/data/deltafi
  file-ingress:
    image: ${DELTAFI_FILE_INGRESS}
    container_name: deltafi-file-ingress
    depends_on:
      core-scheduler:
        condition: service_started
    environment:
      DELTAFI_WATCH_DIR: /watched-dir
      DELTAFI_WORKERS: 5
      DELTAFI_RETRY_PERIOD: 60
      DELTAFI_MAX_FILE_SIZE: 2147483648
      DELTAFI_URL: http://deltafi-core-scheduler:8080
    env_file:
      - ${CONFIG_DIR}/common.env
    labels:
      deltafi-group: deltafi-core
      <<: *logging-label
    networks:
      deltafi:
        aliases:
          - "deltafi-file-ingress-service"
          - "file-ingress"
    profiles: ["file-ingress"]
    restart: unless-stopped
    volumes:
      - ${DATA_DIR}/file-ingress:/watched-dir
    user: "${USER_ID}:${GROUP_ID}"
  deltafi-egress-sink:
    image: ${DELTAFI_EGRESS_SINK}
    container_name: deltafi-egress-sink-service
    depends_on:
      core-scheduler:
        condition: service_started
    env_file:
      - ${CONFIG_DIR}/common.env
    expose:
      - "80"
    labels:
      deltafi-group: deltafi-core
      <<: *logging-label
    networks:
      deltafi:
        aliases:
          - "deltafi-egress-sink-service"
    profiles: ["egress-sink"]
    restart: unless-stopped
    volumes:
      - ${DATA_DIR}/egress-sink:/data/deltafi/egress-sink
    user: "${USER_ID}:${GROUP_ID}"
  deltafi-minio:
    image: ${MINIO}
    command: server /export -S /etc/minio/certs/ --address :9000 --console-address :9001
    container_name: deltafi-minio
    expose:
      - "9000"
    ports:
      - "9001:9001"
    environment:
      MINIO_PROMETHEUS_AUTH_TYPE: public
      MINIO_API_DELETE_CLEANUP_INTERVAL: 1s
    env_file:
      - ${SECRETS_DIR}/minio.env
    labels:
      deltafi-group: deltafi-dependency
      name: deltafi-minio
    networks:
      - deltafi
    restart: unless-stopped
    volumes:
      - ${DATA_DIR}/minio:/export
    user: "${USER_ID}:${GROUP_ID}"
  deltafi-postgres:
    image: ${POSTGRES}
    container_name: deltafi-postgres
    command: [ "-c", "max_connections=1000" ]
    env_file:
      - ${SECRETS_DIR}/postgres.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 5s
      timeout: 15s
      retries: 40
    labels:
      deltafi-group: deltafi-dependency
    networks:
      - deltafi
    expose:
      - "8001"
      - "5432"
    restart: unless-stopped
    volumes:
      - ${DATA_DIR}/postgres:/var/lib/postgresql/data/
    user: "${USER_ID}:${GROUP_ID}"
  deltafi-valkey:
    image: ${VALKEY}
    container_name: deltafi-valkey
    environment:
      BITNAMI_DEBUG: false
      VALKEY_REPLICATION_MODE: primary
    env_file:
      - ${SECRETS_DIR}/valkey.env
    healthcheck:
      test: [ "CMD", "valkey-cli", "--raw", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 8
      start_period: 5s
    labels:
      deltafi-group: deltafi-dependency
    networks:
      - deltafi
    expose:
      - "6379"
    restart: unless-stopped
    volumes:
      - ${SETTINGS_DIR}/redis/:/opt/bitnami/redis/mounted-etc/:ro
  deltafi-grafana:
    image: ${GRAFANA}
    container_name: deltafi-grafana
    environment:
      GF_PATHS_DATA: /var/lib/grafana/
      GF_PATHS_LOGS: /var/log/grafana
      GF_PATHS_PLUGINS: /var/lib/grafana-plugins
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
    env_file:
      - ${SECRETS_DIR}/grafana.env
      - ${SECRETS_DIR}/postgres.env
    expose:
      - "3000"
    labels:
      deltafi-group: deltafi-dependency
    networks:
      deltafi:
        aliases:
          - "visualization"
          - "grafana"
    volumes:
      - ${DATA_DIR}/grafana:/var/lib/grafana
      - ${SETTINGS_DIR}/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ${SETTINGS_DIR}/grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ${SETTINGS_DIR}/grafana/provider.yaml:/etc/grafana/provisioning/dashboards/provider.yaml
      - ${SETTINGS_DIR}/grafana/dashboards:/tmp/dashboards
    restart: unless-stopped
    user: "${USER_ID}:${GROUP_ID}"
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 20
  deltafi-docker-ui:
    image: ${DOCKER_WEB_GUI}
    container_name: deltafi-docker-ui
    expose:
      - "3230"
    environment:
      PUBLIC_URL: /orchestration
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      deltafi-group: deltafi-dependency
    networks:
      deltafi:
        aliases:
          - "orchestration"
    restart: unless-stopped
  deltafi-graphite:
    image: ${GRAPHITE}
    container_name: deltafi-graphite
    environment:
      STATSD_INTERFACE: tcp
      GRAPHITE_TIME_ZONE: Etc/UTC
    expose:
      - "8080"
      - "2003/tcp"
      - "2003/udp"
      - "2004"
      - "2023"
      - "2024"
      - "8125/udp"
      - "8126"
    labels:
      deltafi-group: deltafi-dependency
    networks:
      - deltafi
    restart: unless-stopped
    volumes:
      - ${SETTINGS_DIR}/graphite/conf:/opt/graphite/conf/
      - ${SETTINGS_DIR}/graphite/statsd/tcp.js:/opt/statsd/config/tcp.js
      - ${SETTINGS_DIR}/graphite/statsd/udp.js:/opt/statsd/config/udp.js
      - ${DATA_DIR}/graphite:/opt/graphite/storage/
  deltafi-loki:
    image: ${LOKI}
    container_name: deltafi-loki
    command: -config.file=/etc/loki/loki.yaml
    expose:
      - "3100"
      - "9095"
      - "7946"
    labels:
      deltafi-group: deltafi-dependency
    networks:
      - deltafi
    restart: unless-stopped
    volumes:
      - ${SETTINGS_DIR}/loki/loki.yaml:/etc/loki/loki.yaml
      - ${DATA_DIR}/loki:/data
    user: "${USER_ID}:${GROUP_ID}"
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 20
  deltafi-promtail:
    image: ${PROMTAIL}
    container_name: deltafi-promtail
    command: -config.file=/etc/promtail/promtail.yaml
    depends_on:
      deltafi-loki:
        condition: service_started
    expose:
      - "3101"
    labels:
      deltafi-group: deltafi-dependency
    networks:
      - deltafi
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${SETTINGS_DIR}/promtail/promtail.yaml:/etc/promtail/promtail.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    healthcheck:
      test: ["CMD-SHELL", "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/3101; exit $?;'"]
      interval: 20s
      retries: 30
      timeout: 10s
      start_period: 10s
  deltafi-nginx:
    image: ${NGINX}
    container_name: deltafi-nginx
    depends_on:
      deltafi-grafana:
        condition: service_started
      deltafi-graphite:
        condition: service_started
      deltafi-postgres:
        condition: service_healthy
    environment:
      NGINX_ENVSUBST_OUTPUT_DIR: /etc/nginx/
    env_file:
      - ${CONFIG_DIR}/nginx.env
    labels:
      deltafi-group: deltafi-dependency
    networks:
      deltafi:
        aliases:
          - "ingress"
    restart: unless-stopped
    volumes:
      - ${SETTINGS_DIR}/nginx/conf:/opt/nginx
      - ${DATA_DIR}/certs:/certs
      - ${SETTINGS_DIR}/nginx/nginx.conf.template:/etc/nginx/templates/nginx.conf.template
    ports:
      - "80:80"
      - "443:443"
      - "8042:8042"
    healthcheck:
      test: ["CMD-SHELL", "curl -so /dev/null http://localhost/ || exit 1"]
      interval: 20s
      retries: 30
      timeout: 10s

  java-dev:
    image: ${DELTAFI_DEV_CONTAINER}
    container_name: deltafi-dev-container
    environment:
      APP_NAME: deltafi-dev-container
      DOCKER_USER: "${USER:-coder}"
    env_file:
      - ${CONFIG_DIR}/common.env
      - ${SECRETS_DIR}/valkey.env
      - ${SECRETS_DIR}/minio.env
      - ${SECRETS_DIR}/ssl.env
    group_add:
      - ${DOCKER_GID}
    labels:
      deltafi-group: deltafi-core
      <<: *logging-label
    networks:
      - deltafi
    restart: unless-stopped
    volumes:
      - ${DATA_DIR}/certs:/certs
      - ${REPOS_DIR}:/app
      - ${CONFIG_DIR}/vscode/.local:/home/coder/.local
      - ${CONFIG_DIR}/vscode/.config:/home/coder/.config
      - ${CONFIG_DIR}/.gradle:/home/coder/.gradle
      - ${CONFIG_DIR}/.m2:/home/coder/.m2
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8888:8080"  # VS Code Server
    working_dir: /app
    command: ["/usr/bin/code-server", "--auth", "none", "--bind-addr", "0.0.0.0:8080", "."]
    tty: true
    stdin_open: true
    user: "${USER_ID}:${GROUP_ID}"
    profiles: ["dev"]
