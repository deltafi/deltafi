# DeltaFi config
deltafi:
  local_path_provisioner:
    enabled: false
    path: /data/deltafi/local
  ssl:
    secret: ssl-secret
  core_actions:
    image: deltafi/deltafi-core-actions:2.3.1
  core:
    image: deltafi/deltafi-core:2.3.1
  ingress:
    envVar:
      HTTP_MAX_BODY_SIZE: 5G
  auth:
    mode: basic # basic, cert, or disabled
    secret: auth-secret
    entityResolver:
      enabled: false
      image: deltafi/deltafi-entity-resolver:2.3.1
      url: http://127.0.0.1:8080/
  egress_sink:
    enabled: true
    image: deltafi/deltafi-egress-sink:2.3.1
  nodemonitor:
    image: deltafi/deltafi-nodemonitor:2.3.1
    period: 9
  clustermonitor:
    enabled: true
    image: deltafi/deltafi-clustermonitor:2.3.1
    period: 9

# Kubernetes ingress config
ingress:
  domain: local.deltafi.org
  tls:
    enabled: false
    # ssl_ciphers: "ECDHE-RSA-AES256-GCM-SHA384"
    secrets:
      default: local-deltafi-org
# MinIO config
minio:
  environment:
    # don't let trash files build up
    MINIO_API_DELETE_CLEANUP_INTERVAL: 1s
    # prioritize reads and writes over lifecycle events
    MINIO_SCANNER_SPEED: slow
    MINIO_BROWSER: off
  image:
    tag: RELEASE.2024-08-17T01-24-54Z
  mode: standalone
  existingSecret: minio-keys
  resources:
    requests:
      memory: 2Gi
  replicas: 1
  persistence:
    enabled: true
    existingClaim: deltafi-minio
  service:
    type: NodePort
  nodeSelector:
    node-role.deltafi.org/storage: "true"
  metrics:
    serviceMonitor:
      public: true
# Redis config
redis:
  nameOverride: valkey
  fullnameOverride: deltafi-valkey
  image:
    repository: bitnami/valkey
    tag: 8.0.1
  architecture: standalone
  auth:
    existingSecret: valkey-password
    enabled: true
  commonConfiguration: |-
    # Diable AOF https://redis.io/topics/persistence#append-only-file
    appendonly no
    # Disable RDB persistence
    save ""
  master:
    persistence:
      enabled: false
    nodeSelector:
      node-role.deltafi.org/compute: "true"
# Kubernetes Dashboard config
kubernetes-dashboard:
  image:
    tag: v2.7.0
  securityContext: null
  metricsScraper:
    enabled: true
    image:
      tag: v1.0.9
  protocolHttp: true
  service:
    externalPort: 80
  settings:
    clusterName: 'DeltaFi'
    itemsPerPage: 50
    labelsLimit: 3
    logsAutoRefreshTimeInterval: 5
    resourceAutoRefreshTimeInterval: 5
    disableAccessDeniedNotifications: false
    defaultNamespace: deltafi
    namespaceFallbackList:
      - default

grafana:
  image:
    repository: deltafi/grafana
    tag: 11.4.0-0
  persistence:
    enabled: true
    existingClaim: deltafi-grafana
  nodeSelector:
    node-role.deltafi.org/storage: "true"
  envValueFrom:
    POSTGRES_PASSWORD:
      secretKeyRef:
        name: deltafi.deltafi-postgres
        key: password
    POSTGRES_USER:
      secretKeyRef:
        name: deltafi.deltafi-postgres
        key: username
  grafana.ini:
    paths:
      data: /var/lib/grafana/
      logs: /var/log/grafana
      plugins: /var/lib/grafana-plugins
      provisioning: /etc/grafana/provisioning
    auth.anonymous:
      enabled: false
    auth.basic:
      enabled: false
    auth.proxy:
      enabled: true
      header_name: X-User-Name
      headers: Role:X-Metrics-Role
      auto_sign_up: true
    analytics:
      reporting_enabled: false
      check_for_updates: false
      check_for_plugin_updates: false
      enable_feedback_links: false
    dashboards:
      min_refresh_interval: "10s"
    log:
      mode: console
    log.console:
      format: json
    unified_alerting:
      enabled: true
    alerting:
      enabled: false
    security:
      allow_embedding: true
    feature_toggles:
      enable: "newVizTooltips pdfTables returnToPrevious groupToNestedTableTransformation extraThemes regressionTransformation addFieldFromCalculationStatFunctions formatString"
  sidecar:
    dashboards:
      enabled: true
      provider:
        folder: "DeltaFi"
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
      - name: Graphite
        type: graphite
        access: proxy
        url: http://deltafi-graphite:8080
        editable: false
        isDefault: true
        version: 2
        uid: deltafi-graphite
      - name: Loki
        type: loki
        access: proxy
        url: http://deltafi-loki:3100
        editable: false
        isDefault: false
        version: 2
        uid: deltafi-loki
      - name: Postgres
        uid: deltafi-postgres
        type: postgres
        url: deltafi-postgres:5432
        user: $POSTGRES_USER
        secureJsonData:
          password: $POSTGRES_PASSWORD
        jsonData:
          database: deltafi
          postgresVersion: 1500
          timescaledb: true
          sslmode: require

promtail:
  image:
    tag: 2.9.10
  persistence:
    enabled: true
    existingClaim: deltafi-promtail
  config:
    clients:
      - url: http://deltafi-loki:3100/loki/api/v1/push
    snippets:
      pipelineStages:
        - cri: {}
        - labeldrop:
            - filename
        # Label action logs
        - match:
            selector: '{ app=~".+" } |~ "\"action\":\"[^\"]+\""'
            stages:
            - json:
                expressions:
                  action: action
            - labels:
                action:
            - static_labels:
                type: 'ACTION'
        # Remove noisy probe logs
        - match:
            selector: '{app="deltafi-ui"}'
            stages:
              - drop:
                  expression: "probe"
        # Label audit logs
        - match:
              selector: '{ app=~".*" } |= "\"loggerName\":\"AUDIT\""'
              stages:
              - json:
                  expressions:
                    user: user
              - labels:
                  user:
              - static_labels:
                  type: "AUDIT"
        # Categorize UI HTTP status codes
        - match:
              selector: '{ app="deltafi-ui" } |= " 200 "'
              stages:
              - static_labels:
                  level: "DEBUG"
        - match:
              selector: '{ app="deltafi-ui" } |= " 304 "'
              stages:
              - static_labels:
                  level: "DEBUG"
        - match:
              selector: '{ app="deltafi-ui" } |= " 404 "'
              stages:
              - static_labels:
                  level: "ERROR"
        - match:
              selector: '{ app="deltafi-ui" } |= " 500 "'
              stages:
              - static_labels:
                  level: "ERROR"
        - match:
              selector: '{ app="deltafi-ui" } |= " 503 "'
              stages:
              - static_labels:
                  level: "ERROR"
        # Categorize API HTTP status codes
        - match:
              selector: '{ app="deltafi-api" } |= " 200 "'
              stages:
              - static_labels:
                  level: "DEBUG"
        - match:
              selector: '{ app="deltafi-api" } |= " 404 "'
              stages:
              - static_labels:
                  level: "ERROR"
        - match:
              selector: '{ app="deltafi-api" } |= " 500 "'
              stages:
              - static_labels:
                  level: "ERROR"
        - match:
              selector: '{ app="deltafi-api" } |= " 503 "'
              stages:
              - static_labels:
                  level: "ERROR"
        # Squelch nasty graphite debug logs
        - match:
            selector: '{app="graphite"}'
            stages:
              # Filtering out graphite debug logs containing "(Tagging|Tagged)"
              - drop:
                  expression: "Tagg"
        # Clear out excessive post messages
        - match:
            selector: '{app="deltafi-egress-sink"}'
            stages:
              - drop:
                  expression: "POST / HTTP"
        # Clear out excessive probe messages
        - match:
            selector: '{app="kubernetes-dashboard"}'
            stages:
              - drop:
                  expression: "kube-probe"
              - drop:
                  expression: "/healthz"
loki:
  image:
    tag: 2.9.10
  persistence:
    enabled: true
    existingClaim: deltafi-loki
  nodeSelector:
    node-role.deltafi.org/storage: "true"
  extraArgs:
    log.level: warn
  config:
    compactor:
      retention_enabled: true
      retention_delete_delay: 10m
      compaction_interval: 10m
      retention_delete_worker_count: 150
    limits_config:
      retention_period: 744h
      retention_stream:
      - selector: '{level="DEBUG"}'
        priority: 1
        period: 24h
      - selector: '{container="deltafi-ingress",type="AUDIT"}'
        priority: 3
        period: 24h
      - selector: '{app="kubernetes-dashboard"}'
        priority: 6
        period: 96h
      - selector: '{app="grafana"}'
        priority: 7
        period: 168h
    query_scheduler:
      max_outstanding_requests_per_tenant: 500
  livenessProbe:
   initialDelaySeconds: 5
  readinessProbe:
   initialDelaySeconds: 5

# Graphite Configuration
graphite:
  image:
    tag: 1.1.10-5
  persistence:
    enabled: true
    existingClaim: deltafi-graphite
  nodeSelector:
    node-role.deltafi.org/storage: "true"
  statsd:
    interface: TCP

# Postgres Configuration
postgres:
  version: 16
  resources:
    requests:
     cpu:
     memory:
    limits:
     cpu:
     memory:
