#!/usr/bin/env bash
#
#    DeltaFi - Data transformation and enrichment platform
#
#    Copyright 2021-2023 DeltaFi Contributors <deltafi@deltafi.org>
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#

# vim: filetype=bash
set -e

KIND_VERSION=0.29.0-0
KIND_NODE_VERSION=1.31.9-2
CLUSTER_NAME=deltafi

SUDO=$(which sudo)
KUBECTL="kubectl"
# _readlink()
#
# Usage:
#   _readlink [-e|-f|<options>] <path/to/symlink>
#
# Options:
#   -f  All but the last component must exist.
#   -e  All components must exist.
#
# Description:
#   Wrapper for `readlink` that provides portable versions of GNU `readlink -f`
#   and `readlink -e`, which canonicalize by following every symlink in every
#   component of the given name recursively.
#
# More Information:
#   http://stackoverflow.com/a/1116890
_readlink() {
  local _target_path
  local _target_file
  local _final_directory
  local _final_path
  local _option

  for __arg in "${@:-}"
  do
    case "${__arg}" in
      -e|-f)
        _option="${__arg}"
        ;;
      -*)
        # do nothing
        # ':' is bash no-op
        :
        ;;
      *)
        if [[ -z "${_target_path:-}" ]]
        then
          _target_path="${__arg}"
        fi
        ;;
    esac
  done

  if [[ -z "${_option}" ]]
  then
    readlink "${@}"
  else
    if [[ -z "${_target_path:-}" ]]
    then
      printf "_readlink: missing operand\\n"
      return 1
    fi

    cd "$(dirname "${_target_path}")" || return 1
    _target_file="$(basename "${_target_path}")"

    # Iterate down a (possible) chain of symlinks
    while [[ -L "${_target_file}" ]]
    do
      _target_file="$(readlink "${_target_file}")"
      cd "$(dirname "${_target_file}")" || return 1
      _target_file="$(basename "${_target_file}")"
    done

    # Compute the canonicalized name by finding the physical path
    # for the directory we're in and appending the target file.
    _final_directory="$(pwd -P)"
    _final_path="${_final_directory}/${_target_file}"

    if [[ "${_option}" == "-f" ]]
    then
      printf "%s\\n" "${_final_path}"
      return 0
    elif [[ "${_option}" == "-e" ]]
    then
      if [[ -e "${_final_path}" ]]
      then
        printf "%s\\n" "${_final_path}"
        return 0
      else
        return 1
      fi
    else
      return 1
    fi
  fi
}

_tool_exists() {
    command -v "$1" &> /dev/null
}

# Detect linux OS
_is_linux() {
  if [[ $(uname) == 'Linux' ]]; then
    return 0
  else
    return 1
  fi
}

_is_arm() {
  if [[ $(uname -p) == 'arm' || $(uname -m) == 'aarch64' ]]; then
    return 0
  else
    return 1
  fi
}

BASE_PATH="$( cd "$( dirname "$(_readlink -f "${BASH_SOURCE[0]}")")" &> /dev/null && pwd )"
export BASE_PATH
ORCHESTRATION_PATH="$( cd "$BASE_PATH/.." &> /dev/null && pwd)"
DELTAFI_PATH="$( cd "$ORCHESTRATION_PATH/.." &> /dev/null && pwd)"
ROOT="$( cd "$DELTAFI_PATH/.." &> /dev/null && pwd)"
PV_DIR=${DELTAFI_DATA_DIR:-$ORCHESTRATION_PATH/data}

function kind_command() {
  docker run --rm -i --privileged -v /var/run/docker.sock:/var/run/docker.sock -v "$HOME/.kube":/root/.kube "deltafi/kind:${KIND_VERSION}" "$@"
}

function destroy_kind_cluster() {
    kind_command delete cluster --name ${CLUSTER_NAME}
}

function is_kind_cluster_instantiated() {
  kind_command get clusters -q | grep "^${CLUSTER_NAME}$" > /dev/null;
}

function load() {
  kind_command load "$@"
}

function instantiate_kind_cluster() {
    cat <<EOF | docker run --rm -i --privileged -v /var/run/docker.sock:/var/run/docker.sock -v "$HOME/.kube":/root/.kube "deltafi/kind:${KIND_VERSION}" create cluster -v 0 --wait 10m --name "${CLUSTER_NAME}" --config=-
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
nodes:
- role: control-plane
  image: deltafi/deltafi-kind-node:${KIND_NODE_VERSION}
  kubeadmConfigPatches:
  - |
    kind: InitConfiguration
    nodeRegistration:
      kubeletExtraArgs:
        node-labels: "ingress-ready=true,node-role.deltafi.org/compute=true,node-role.deltafi.org/storage=true"
  extraPortMappings:
  - containerPort: 80
    hostPort: 80
    protocol: TCP
  - containerPort: 443
    hostPort: 443
    protocol: TCP
  extraMounts:
  - hostPath: "${ROOT}"
    containerPath: /usr/dev
  - hostPath: "${PV_DIR}"
    containerPath: /data/deltafi
  - hostPath: "/var/lib/docker/volumes/deltafi-kind-cache/_data"
    containerPath: /var/lib/containerd
    readOnly: false
    selinuxRelabel: false
    propagation: None
EOF
}


if [ "$DELTAFI_MODE" ]; then
  __DELTAFI_MODE="$DELTAFI_MODE"
fi

if [ -f "$DELTAFICLI_WORKDIR/config" ]; then
  # shellcheck disable=SC1091
  . "$DELTAFICLI_WORKDIR/config"
fi

if [ "$__DELTAFI_MODE" ]; then
  export DELTAFI_MODE="$__DELTAFI_MODE"
fi

if [ -z "$DELTAFI_MODE" ]; then
  export DELTAFI_MODE=CLUSTER
fi

if [[ "$(basename "$0")" == "deltafi" || "$DELTAFI_WRAPPER" == "true" ]]; then
  # Deltafi wrapper mode
  if [[ "$DELTAFI_MODE" == "STANDALONE" ]]; then
    "$DELTAFI_PATH/deltafi-cli/deltafi" "$@"
    exit 0
  fi

  if [[ $# -gt 0 ]]; then

    case $1 in
      install|update|upgrade|start|shell)
        cluster "$@"
        ;;
      cluster)
        shift
        cluster "$@"
        ;;
      *)
        docker exec -it -u="$(id -u):$(id -g)" -w /usr/dev -e DELTAFI_MODE=CLUSTER ${CLUSTER_NAME}-control-plane deltafi "$@"
        ;;
    esac
    exit 0
  fi
  "$DELTAFI_PATH/deltafi-cli/deltafi"
  exit 0
fi

# shellcheck disable=SC1091
source "${BASE_PATH}/files/bask"

_require() {
  command -v "$1" &> /dev/null || _exit_1 echo "'$1' must be installed"
}

_require docker
_require kubectl
_require kubens
_require yq

# Load configuration from cluster.yaml
CONFIG=${BASE_PATH}/cluster.yaml
[[ -f "${CONFIG}" ]] || cp "${CONFIG}.template" "${CONFIG}"
PV_STORAGE=$(yq '.persistent_volume.storage' "${CONFIG}")
readarray -t FQDNS < <(yq '.fqdns[]' "${CONFIG}")

_url_for_plugin() {
  local plugin=$1
  yq ".plugins[] | select(.name == \"$plugin\") | .url" "${CONFIG}"
}

_plugin_field() {
  local plugin=$1
  local field=$2
  yq ".plugins[] | select(.name == \"$plugin\") | .$field" "${CONFIG}"
}

_are_you_sure() {
  local prompt=${1:-"Are you sure?"}
  read -r -p "         ${yellow}$prompt${normal} [y/N] " response
  case "$response" in
    [yY][eE][sS]|[yY])
      ;;
    *)
      exit 0
      ;;
  esac
}

_check_docker() {
  type -p docker 2>/dev/null 1>/dev/null || _exit_1 echo "You must install docker (or Docker Desktop) first"
  if ! docker network inspect kind 2>/dev/null 1>/dev/null; then
    docker network create kind > /dev/null && _ok "Docker network 'kind' created"
  fi
  _ok "Docker is ready"
}

_update_k8s_config_permissions() {
  docker exec -i ${CLUSTER_NAME}-control-plane bash > /dev/null <<"EOF"
chmod +r /etc/kubernetes/admin.conf
EOF
  _ok "Updated k8s configuration file permissions"
}

_create_volume() {
  local VOLUME_NAME=$1
  # Create volume if not present
  if ! docker volume inspect "VOLUME_NAME" > /dev/null 2>/dev/null; then
    docker volume create "$VOLUME_NAME" > /dev/null
    _ok "Created docker volume for $VOLUME_NAME"
  fi
}

_destroy_volume() {
  local VOLUME_NAME=$1
  # Create volume if not present
  if docker volume inspect "VOLUME_NAME" > /dev/null 2>/dev/null; then
    docker volume rm "$VOLUME_NAME" > /dev/null
    _ok "Removed docker volume for $VOLUME_NAME"
  fi
}

describe expose "Expose ports for deltafi-core, minio and valkey on localhost"
expose() {
  kubectl port-forward svc/deltafi-core-service 8888:80  > /dev/null 2>&1 &
  kubectl port-forward svc/deltafi-minio 9000:9000 > /dev/null 2>&1 &
  kubectl port-forward svc/deltafi-valkey-master 6379:6379 > /dev/null 2>&1 &
}

describe prerequisites "Install or warn about prerequisites for the KinD cluster"
prerequisites() {
  _check_docker

  if _is_linux; then
    if _tool_exists yum; then
      $SUDO yum install -y curl wget java-21-openjdk java-21-openjdk-devel python3 python3-pip kubectl
    elif _tool_exists apt; then
      $SUDO apt-get install -y curl uidmap dbus-user-session fuse-overlayfs slirp4netns snapd openjdk-21-jdk python3 python3-pip
      if ! _tool_exists kubectl; then
        $SUDO snap install --classic kubectl
        mkdir -p ~/.kube/kubens
      fi
      if ! _tool_exists yq; then
        $SUDO snap install yq
      fi
      if ! _tool_exists kubectx; then
        $SUDO snap install kubectx
      fi
    fi
  else
    if ! type -p brew > /dev/null; then
      _attention "Installing homebrew"
      bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    fi
    _ok "Homebrew"
    brew bundle install --file "$BASE_PATH"/Brewfile
    _attention "Setting up JDK (may require your system password)"
    sudo ln -sfn /opt/homebrew/opt/openjdk@21/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk-21.jdk
    _ok "OpenJDK 21"
    _warn "In order to use JDK 21, you may need to update your path like this:"
    echo "    echo 'export PATH=\"/opt/homebrew/opt/openjdk@21/bin:\$PATH\"' >> ~/.zshrc"
    echo "    echo 'export PATH=\"/opt/homebrew/opt/openjdk@21/bin:\$PATH\"' >> ~/.bashrc"
  fi
}

describe destroy_registries "Scorched earth clean up of all KinD registries"
destroy_registries() {
  [[ $# -gt 0 && "$1" == '-f' ]] || _are_you_sure "Do you want to delete all KinD docker registry cache?"
  _warn "Destroying KinD docker registry cache"
  _destroy_volume "deltafi-kind-cache"
}


describe up "Turn up a KinD cluster (or re-apply cluster settings)"
up() {
  if [ -z ${CLUSTER_UP+x} ]; then
    export CLUSTER_UP=true
  else
    return 0
  fi

  _attention "Initializing KinD cluster"
  _check_docker
  if _is_linux; then
    ${SUDO} mkdir -p -m 2775 "$PV_DIR"
  else
    mkdir -p "$PV_DIR"
  fi
  pushd "$BASE_PATH" > /dev/null

  _create_volume deltafi-kind-cache

  if is_kind_cluster_instantiated; then
    _ok "KinD ${CLUSTER_NAME} cluster already instantiated"
  else
    _conditional "KinD ${CLUSTER_NAME} cluster initialized" _annotated_subshell -v "•" -v "Not sure" -h "Build KinD cluster" instantiate_kind_cluster || _fatal "Check for hung docker containers and network connectivity"
  fi

  _k8s_add_namespace deltafi
  local METRICS_SERVER_DEPLOYMENT="${BASE_PATH}/files/kind-metrics-server-deployment.yaml"
  _is_arm && METRICS_SERVER_DEPLOYMENT="${BASE_PATH}/files/kind-metrics-server-deployment-arm64.yaml"

  _conditional "Metrics server" _annotated_subshell -v "unchanged" -h "Deploy metrics server" kubectl apply -f "$METRICS_SERVER_DEPLOYMENT"
  _conditional "Default namespace is deltafi" _annotated_subshell -h "Set DeltaFi namespace" kubens deltafi || _annotated_subshell kubens deltafi # Repeated because kubens fails on first execution in Debian
  # _install_node_cli
  _enable_ui
  _update_k8s_config_permissions
  _k8s_init

  _ok "KinD cluster fully instantiated"
}

_k8s_add_namespace() {
  local ns=$1
  if ! ${KUBECTL} get namespace "$ns" > /dev/null 2>&1 ; then
    cat <<EOF | _conditional "Create namespace $ns" _annotated_subshell ${KUBECTL} apply -f -
apiVersion: v1
kind: Namespace
metadata:
  name: $ns
EOF
  else
    _ok "Namespace ${ns} exists"
  fi
}

_k8s_add_pv() {
  local name=deltafi-$1
  local path=/data/deltafi/$1
  local localpath=$PV_DIR/$1
  local size=${2:-1G}
  local owner=${3:-1000}
  local namespace=${4:-deltafi}

  # Optionally create a StorageClass instead of a PVC
  # Put in place because the Zalando postgres operator insists on creating its own PVC
  # which can only be tied to the PV via StorageClass
  local storage_class=${5:-}

  if _is_linux; then
    ${SUDO} mkdir -p -m 2775 "${localpath}"
    ${SUDO} chown "${owner}:${owner}" "${localpath}"
  else
    mkdir -p "${localpath}"
  fi

  # StorageClass
  if [ -n "$storage_class" ] && ! ${KUBECTL} get storageclass "$storage_class" > /dev/null 2>&1; then
    cat <<EOF | _conditional "StorageClass: $storage_class" _annotated_subshell ${KUBECTL} apply -f -
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: $storage_class
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
EOF
  fi

  # Define claimRef if storageClass is not set and PVC is being created
  local claim_ref_yaml=""
  if [ -z "$storage_class" ]; then
    claim_ref_yaml=$(cat <<EOF
  claimRef:
    apiVersion: v1
    kind: PersistentVolumeClaim
    name: $name
    namespace: $namespace
EOF
  )
  fi

  # PersistentVolume
  if ! ${KUBECTL} get persistentvolume "$name" > /dev/null 2>&1; then
    cat <<EOF | _conditional "Persistent volume: $name ($path)" _annotated_subshell ${KUBECTL} apply -f -
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: $name
  labels:
      app: $name
      type: local
spec:
  storageClassName: ${storage_class:-manual}  # Use provided storage class or "manual"
$(if [ -n "$claim_ref_yaml" ]; then echo "$claim_ref_yaml"; fi)
  capacity:
    storage: $size
  accessModes:
  - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: "$path"
EOF
  fi

  # PersistentVolumeClaim
  if [ -z "$storage_class" ] && ! ${KUBECTL} get persistentvolumeclaim "$name" -n "$namespace" > /dev/null 2>&1; then
    cat <<EOF | _conditional "Persistent volume claim: $name ($path)" _annotated_subshell ${KUBECTL} apply -f -
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: $name
  namespace: $namespace
spec:
  storageClassName: ${storage_class:-manual}  # Use provided storage class or "manual"
  selector:
    matchLabels:
      app: $name
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: $size
EOF
  fi
}

_enable_ui() {
  _check_local_fqdns
  _conditional "Ingress nginx install" _annotated_subshell -v "unchanged" -h "Installing ingress-nginx..." ${KUBECTL} apply -f "$BASE_PATH/files/ingress-nginx.yaml"
  _info -s "Waiting for ingress-nginx..."
  _conditional "Ingress operational" _annotated_subshell ${KUBECTL} wait --namespace ingress-nginx \
      --for=condition=ready pod \
      --selector=app.kubernetes.io/component=controller \
      --timeout=180s
  _conditional "Ingress api install" _annotated_subshell -v "unchanged" -h "Installing ingress-api..." ${KUBECTL} apply -f "$BASE_PATH/files/ingress-api.yaml"
}

_verify_or_replace_fqdn() {
  local FQDN=$1
  if grep -qxF "127.0.0.1 $FQDN" /etc/hosts; then
    _ok "Active: $FQDN"
  else
    echo "127.0.0.1 $FQDN" | ${SUDO} tee -a /etc/hosts > /dev/null
    _ok "Added: $FQDN"
  fi
}

_check_local_fqdns() {
  _info "Checking /etc/hosts config"
  _info -h "You may be prompted for your sudo password"

  for fqdn in "${FQDNS[@]}"; do
    _verify_or_replace_fqdn "$fqdn"
  done
}

describe install "Initialize a KinD cluster and install core DeltaFi"
install() {
  up
  _conditional "DeltaFi core installed" _annotated_subshell -h "Install DeltaFi core" -v "admin.conf" _kind_deltafi install "$@" -f deltafi/orchestration/charts/deltafi/values-kind.yaml
  _annotated_subshell -h "Set admin password" _kind_deltafi set-admin-password password
  _info -e "If basic_auth is enabled user is 'admin', password is 'password'"
  _info "Open the UI at http://local.deltafi.org"
}

_k8s_init() {
  _k8s_add_namespace deltafi
  _k8s_add_pv minio "${PV_STORAGE}" 1000
  _k8s_add_pv graphite "${PV_STORAGE}" 1000
  _k8s_add_pv grafana "${PV_STORAGE}" 472
  _k8s_add_pv loki "${PV_STORAGE}" 10001
  _k8s_add_pv egress-sink "${PV_STORAGE}" 1000
  _k8s_add_pv auth "${PV_STORAGE}" 1000
  _k8s_add_pv postgres 10Gi 1001 deltafi "deltafi-postgres"
  _k8s_add_pv docker-registry "${PV_STORAGE}" 1000

  _ok "Kubernetes prerequisites"
}

describe down "Shut down the KinD cluster"
down() {
  _attention "Shutting down KinD cluster"
  if is_kind_cluster_instantiated; then
    _annotated_subshell destroy_kind_cluster
    _down "KinD Cluster"
  else
    _fail "No deltafi cluster instantiated"
  fi
}

describe images "List all docker images in use in the cluster"
images() {
  docker exec -it ${CLUSTER_NAME}-control-plane crictl images | sed '1d' | tr -s ' ' | sed 's| |:|' | sed 's| .*||'
}

describe destroy "Shut down the KinD cluster and remove persistent volume data"
destroy() {
  down "$@"

  destroy_registries "$@"

  _down "KinD cluster destroyed"
}

describe shell "Open a tmux shell on the cluster control plane node"
shell() {
  echo "Launching k8s cluster shell..."
  docker exec -w /usr/dev -it ${CLUSTER_NAME}-control-plane tmux -2 new-session -A -s KinD
}

_kind_deltafi() {
  docker exec -i -u="$(id -u):$(id -g)" -e DELTAFI_MODE=CLUSTER ${CLUSTER_NAME}-control-plane bash <<EOF
cd /usr/dev
TERM=screen-256color deltafi $@ 2>&1
EOF
}

describe run "Execute a command on the cluster control node"
run() {
  docker exec -i ${CLUSTER_NAME}-control-plane bash <<EOF
cd /usr/dev
TERM=screen-256color $@
EOF
}

_delete_pv_directory() {
  _attention "Deleting PV directory: $PV_DIR"
  if [ -d "$PV_DIR" ]; then
    if _is_linux; then
      ${SUDO} rm -rf "$PV_DIR"
    else
      rm -rf "$PV_DIR"
    fi
    _ok "PV directory deleted"
  else
    _info "PV directory does not exist: $PV_DIR"
  fi
}

_has_gradle() {
  if [[ -f "build.gradle" ]]; then
    return 0
  else
    return 1
  fi
}

_has_makefile() {
  if [[ -f "Makefile" ]]; then
    return 0
  else
    return 1
  fi
}

normal=$(tput sgr0)
bold=$(tput bold)
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 33)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
black=$(tput setaf 0)
gray=$(tput setaf 8)
orange=$(tput setaf 208)

_log() {
  local timestamp
  timestamp=${gray}$(date -u +"%Y-%m-%dT%H:%M:%SZ")
  echo "${yellow}>  $timestamp${normal} $1"
}

_attention() {
  {
    printf "\n%s\n\n" "${gray}       ▶ ${blue}${*}${normal}"
  } 1>&2
}

_info() {
  {
    local prepend="${orange} ‣ ${normal}"
    case $1 in
    -w)
      prepend="${red} ‼ ${normal}"
      shift
      ;;
    -h)
      prepend="${yellow} ! ${normal}"
      shift
      ;;
    -s)
      prepend="${blue} ╭ ${normal}"
      shift
      ;;
    -e)
      prepend="${blue} ╰ ${normal}"
      shift
      ;;
    -q)
      prepend="   "
      shift
      ;;
    -a)
      prepend="${blue} │${gray} "
      shift
      ;;
    esac
    printf "      %s\n" "${prepend}${*}${normal}"
  } 1>&2
}

_warn() {
  _info -w "$@"
}

_message() {
  color="$1"
  msg="$2"
  shift 2
  printf "[%s%-4s%s]   %s\n" "$color" "$msg" "${normal}" "$@"
}

_ok_annotated() {
  printf "[%s%-4s%s] ${blue}╰${normal} %s\n" "$green" " OK" "${normal}" "$@"
}

_ok() {
  _message "${green}" " OK " "$@"
}

_down() {
  _message "${yellow}" "DOWN" "$@"
}

_fail() {
  _message "${red}" "FAIL" "$@"
}

_fatal() {
  _message "${red}" "FAIL" "$@"
  exit 1
}

_conditional() {
  title=$1
  shift

  if "${@}"; then
    _ok_annotated "$title"
  else
    _fail "$title"
    return 1
  fi
}

_annotated_subshell() {

  local filters=()
  while true; do
    case $1 in
    -h)
      _info -s "$2"
      shift 2
      ;;
    -v)
      filters+=("$2")
      shift 2
      ;;
    *)
      break
      ;;
    esac
  done
  {
    "${@}" 2>&1 | while read -r line; do
      local remove=
      for filter in "${filters[@]}"; do
        if [[ $line =~ $filter ]]; then
          remove=true
          continue
        fi
      done
      [[ -n "${remove}" ]] && continue
      _info -a "$line"
    done
  } 2>&1
}

# Initialize bask framework
_init
