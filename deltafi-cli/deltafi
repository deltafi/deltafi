#!/usr/bin/env bash
set -e

# _readlink()
#
# Usage:
#   _readlink [-e|-f|<options>] <path/to/symlink>
#
# Options:
#   -f  All but the last component must exist.
#   -e  All components must exist.
#
# Description:
#   Wrapper for `readlink` that provides portable versions of GNU `readlink -f`
#   and `readlink -e`, which canonicalize by following every symlink in every
#   component of the given name recursively.
#
# More Information:
#   http://stackoverflow.com/a/1116890
_readlink() {
  local _target_path
  local _target_file
  local _final_directory
  local _final_path
  local _option

  for __arg in "${@:-}"
  do
    case "${__arg}" in
      -e|-f)
        _option="${__arg}"
        ;;
      -*)
        # do nothing
        # ':' is bash no-op
        :
        ;;
      *)
        if [[ -z "${_target_path:-}" ]]
        then
          _target_path="${__arg}"
        fi
        ;;
    esac
  done

  if [[ -z "${_option}" ]]
  then
    readlink "${@}"
  else
    if [[ -z "${_target_path:-}" ]]
    then
      printf "_readlink: missing operand\\n"
      return 1
    fi

    cd "$(dirname "${_target_path}")" || return 1
    _target_file="$(basename "${_target_path}")"

    # Iterate down a (possible) chain of symlinks
    while [[ -L "${_target_file}" ]]
    do
      _target_file="$(readlink "${_target_file}")"
      cd "$(dirname "${_target_file}")" || return 1
      _target_file="$(basename "${_target_file}")"
    done

    # Compute the canonicalized name by finding the physical path
    # for the directory we're in and appending the target file.
    _final_directory="$(pwd -P)"
    _final_path="${_final_directory}/${_target_file}"

    if [[ "${_option}" == "-f" ]]
    then
      printf "%s\\n" "${_final_path}"
      return 0
    elif [[ "${_option}" == "-e" ]]
    then
      if [[ -e "${_final_path}" ]]
      then
        printf "%s\\n" "${_final_path}"
        return 0
      else
        return 1
      fi
    else
      return 1
    fi
  fi
}

_exit_1() {
  {
    printf "%s " "$(tput setaf 1)!$(tput sgr0)"
    "${@}"
  } 1>&2
  exit 1
}

_command_check() {
  command -v $1 &> /dev/null || _exit_1 echo "Command '$@' is not installed. DeltaFi CLI cannot execute."
}

export DELTAFICLI_WORKDIR=$(cd $(dirname $(_readlink -f $0)) && pwd)
export DELTAFI_DIR=$(dirname "$DELTAFICLI_WORKDIR")
export DELTAFICLI_K8S_NAMESPACE=deltafi

# shellcheck source=common
. "$DELTAFICLI_WORKDIR/common"

if [ "$DELTAFI_MODE" ]; then
  __DELTAFI_MODE="$DELTAFI_MODE"
fi

if [ -f "$DELTAFICLI_WORKDIR/config" ]; then
  . "$DELTAFICLI_WORKDIR/config"
fi

if [ "$__DELTAFI_MODE" ]; then
  export DELTAFI_MODE="$__DELTAFI_MODE"
fi

if [ -z "$DELTAFI_MODE" ]; then
  export DELTAFI_MODE=STANDALONE
fi

if [ "$2" == "-v" ]; then
  cli_log "ENV variables"
  env | grep "DELTAFICLI_*"
fi

if [ -f "$DELTAFICLI_DISABLED_STATE_PATH" ]; then
  if [[ "$1" != "reenable" && "$1" != "version" ]]; then
    echo "The system is currently disabled, 'deltafi reenable' must be run prior to executing other commands"
    exit
  fi
fi

_command_check jq
_command_check curl
_command_check sed

if ! _is_standalone; then
  _command_check kubectl
fi

cli_help() {
  cli_name=${0##*/}
  cat "$DELTAFICLI_WORKDIR/logo"
  echo "
DeltaFi CLI
Version: $(cat $DELTAFI_DIR/VERSION)
Mode:    ${DELTAFI_MODE}

Usage: $cli_name [command]

Commands:
  configure-plugin-ssl          configure SSL for plugins and the entity resolver
  data-sink                     start, stop, show or validate a data sink
  did                           show did for filename
  disable                       stop all DeltaFi processes
  export-config                 export all the loaded flow configurations as yaml
  export-data-sink-plan         export a single data sink plan by name as JSON
  export-rest-data-source-plan  export a single rest data source plan by name as JSON
  export-system-plans           export all flow plans from the system-plugin
  export-timed-data-source-plan export a single timed data source flow plan by name as JSON
  export-transform-plan         export a single transform plan by name as JSON
  ingress                       ingress one or more files to a flow
  install                       install/upgrade the DeltaFi core
  install-plugin                install/upgrade a DeltaFi plugin
  list-actions                  list the actions registered with deltafi
  list-flows                    list the flows in the system with their status
  list-plans                    list all flow plans within deltafi
  list-plugins                  list all installed plugins
  list-policies                 list delete policies
  load-integration-test         load an integration test into the system
  load-policies                 load delete policies from a JSON file
  load-system-plans             load flow plans and variables for the system-plugin
  minio-cli                     launch the minio CLI
  performance-test              run performance tests against DeltaFi
  plugin-init                   create a new plugin project
  postgres-cli                  launch the Postgres CLI
  postgres-eval                 run SQL in Postgres
  query                         send a query to graphql
  reenable                      reenable all DeltaFi processes
  rest-data-source              start, stop, show and other controls for a rest data source
  run-integration-test          run a previously loaded integration test
  scale                         edit the replica counts for all deployments and statefulsets
  secrets                       show k8s secrets
  serviceip                     show service IP
  set-admin-password            set the admin password
  start                         (alias for install)
  status                        show status of system
  system-snapshot               manage system state snapshots
  system-property               manage system properties
  timed-data-source             start, stop, show and other controls for a timed data source
  trace                         show trace data for a DID
  transform                     start, stop or validate a transform
  update                        (alias for install)
  upgrade                       (alias for install)
  uninstall                     uninstall the DeltaFi core
  uninstall-plugin              uninstall a DeltaFi plugin
  valkey-cli                    launch the valkey CLI
  valkey-latency                monitor valkey latency
  valkey-stats                  monitor valkey connection stats
  valkey-watch                  watch every command issued to valkey
  version                       print the current core version of DeltaFi
  versions                      show running versions
  *                             show help

Flags:
  --help            show help for a specific command
  -v                enable verbose output
"
  exit 1
}

case "$1" in
  configure-plugin-ssl)
      "$DELTAFICLI_WORKDIR/commands/configure-plugin-ssl" "$@"
      ;;
  data-sink)
      "$DELTAFICLI_WORKDIR/commands/data-sink" "$@"
      ;;
  did)
    "$DELTAFICLI_WORKDIR/commands/did" "$@"
    ;;
  disable)
    "$DELTAFICLI_WORKDIR/commands/disable" "$@"
    ;;
  event)
    "$DELTAFICLI_WORKDIR/commands/event" "$@"
    ;;
  export-config)
    "$DELTAFICLI_WORKDIR/commands/export-config" "$@"
    ;;
  export-data-sink-plan)
    "$DELTAFICLI_WORKDIR/commands/export-data-sink-plan" "$@"
    ;;
  export-rest-data-source-plan)
    "$DELTAFICLI_WORKDIR/commands/export-rest-data-source-plan" "$@"
    ;;
  export-system-plans)
    "$DELTAFICLI_WORKDIR/commands/export-system-plans" "$@"
    ;;
  export-timed-data-source-plan)
    "$DELTAFICLI_WORKDIR/commands/export-timed-data-source-plan" "$@"
    ;;
  export-transform-plan)
    "$DELTAFICLI_WORKDIR/commands/export-transform-plan" "$@"
    ;;
  ingress)
    "$DELTAFICLI_WORKDIR/commands/ingress" "$@"
    ;;
  install|update|upgrade|start)
    "$DELTAFICLI_WORKDIR/commands/install" "$@"
    ;;
  install-plugin)
    "$DELTAFICLI_WORKDIR/commands/install-plugin" "$@"
    ;;
  list-actions)
    "$DELTAFICLI_WORKDIR/commands/list-actions" "$@"
    ;;
  list-flows)
    "$DELTAFICLI_WORKDIR/commands/list-flows" "$@"
    ;;
  list-plans)
    "$DELTAFICLI_WORKDIR/commands/list-plans" "$@" | less -XSE
    ;;
  list-plugins)
    "$DELTAFICLI_WORKDIR/commands/list-plugins" "$@"
    ;;
  list-policies)
    "$DELTAFICLI_WORKDIR/commands/list-policies" "$@"
    ;;
  load-integration-test)
    "$DELTAFICLI_WORKDIR/commands/load-integration-test" "$@"
    ;;
  load-policies)
    "$DELTAFICLI_WORKDIR/commands/load-policies" "$@"
    ;;
  load-system-plans)
    "$DELTAFICLI_WORKDIR/commands/load-system-plans" "$@"
    ;;
  minio-cli)
    "$DELTAFICLI_WORKDIR/commands/minio-cli" "$@"
    ;;
  performance-test)
    BUNDLE_GEMFILE=$DELTAFICLI_WORKDIR/Gemfile bundle exec "$DELTAFICLI_WORKDIR/commands/performance-test" "$@"
    ;;
  plugin-init)
    "$DELTAFICLI_WORKDIR/commands/plugin-init" "$@"
    ;;
  postgres-cli)
    "$DELTAFICLI_WORKDIR/commands/postgres-cli" "$@"
    ;;
  postgres-eval)
    "$DELTAFICLI_WORKDIR/commands/postgres-eval" "$@"
    ;;
  query)
    "$DELTAFICLI_WORKDIR/commands/query" "$@"
    ;;
  run-integration-test)
    "$DELTAFICLI_WORKDIR/commands/run-integration-test" "$@"
    ;;
  valkey-cli | redis-cli)
    "$DELTAFICLI_WORKDIR/commands/valkey-cli" "$@"
    ;;
  valkey-latency | redis-latency)
    "$DELTAFICLI_WORKDIR/commands/valkey-latency" "$@"
    ;;
  valkey-stats | redis-stats)
    "$DELTAFICLI_WORKDIR/commands/valkey-stats" "$@"
    ;;
  valkey-watch | redis-watch)
    "$DELTAFICLI_WORKDIR/commands/valkey-watch" "$@"
    ;;
  reenable)
    "$DELTAFICLI_WORKDIR/commands/reenable" "$@"
    ;;
  scale)
    "$DELTAFICLI_WORKDIR/commands/scale" "$@"
    ;;
  status)
    "$DELTAFICLI_WORKDIR/commands/status" "$@"
    ;;
  uninstall)
    "$DELTAFICLI_WORKDIR/commands/uninstall" "$@"
    ;;
  uninstall-plugin)
    "$DELTAFICLI_WORKDIR/commands/uninstall-plugin" "$@"
    ;;
  secrets)
    "$DELTAFICLI_WORKDIR/commands/secrets" "$@"
    ;;
  serviceip)
    "$DELTAFICLI_WORKDIR/commands/serviceip" "$@"
    ;;
  set-admin-password)
    "$DELTAFICLI_WORKDIR/commands/set-admin-password" "$@"
    ;;
  system-property)
    "$DELTAFICLI_WORKDIR/commands/system-property" "$@"
    ;;
  system-snapshot)
    "$DELTAFICLI_WORKDIR/commands/system-snapshot" "$@"
    ;;
  timed-data-source)
    "$DELTAFICLI_WORKDIR/commands/timed-data-source" "$@"
    ;;
  rest-data-source)
    "$DELTAFICLI_WORKDIR/commands/rest-data-source" "$@"
    ;;
  trace)
    "$DELTAFICLI_WORKDIR/commands/trace" "$@"
    ;;
  transform)
    "$DELTAFICLI_WORKDIR/commands/transform" "$@"
    ;;
  versions)
    "$DELTAFICLI_WORKDIR/commands/versions" "$@"
    ;;
  version)
    cat "$DELTAFI_DIR"/VERSION
    ;;
  logo)
    cat "$DELTAFICLI_WORKDIR"/logo
    ;;
  *)
    cli_help
    ;;
esac
