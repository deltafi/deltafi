#!/usr/bin/env bash
set -e

# _readlink()
#
# Usage:
#   _readlink [-e|-f|<options>] <path/to/symlink>
#
# Options:
#   -f  All but the last component must exist.
#   -e  All components must exist.
#
# Description:
#   Wrapper for `readlink` that provides portable versions of GNU `readlink -f`
#   and `readlink -e`, which canonicalize by following every symlink in every
#   component of the given name recursively.
#
# More Information:
#   http://stackoverflow.com/a/1116890
_readlink() {
  local _target_path
  local _target_file
  local _final_directory
  local _final_path
  local _option

  for __arg in "${@:-}"
  do
    case "${__arg}" in
      -e|-f)
        _option="${__arg}"
        ;;
      -*)
        # do nothing
        # ':' is bash no-op
        :
        ;;
      *)
        if [[ -z "${_target_path:-}" ]]
        then
          _target_path="${__arg}"
        fi
        ;;
    esac
  done

  if [[ -z "${_option}" ]]
  then
    readlink "${@}"
  else
    if [[ -z "${_target_path:-}" ]]
    then
      printf "_readlink: missing operand\\n"
      return 1
    fi

    cd "$(dirname "${_target_path}")" || return 1
    _target_file="$(basename "${_target_path}")"

    # Iterate down a (possible) chain of symlinks
    while [[ -L "${_target_file}" ]]
    do
      _target_file="$(readlink "${_target_file}")"
      cd "$(dirname "${_target_file}")" || return 1
      _target_file="$(basename "${_target_file}")"
    done

    # Compute the canonicalized name by finding the physical path
    # for the directory we're in and appending the target file.
    _final_directory="$(pwd -P)"
    _final_path="${_final_directory}/${_target_file}"

    if [[ "${_option}" == "-f" ]]
    then
      printf "%s\\n" "${_final_path}"
      return 0
    elif [[ "${_option}" == "-e" ]]
    then
      if [[ -e "${_final_path}" ]]
      then
        printf "%s\\n" "${_final_path}"
        return 0
      else
        return 1
      fi
    else
      return 1
    fi
  fi
}

export DELTAFICLI_WORKDIR=$(cd $(dirname $(_readlink -f $0)) && pwd)
# shellcheck source=common
. "$DELTAFICLI_WORKDIR/common"

cli_help() {
  cli_name=${0##*/}
  echo "
DeltaFi CLI
Version: $(cat $DELTAFICLI_WORKDIR/VERSION)

Usage: $cli_name [command]

Commands:
  did               show did for filename
  export-config     export the current running configuration as yaml
  ingress           ingress one or more files to a flow
  install           install/upgrade the DeltaFi core
  install-plugin    install/upgrade a DeltaFi plugin
  list-actions      list the actions registered with deltafi
  load-config       add to or replace the deltafi config
  mongo-cli         launch the mongo CLI
  query             send a query to the gateway
  redis-cli         launch the redis CLI
  redis-latency     monitor redis latency
  redis-stats       monitor redis connection stats
  redis-watch       watch every command issued to redis
  secrets           show k8s secrets
  serviceip         show service IP
  start             (alias for install)
  status            show status of system
  stop              (alias for uninstall)
  trace             show trace data for a DID
  update            (alias for install)
  upgrade           (alias for install)
  uninstall         uninstall the DeltaFi core
  uninstall-plugin  uninstall a DeltaFi plugin
  versions          show running versions
  *                 show help

Flags:
  --help            show help for a specific command
  -v                enable verbose output
"
  exit 1
}

[ ! -f "$DELTAFICLI_WORKDIR/config" ] \
  && echo "ERROR: No $DELTAFICLI_WORKDIR/config file found. " \
  && echo "cp $DELTAFICLI_WORKDIR/config.template $DELTAFICLI_WORKDIR/config and adjust." \
  && exit 1

. "$DELTAFICLI_WORKDIR/config"

if [ "$2" == "-v" ]; then
  cli_log "ENV variables"
  env | grep "DELTAFICLI_*"
fi

case "$1" in
  did)
    "$DELTAFICLI_WORKDIR/commands/did" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/did.log"
    ;;
  export-config)
    "$DELTAFICLI_WORKDIR/commands/export-config" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/export-config.log"
    ;;
  ingress)
    "$DELTAFICLI_WORKDIR/commands/ingress" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/ingress.log"
    ;;
  install|update|upgrade|start)
    "$DELTAFICLI_WORKDIR/commands/install" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/install.log"
    ;;
  install-plugin)
    "$DELTAFICLI_WORKDIR/commands/install-plugin" $@
    ;;
  list-actions)
    "$DELTAFICLI_WORKDIR/commands/list-actions" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/list-actions.log"
    ;;
  load-config)
    "$DELTAFICLI_WORKDIR/commands/load-config" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/load-config.log"
    ;;
  mongo-cli)
    "$DELTAFICLI_WORKDIR/commands/mongo-cli" $@
    ;;
  query)
    "$DELTAFICLI_WORKDIR/commands/query" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/query.log"
    ;;
  redis-cli)
    "$DELTAFICLI_WORKDIR/commands/redis-cli" $@
    ;;
  redis-latency)
    "$DELTAFICLI_WORKDIR/commands/redis-latency" $@
    ;;
  redis-stats)
    "$DELTAFICLI_WORKDIR/commands/redis-stats" $@
    ;;
  redis-watch)
    "$DELTAFICLI_WORKDIR/commands/redis-watch" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/redis-watch.log"
    ;;
  status)
    "$DELTAFICLI_WORKDIR/commands/status" $@
    ;;
  uninstall|stop)
    "$DELTAFICLI_WORKDIR/commands/uninstall" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/uninstall.log"
    ;;
  uninstall-plugin)
    "$DELTAFICLI_WORKDIR/commands/uninstall-plugin" $@
    ;;
  secrets)
    "$DELTAFICLI_WORKDIR/commands/secrets" $@
    ;;
  serviceip)
    "$DELTAFICLI_WORKDIR/commands/serviceip" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/serviceip.log"
    ;;
  trace)
    "$DELTAFICLI_WORKDIR/commands/trace" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/trace.log"
    ;;
  versions|version)
    "$DELTAFICLI_WORKDIR/commands/versions" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/versions.log"
    ;;
  *)
    cli_help
    ;;
esac
