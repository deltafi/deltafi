#!/usr/bin/env bash
set -e

# _readlink()
#
# Usage:
#   _readlink [-e|-f|<options>] <path/to/symlink>
#
# Options:
#   -f  All but the last component must exist.
#   -e  All components must exist.
#
# Description:
#   Wrapper for `readlink` that provides portable versions of GNU `readlink -f`
#   and `readlink -e`, which canonicalize by following every symlink in every
#   component of the given name recursively.
#
# More Information:
#   http://stackoverflow.com/a/1116890
_readlink() {
  local _target_path
  local _target_file
  local _final_directory
  local _final_path
  local _option

  for __arg in "${@:-}"
  do
    case "${__arg}" in
      -e|-f)
        _option="${__arg}"
        ;;
      -*)
        # do nothing
        # ':' is bash no-op
        :
        ;;
      *)
        if [[ -z "${_target_path:-}" ]]
        then
          _target_path="${__arg}"
        fi
        ;;
    esac
  done

  if [[ -z "${_option}" ]]
  then
    readlink "${@}"
  else
    if [[ -z "${_target_path:-}" ]]
    then
      printf "_readlink: missing operand\\n"
      return 1
    fi

    cd "$(dirname "${_target_path}")" || return 1
    _target_file="$(basename "${_target_path}")"

    # Iterate down a (possible) chain of symlinks
    while [[ -L "${_target_file}" ]]
    do
      _target_file="$(readlink "${_target_file}")"
      cd "$(dirname "${_target_file}")" || return 1
      _target_file="$(basename "${_target_file}")"
    done

    # Compute the canonicalized name by finding the physical path
    # for the directory we're in and appending the target file.
    _final_directory="$(pwd -P)"
    _final_path="${_final_directory}/${_target_file}"

    if [[ "${_option}" == "-f" ]]
    then
      printf "%s\\n" "${_final_path}"
      return 0
    elif [[ "${_option}" == "-e" ]]
    then
      if [[ -e "${_final_path}" ]]
      then
        printf "%s\\n" "${_final_path}"
        return 0
      else
        return 1
      fi
    else
      return 1
    fi
  fi
}

export DELTAFICLI_WORKDIR=$(cd $(dirname $(_readlink -f $0)) && pwd)
export DELTAFI_DIR=$(dirname "$DELTAFICLI_WORKDIR")

# shellcheck source=common
. "$DELTAFICLI_WORKDIR/common"

cli_help() {
  cli_name=${0##*/}
  echo "
DeltaFi CLI
Version: $(cat $DELTAFICLI_WORKDIR/VERSION)

Usage: $cli_name [command]

Commands:
  did                  show did for filename
  egress-flow          start, stop or validate an egress flow
  enrich-flow          start, stop or validate an enrich flow
  export-config        export all the loaded flow configurations as yaml
  export-egress-plan   export a single egress flow plan by name as JSON
  export-enrich-plan   export a single enrich flow plan by name as JSON
  export-ingress-plan  export a single ingress flow plan by name as JSON
  export-rules         export all ingress-flow assignment rules as JSON
  ingress              ingress one or more files to a flow
  ingress-flow         start, stop or validate an ingress flow
  install              install/upgrade the DeltaFi core
  install-plugin       install/upgrade a DeltaFi plugin
  list-actions         list the actions registered with deltafi
  list-flows           list the flows in the system with their status
  list-plans           list all flow plans within deltafi
  list-policies        list delete policies
  load-plan            load a flow plan to deltafi from a JSON file
  load-policies        load delete policies from a JSON file
  load-rules           load ingress flow assignment rules from a JSON file
  load-variables       load plugin variables
  mongo-cli            launch the mongo CLI
  mongo-migrate        run mongo migrations
  query                send a query to graphql
  redis-cli            launch the redis CLI
  redis-latency        monitor redis latency
  redis-stats          monitor redis connection stats
  redis-watch          watch every command issued to redis
  secrets              show k8s secrets
  serviceip            show service IP
  set-admin-password   set the admin password
  start                (alias for install)
  status               show status of system
  stop                 (alias for uninstall)
  trace                show trace data for a DID
  update               (alias for install)
  upgrade              (alias for install)
  uninstall            uninstall the DeltaFi core
  uninstall-plugin     uninstall a DeltaFi plugin
  versions             show running versions
  *                    show help

Flags:
  --help            show help for a specific command
  -v                enable verbose output
"
  exit 1
}

[ ! -f "$DELTAFICLI_WORKDIR/config" ] \
  && echo "ERROR: No $DELTAFICLI_WORKDIR/config file found. " \
  && echo "cp $DELTAFICLI_WORKDIR/config.template $DELTAFICLI_WORKDIR/config and adjust." \
  && exit 1

. "$DELTAFICLI_WORKDIR/config"

if [ "$2" == "-v" ]; then
  cli_log "ENV variables"
  env | grep "DELTAFICLI_*"
fi

case "$1" in
  did)
    "$DELTAFICLI_WORKDIR/commands/did" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/did.log"
    ;;
  egress-flow)
    "$DELTAFICLI_WORKDIR/commands/egress-flow" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/egress-flow.log"
    ;;
  enrich-flow)
    "$DELTAFICLI_WORKDIR/commands/enrich-flow" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/enrich-flow.log"
    ;;
  export-config)
    "$DELTAFICLI_WORKDIR/commands/export-config" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/export-config.log"
    ;;
  export-egress-plan)
    "$DELTAFICLI_WORKDIR/commands/export-egress-plan" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/export-egress-plan.log"
    ;;
  export-enrich-plan)
    "$DELTAFICLI_WORKDIR/commands/export-enrich-plan" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/export-enrich-plan.log"
    ;;
  export-ingress-plan)
    "$DELTAFICLI_WORKDIR/commands/export-ingress-plan" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/export-ingress-plan.log"
    ;;
  export-rules)
    "$DELTAFICLI_WORKDIR/commands/export-rules" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/export-rules.log"
    ;;
  ingress)
    "$DELTAFICLI_WORKDIR/commands/ingress" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/ingress.log"
    ;;
  ingress-flow)
    "$DELTAFICLI_WORKDIR/commands/ingress-flow" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/ingress-flow.log"
    ;;
  install|update|upgrade|start)
    "$DELTAFICLI_WORKDIR/commands/install" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/install.log"
    ;;
  install-plugin)
    "$DELTAFICLI_WORKDIR/commands/install-plugin" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/install-plugin.log"
    ;;
  list-actions)
    "$DELTAFICLI_WORKDIR/commands/list-actions" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/list-actions.log"
    ;;
  list-flows)
    "$DELTAFICLI_WORKDIR/commands/list-flows" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/list-flows.log"
    ;;
  list-plans)
    "$DELTAFICLI_WORKDIR/commands/list-plans" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/list-plans.log"
    ;;
  list-policies)
    "$DELTAFICLI_WORKDIR/commands/list-policies" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/list-policies.log"
    ;;
  load-plan)
    "$DELTAFICLI_WORKDIR/commands/load-plan" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/load-plan.log"
    ;;
  load-policies)
    "$DELTAFICLI_WORKDIR/commands/load-policies" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/load-policies.log"
    ;;
  load-rules)
    "$DELTAFICLI_WORKDIR/commands/load-rules" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/load-rules.log"
    ;;
  load-variables)
    "$DELTAFICLI_WORKDIR/commands/load-variables" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/load-variables.log"
    ;;
  mongo-cli)
    "$DELTAFICLI_WORKDIR/commands/mongo-cli" $@
    ;;
  mongo-migrate)
    "$DELTAFICLI_WORKDIR/commands/mongo-migrate" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/mongo-migrate.log"
    ;;
  query)
    "$DELTAFICLI_WORKDIR/commands/query" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/query.log"
    ;;
  redis-cli)
    "$DELTAFICLI_WORKDIR/commands/redis-cli" $@
    ;;
  redis-latency)
    "$DELTAFICLI_WORKDIR/commands/redis-latency" $@
    ;;
  redis-stats)
    "$DELTAFICLI_WORKDIR/commands/redis-stats" $@
    ;;
  redis-watch)
    "$DELTAFICLI_WORKDIR/commands/redis-watch" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/redis-watch.log"
    ;;
  status)
    "$DELTAFICLI_WORKDIR/commands/status" $@
    ;;
  uninstall|stop)
    "$DELTAFICLI_WORKDIR/commands/uninstall" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/uninstall.log"
    ;;
  uninstall-plugin)
    "$DELTAFICLI_WORKDIR/commands/uninstall-plugin" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/uninstall-plugin.log"
    ;;
  secrets)
    "$DELTAFICLI_WORKDIR/commands/secrets" $@
    ;;
  serviceip)
    "$DELTAFICLI_WORKDIR/commands/serviceip" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/serviceip.log"
    ;;
  set-admin-password)
    "$DELTAFICLI_WORKDIR/commands/set-admin-password" $@
    ;;
  trace)
    "$DELTAFICLI_WORKDIR/commands/trace" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/trace.log"
    ;;
  versions|version)
    "$DELTAFICLI_WORKDIR/commands/versions" $@ | tee -ia "$DELTAFICLI_WORKDIR/logs/versions.log"
    ;;
  *)
    cli_help
    ;;
esac
