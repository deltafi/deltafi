#!/usr/bin/env bash

. "$DELTAFICLI_WORKDIR/common"

cli_help_command() {
  echo "
Command: load-config

Usage:
  load-config CONFIG_FILE [OPTIONS]

Options:
  -r, --replace  Replace running config with the given config. Without this flag the given config will be merged with the running config.
  -h, --help     Show help
  -v, --verbose  Verbose output"
  exit 1
}

TMPFILE="/tmp/.deltafi-load-config.$$"

cleanup() {
  rm -f $TMPFILE
  exit
}

trap cleanup INT

VERBOSE=false
MUTATION="mergeConfig"
POSITIONAL=()
while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
    -r|--replace)
      MUTATION="replaceConfig"
      shift # past argument
      ;;
    -h|--help)
      cli_help_command
      shift # past argument
      ;;
    -v|--verbose)
      VERBOSE=true
      shift # past argument
      ;;
    *)    # unknown option
      POSITIONAL+=("$1") # save it in an array for later
      shift # past argument
      ;;
  esac
done

set -- "${POSITIONAL[@]}" # restore positional parameters
ARGS=($@)
[[ " ${ARGS[@]} " =~ " --help " ]] && cli_help_command
[[ ${#ARGS[@]} -lt 2 ]] && cli_help_command
FILE=${ARGS[@]:1}

if [ ! -f "$FILE" ]; then
  cli_log "${yellow}${FILE}: No such file${normal}"
  exit 1
fi

BASENAME="$(basename $FILE)"
JSON=$(cat "$FILE" | ruby -rjson -e 'puts Hash["config" => ARGF.read].to_json')

QUERY="mutation(\$config: String!) {${MUTATION}(configYaml: \$config)}"
DELTAFI_DGS=$(deltafi serviceip deltafi-core-domain-service)
POST_QUERY="{ \"query\": \"$QUERY\",\"variables\":$JSON}"

truncate --size 0 ${TMPFILE}
RESPONSE_CODE=$(curl -s -X POST -o ${TMPFILE} -w "%{http_code}" -H "Content-Type: application/json" -d "$POST_QUERY" http://$DELTAFI_DGS/graphql)

if [[ "$RESPONSE_CODE" != "200" ]]; then
  cli_log "${red}${BASENAME}: Loading config failed${normal}"
  echo -e "${red}${RESPONSE_CODE} Error: $(cat ${TMPFILE})${normal}"
else
  ERRORS=$(cat ${TMPFILE} | jq -r "select(.errors) | .errors[] | .message")
  if [[ "$ERRORS" != "" ]]; then
    cli_log "${red}${BASENAME}: Loading config failed${normal}"
    echo -e "${red}Error: ${ERRORS}${normal}"
  else
    cli_log "Successfully loaded config from file ${cyan}${BASENAME}${normal}"
    [[ "$VERBOSE" == true ]] && (cat ${TMPFILE} | jq ".data.${MUTATION}" | ruby -ryaml -e 'puts YAML.safe_load(ARGF.read).to_yaml')
  fi
fi

cleanup
