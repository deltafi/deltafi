#!/usr/bin/env bash

. "$DELTAFICLI_WORKDIR/common"

cli_help_command() {
  echo "
Command: load-system-plans

Usage:
  load-system-plans <FLOWS-DIR | FLOW-PLAN-FILE | EXPORTED-PLANS-FILE>
  
Options:
  -h, --help  Show help"
  exit 1
}

TMPFILE="/tmp/.deltafi-load-system-plans.$$"

cleanup() {
  rm -f $TMPFILE
  exit
}

trap cleanup INT

POSITIONAL=()
while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
    -h|--help)
      cli_help_command
      shift # past argument
      ;;
    *)    # unknown option
      POSITIONAL+=("$1") # save it in an array for later
      shift # past argument
      ;;
  esac
done

set -- "${POSITIONAL[@]}" # restore positional parameters
ARGS=("$@")
[[ " ${ARGS[@]} " =~ " --help " ]] && cli_help_command
[[ ${#ARGS[@]} -lt 2 ]] && cli_help_command


FLOW_PLAN_OR_DIR=${ARGS[1]}
if [ ! -e "${FLOW_PLAN_OR_DIR}" ]; then
    cli_log "${red}${FLOW_PLAN_OR_DIR}: Flow plan or flows directory not found${normal}"
  exit 1
fi

if [ -d "${FLOW_PLAN_OR_DIR}" ]; then
  FLOW_PLAN_OR_DIR=$(cd ${FLOW_PLAN_OR_DIR} && pwd)
fi

DELTAFI_DGS=$(_graphql)

read_file() {
  FLOW_PLAN_FILE="$@"
  if [ ! -f "${FLOW_PLAN_FILE}" ]; then
    cli_log "${yellow}${FLOW_PLAN_FILE}: No such file${normal}"
    return 1
  fi

  JSON=$(cat "${FLOW_PLAN_FILE}")

  echo "${JSON}"
}

execute_graphql() {
  truncate -s 0 ${TMPFILE}

  local POST_QUERY="$@"

  local RESPONSE_CODE=$(curl -s -X POST -o ${TMPFILE} -w "%{http_code}" -H "Content-Type: application/json" -H "${PERMISSION}" -H "${CLI_USER}" -d "${POST_QUERY}" "${DELTAFI_DGS}")

  if [[ "${RESPONSE_CODE}" != "200" ]]; then
    echo -e "${RESPONSE_CODE} Error: $(cat ${TMPFILE})"
    return 1
  else
    ERRORS=$(cat ${TMPFILE} | jq "select(.errors) | .errors[] | .message")
    if [[ "${ERRORS}" != "" ]]; then
      echo -e "${ERRORS}"
      return 1
    else
      cat "${TMPFILE}"
      return 0
    fi
  fi
}

load_variables() {
  local VARIABLES_FILE="$@"
  local BASENAME="$(basename "${VARIABLES_FILE}")"
  local JSON=$(read_file "${VARIABLES_FILE}")

  local VARIABLES="{\"variables\": ${JSON} }"
  local QUERY="mutation(\$variables: [VariableInput]!) { savePluginVariables(variables: \$variables)}"
  local POST_QUERY="{ \"query\": \"${QUERY}\",\"variables\":${VARIABLES}}"

  MUTATION_RESPONSE=$(execute_graphql "${POST_QUERY}")
  MUTATION_RETURN_CODE=$?

  if [[ "${MUTATION_RETURN_CODE}" == "0" ]]; then
    cli_log "Successfully loaded variables from file ${cyan}${BASENAME}${normal}"
  else
    cli_log "${red}${BASENAME}: Loading variables failed${normal}"
    echo -e "${red}${MUTATION_RESPONSE}${normal}"
    # if the variables can't be loaded do not load the flow plans
    exit 1
  fi
}

import_plans() {
  local FLOW_PLAN_FILE="$@"
  local BASENAME="$(basename ${FLOW_PLAN_FILE})"
  local JSON=$(read_file "${FLOW_PLAN_FILE}")
  local VARIABLES="{\"plans\": ${JSON} }"

  local QUERY="mutation (\$plans: SystemFlowPlansInput!) { saveSystemFlowPlans(systemFlowPlansInput: \$plans) }"

  local DELTAFI_DGS=$(_graphql)
  local POST_QUERY="{ \"query\": \"$QUERY\",\"variables\":$VARIABLES}"

  truncate -s 0 ${TMPFILE}
  local RESPONSE_CODE=$(curl -s -X POST -o ${TMPFILE} -w "%{http_code}" -H "Content-Type: application/json" -H "$PERMISSION" -H "$CLI_USER" -d "$POST_QUERY" "$DELTAFI_DGS")

  if [[ "$RESPONSE_CODE" != "200" ]]; then
    cli_log "${red}${BASENAME}: Loading system flow plans failed${normal}"
    echo -e "${red}${RESPONSE_CODE} Error: $(cat ${TMPFILE})${normal}"
  else
    local ERRORS=$(cat ${TMPFILE} | jq -r "select(.errors) | .errors[] | .message")
    if [[ "$ERRORS" != "" ]]; then
      cli_log "${red}${BASENAME}: Loading system flow plans failed${normal}"
      echo -e "${red}Error: ${ERRORS}${normal}"
    else
      cli_log "Successfully loaded all system flow plans from file ${cyan}${BASENAME}${normal}"
    fi
  fi
}

load_plan() {
  local FLOW_PLAN_FILE="$@"
  local BASENAME="$(basename ${FLOW_PLAN_FILE})"
  local JSON=$(read_file "${FLOW_PLAN_FILE}")

  if [[ "${JSON}" == *"\"dataSinkPlans\""* || "${JSON}" == *"\"restDataSources\""*  || "${JSON}" == *"\"timedDataSources\""* || "${JSON}" == *"\"transformPlans\""* ]]; then
	  import_plans $FLOW_PLAN_FILE
	  return
  fi

  local VARIABLES="{\"flowPlan\": ${JSON} }"

  if [[ "${JSON}" == *"\"type\": \"REST_DATA_SOURCE\""* ]]; then
    local LOAD_TYPE="rest data source plan"
    local OPERATION_NAME="saveRestDataSourcePlan"
    local QUERY="mutation(\$flowPlan: RestDataSourcePlanInput!) {saveRestDataSourcePlan(dataSourcePlan: \$flowPlan) { name }}"
  elif [[ "${JSON}" == *"\"type\": \"DATA_SINK\""* ]]; then
    local LOAD_TYPE="dataSink plan"
    local OPERATION_NAME="saveDataSinkPlan"
    local QUERY="mutation(\$flowPlan: DataSinkPlanInput!) {saveDataSinkPlan(DataSinkPlan: \$flowPlan) { name }}"
  elif [[ "${JSON}" == *"\"type\": \"TIMED_DATA_SOURCE\""* ]]; then
           local LOAD_TYPE="timed data source plan"
           local OPERATION_NAME="saveTimedDataSourcePlan"
           local QUERY="mutation(\$flowPlan: TimedDataSourcePlanInput!) {saveTimedDataSourcePlan(dataSourcePlan: \$flowPlan) { name }}"
  elif [[ "${JSON}" == *"\"type\": \"TRANSFORM\""* ]]; then
      local LOAD_TYPE="transform plan"
      local OPERATION_NAME="saveTransformFlowPlan"
      local QUERY="mutation(\$flowPlan: TransformFlowPlanInput!) {saveTransformFlowPlan(transformFlowPlan: \$flowPlan) { name }}"
  else
    cli_log "${red}${BASENAME}: Loading plan failed, the plan must be of type DATA_SINK, REST_DATA_SOURCE, TIMED_DATA_SOURCE, or TRANSFORM${normal}"
    echo -e "${red}Loading plan failed, the plan must be of type DATA_SINK, REST_DATA_SOURCE, TIMED_DATA_SOURCE, or TRANSFORM${normal}"
    return 0
  fi

  local POST_QUERY="{ \"query\": \"${QUERY}\",\"variables\":${VARIABLES}}"

  MUTATION_RESPONSE=$(execute_graphql "${POST_QUERY}")
  MUTATION_RETURN_CODE=$?

  if [[ "${MUTATION_RETURN_CODE}" == "0" ]]; then
    local FLOW_PLAN_NAME=$(echo "${MUTATION_RESPONSE}" | jq -r ".data.${OPERATION_NAME}.name")
    cli_log "Successfully loaded ${LOAD_TYPE} ${FLOW_PLAN_NAME} from file ${cyan}${BASENAME}${normal}"
  else
    cli_log "${red}${BASENAME}: Loading ${LOAD_TYPE} failed${normal}"
    echo -e "${red}${MUTATION_RESPONSE}${normal}"
  fi
}

cli_log "Loading flow plan(s) and/or variables to the system-plugin"

if [[ -d ${FLOW_PLAN_OR_DIR} ]]; then
  if [[ -f ${FLOW_PLAN_OR_DIR}/variables.json ]]; then
    load_variables "${FLOW_PLAN_OR_DIR}/variables.json"
  fi

  for flowFile in "${FLOW_PLAN_OR_DIR}"/*.json; do
    if [[ ! "${flowFile}" =~ "variables.json" ]]; then
      load_plan "$flowFile"
    fi
  done
elif [[ -f ${FLOW_PLAN_OR_DIR} ]]; then
  if [[ "${FLOW_PLAN_OR_DIR}" =~ "variables.json" ]]; then
    load_variables "${FLOW_PLAN_OR_DIR}"
  else
    load_plan "${FLOW_PLAN_OR_DIR}"
  fi
fi

cleanup
