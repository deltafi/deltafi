#!/usr/bin/env bash

. "$DELTAFICLI_WORKDIR/common"

set -e

cli_help_command() {
  echo "
Command: install

Usage:
  install [OPTIONS] [helm flags]

Options:
  -h, --help        Show help"
  exit 1
}

TMPDIR=$(mktemp -d)
TMPFILE="$TMPDIR/.deltafi-install.$$"


cleanup() {
  rm -rf "$TMPDIR"
  exit
}

trap cleanup INT

POSITIONAL=()
while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    *)
      POSITIONAL+=("$1")
      shift
      ;;
  esac
done
set -- "${POSITIONAL[@]}"

ARGS=($@)
[[ " ${ARGS[@]} " =~ " --help " ]] && cli_help_command

_tool_exists() {
  command -v "$1" &> /dev/null
}

_base64() {
  local TEMPFILE
  if _tool_exists mktemp; then
    TEMPFILE=$(mktemp)
  else
    TEMPFILE=/tmp/base64.foo
    touch $TEMPFILE
  fi

  local BASE64_ARGS=""
  if base64 -i "$TEMPFILE" -w0 > /dev/null 2>&1; then
    BASE64_ARGS="-w0"
  fi

  rm -f "$TEMPFILE"
  base64 $BASE64_ARGS
}

_k8s_add_namespace() {
  local ns=$1
  if ! ${KUBECTL_BIN} get namespace "$ns" > /dev/null 2>&1 ; then
    cat <<EOF | ${KUBECTL_BIN} apply -f -
apiVersion: v1
kind: Namespace
metadata:
  name: $ns
EOF
    cli_log "Created namespace $ns"
  fi
}

_k8s_add_secret() {
  local name=$1
  shift
  if ! ${KUBECTL_BIN} describe secret "$name" 2>&1 | grep "$1" > /dev/null; then
    ${KUBECTL_BIN} delete secret "$name" 2>&1
    cli_log "Removed defunct secret $name"
  fi

  if ! ${KUBECTL_BIN} get secret "$name" > /dev/null 2>&1; then
    cat <<EOF | ${KUBECTL_BIN} apply -f -
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: $name
  namespace: deltafi
data:
$(while (( "$#" )); do
local pass
pass=$(printf '%s' "$2" | _base64)
echo "  $1: $pass"
shift 2
done)
EOF
    cli_log "Created secret $name"
  fi
}

_random_password() {
  local size=${1:-20}
  printf '%s%s%s' "$(printf '%s' $RANDOM | md5sum | head -c 20)" "$(printf '%s' $RANDOM | md5sum | head -c 20)" "$(printf '%s' $RANDOM | md5sum | head -c 20)" | _base64 | head -c "$size"
}

_stackgres_install() {

  if [[ -z ${DELTAFI_STACKGRES_ENABLED+x} || ${DELTAFI_STACKGRES_ENABLED} != "true" ]]; then
    if helm status --namespace stackgres stackgres-operator 2&> /dev/null; then
      cli_log "Stackgres Operator will be uninstalled"
      helm uninstall --namespace stackgres stackgres-operator --ignore-not-found --wait --timeout 10m
    else
      cli_log "Stackgres Operator will not be installed"
    fi
    return 0
  fi

  cli_log "Initializing Stackgres Operator"
  pushd "${DELTAFICLI_CHART_PATH}/../stackgres-operator" > /dev/null || return 1
  helm upgrade --install --wait \
    --namespace stackgres stackgres-operator . \
    --create-namespace --timeout 10m
  cli_log "Waiting for Stackgres Operator availability..."
  kubectl wait -n stackgres --for=condition=ready pod --selector=app=stackgres-operator --timeout=180s
  popd || return 1
}

_k8s_prerequisites() {
  cli_log "Initializing k8s prerequisites"
  _k8s_add_namespace deltafi
  _k8s_add_secret minio-keys rootUser "deltafi" rootPassword "$(_random_password 40)"
  VALKEY_PASSWORD="$(_random_password 16)"
  # Keeping redis-password around for backwards chart compatibility
  _k8s_add_secret valkey-password redis-password "$VALKEY_PASSWORD" valkey-password "$VALKEY_PASSWORD"
  _k8s_add_secret config-repo-secret config-token "$(_random_password 16)"
  _k8s_add_secret clickhouse-password clickhouse-password "deltafi"
  local postgres_password
  postgres_password="$(_random_password 20)"
  local create_user_sql="CREATE USER deltafi PASSWORD '${postgres_password}';"
  _k8s_add_secret postgres deltafi-password "${postgres_password}" create-user.sql "${create_user_sql}"
}

_k8s_install() {
  _k8s_prerequisites
  _stackgres_install

  if [[ ! -f "${DELTAFICLI_CHART_PATH}/Chart.lock" ]]; then
    cli_log "Executing helm dependencies"
    pushd "$DELTAFICLI_CHART_PATH" > /dev/null || return 1
    helm dependencies build
    popd || return 1
  fi

  ORIG_CORE_POD=$(${KUBECTL_BIN} get pods | grep "^deltafi-core-[a-f0-9]\{10\}-" | head -n 1 | cut -d' ' -f1)

  if [[ -n "${ORIG_CORE_POD}" ]]; then
    _pre_upgrade_tasks
  fi
  cli_log "Starting helmchart upgrade"
  helm upgrade --install --wait --timeout 10m\
    --namespace "${DELTAFICLI_K8S_NAMESPACE}" \
    --create-namespace \
    --values "$DELTAFICLI_CHART_PATH/values.yaml" \
    "${DELTAFICLI_PROJECT_NAME}" "${DELTAFICLI_CHART_PATH}" \
    ${ARGS[@]:1}
  HELM_RETURN_CODE=$?
  [[ "$HELM_RETURN_CODE" != "0" ]] && exit $HELM_RETURN_CODE
  cli_log "Helmchart upgrade complete"

  deltafi event create -q -s "cli" --success --notification "Installed DeltaFi version $( cat "${DELTAFICLI_WORKDIR}/VERSION")"
}

_compose_install() {
  core_finder="docker ps --filter name=deltafi-core$ -q"
  ORIG_CORE_CONTAINER=$(${core_finder})

  if [[ -n "${ORIG_CORE_CONTAINER}" ]]; then
    _pre_upgrade_tasks
  fi

  "${DELTAFICLI_COMPOSE_PATH}"/compose start ${ARGS[@]:1}

  deltafi event create -q -s "cli" --success --notification "Installed DeltaFi version $( cat "${DELTAFICLI_WORKDIR}/VERSION")"
}

_pre_upgrade_tasks() {
  cli_log "Creating a snapshot"
  version=$( cat "${DELTAFICLI_WORKDIR}/VERSION")
  message="Starting upgrade from DeltaFi $(deltafi version) to version ${version}"
  deltafi event create -q -s "cli" --success --notification "$message"
  snapshot_file="pre-upgrade-to-${version}-$(date +%s).json"
  deltafi system-snapshot create "$message" > "${snapshot_file}"
  cli_log "Snapshot complete"
}

cli_log "Installing DeltaFi"

if _is_standalone; then
  _compose_install
else
  _k8s_install
fi

cli_log "DeltaFi install complete"
