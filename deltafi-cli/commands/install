#!/usr/bin/env bash

. "$DELTAFICLI_WORKDIR/common"

cli_help_command() {
  echo "
Command: install

Usage:
  install [OPTIONS] [helm flags]

Options:
  -h, --help        Show help"
  exit 1
}

TMPFILE="/tmp/.deltafi-install.$$"

cleanup() {
  rm -f $TMPFILE
  exit
}

trap cleanup INT

POSITIONAL=()
while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    *)
      POSITIONAL+=("$1")
      shift
      ;;
  esac
done
set -- "${POSITIONAL[@]}"

ARGS=($@)
[[ " ${ARGS[@]} " =~ " --help " ]] && cli_help_command

if [[ ! -f "${DELTAFICLI_CHART_PATH}/Chart.lock" ]]; then
  cli_log "Executing helm dependencies"
  cd $DELTAFICLI_CHART_PATH
  helm dependencies build
  cd - > /dev/null
fi

ORIG_CORE_POD=$(${KUBECTL_BIN} get pods | grep "^deltafi-core-[a-f0-9]\{10\}-" | head -n 1 | cut -d' ' -f1)

cli_log "Installing DeltaFi"

helm upgrade --install --wait \
  --values $DELTAFICLI_CHART_PATH/values.yaml \
  --namespace $DELTAFICLI_K8S_NAMESPACE $DELTAFICLI_PROJECT_NAME $DELTAFICLI_CHART_PATH \
  --create-namespace --timeout 10m ${ARGS[@]:1}

HELM_RETURN_CODE=$?
[[ "$HELM_RETURN_CODE" != "0" ]] && exit $HELM_RETURN_CODE

NEW_CORE_POD=$(${KUBECTL_BIN} get pods | grep "^deltafi-core-[a-f0-9]\{10\}-" | head -n 1 | cut -d' ' -f1)

if ! [ "${ORIG_CORE_POD}" = "${NEW_CORE_POD}" ]; then

  cli_log "Running migrations"
  deltafi event create -q -s "cli" "Running Mongo migrations"
  MONGO_RESULTS=$(deltafi mongo-migrate | sed -e 's|>>|\\n* |g')
  deltafi event create -q -s "cli" --success "Completed Mongo migrations" --content "${MONGO_RESULTS}"

  deltafi event create -q -s "cli" --success --notification "Installed DeltaFi version $( cat "${DELTAFICLI_WORKDIR}/VERSION")"

fi

cli_log "DeltaFi install complete"
