#!/usr/bin/env bash

. "$DELTAFICLI_WORKDIR/common"

cli_help_command() {
  echo "
Command: rest-data-source

Subcommands:
  start
  stop
  validate
  show

Usage:
  data-source [SUBCOMMAND] DATA_SOURCE_NAME"
  exit 1
}

TMPFILE="/tmp/.deltafi-rest-data-source.$$"

cleanup() {
  rm -f $TMPFILE
  exit
}

log_failed() {
  cli_log "${red}${BASENAME}: Failed to ${SUBCOMMAND} restDataSource: ${DATA_SOURCE_NAME}${normal}"
  echo -e "${red}Error: ${1}${normal}"
}

trap cleanup INT

POSITIONAL=()
while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
    -h|--help)
      cli_help_command
      shift # past argument
      ;;
    *)    # unknown option
      POSITIONAL+=("$1") # save it in an array for later
      shift # past argument
      ;;
  esac
done

set -- "${POSITIONAL[@]}" # restore positional parameters
ARGS=("$@")
[[ " ${ARGS[@]} " =~ " --help " ]] && cli_help_command
[[ ${#ARGS[@]} -lt 3 ]] && cli_help_command
SUBCOMMAND=${ARGS[1]}
DATA_SOURCE_NAME=${ARGS[2]}

VARIABLES="{\"name\": \"$DATA_SOURCE_NAME\" }"
case "$SUBCOMMAND" in
  start)
    EXTRACT_PATH=".data.setFlowState"
    QUERY="mutation(\$name: String!) { setFlowState(flowType: REST_DATA_SOURCE, flowName: \$name, flowState: RUNNING) }"
    ;;
  stop)
    EXTRACT_PATH=".data.setFlowState"
    QUERY="mutation(\$name: String!) { setFlowState(flowType: REST_DATA_SOURCE, flowName: \$name, flowState: STOPPED) }"
    ;;
  validate)
    EXTRACT_PATH=".data.validateRestDataSource"
    QUERY="query(\$name: String!) {validateRestDataSource(name: \$name) { flowStatus { state errors { configName errorType message } } } }"
    ;;
  show)
    EXTRACT_PATH=".data.getRestDataSource"
    QUERY="query(\$name: String!) {
             getRestDataSource(name: \$name) {
                 name
                 type
                 description
                 sourcePlugin {
                   groupId
                   artifactId
                   version
                 }
                 flowStatus {
                   state
                   errors {
                     configName
                     errorType
                     message
                   }
                   testMode
                 }
                 maxErrors
                 topic
             }
           }"
    ;;
  *)
    cli_help_command
    ;;
esac

DELTAFI_DGS=$(_graphql)
QUERY=$(echo $QUERY | sed 's/"/\\"/g')
POST_QUERY="{ \"query\": \"$QUERY\",\"variables\":$VARIABLES}"

truncate -s 0 ${TMPFILE}
RESPONSE_CODE=$(curl -s -X POST -o ${TMPFILE} -w "%{http_code}" -H "Content-Type: application/json" -H "$PERMISSION" -H "$CLI_USER" -d "$POST_QUERY" "$DELTAFI_DGS")

if [[ "$RESPONSE_CODE" != "200" ]]; then
  ERRORS=$(cat ${TMPFILE})
  log_failed "$ERRORS"
else
  DGS_ERRORS=$(cat ${TMPFILE} | jq -r "select(.errors) | .errors[] | .message")
  if [[ "$DGS_ERRORS" != "" ]]; then
    log_failed "$DGS_ERRORS"
  elif  [[ "$SUBCOMMAND" == "validate" || "$SUBCOMMAND" == "show" ]]; then
    cat ${TMPFILE} | jq -r "${EXTRACT_PATH}"
  else
    STARTED=$(cat ${TMPFILE} | jq -r "${EXTRACT_PATH}")
    if [[ $STARTED == "true" ]]; then
      cli_log "Successfully executed ${SUBCOMMAND} for data source ${cyan}${DATA_SOURCE_NAME}${normal}"
    else
      cli_log "${yellow}Data source ${DATA_SOURCE_NAME} did not ${SUBCOMMAND}.${normal}"
    fi
  fi
fi

cleanup
