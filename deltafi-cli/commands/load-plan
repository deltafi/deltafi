#!/usr/bin/env bash

. "$DELTAFICLI_WORKDIR/common"

cli_help_command() {
  echo "
Command: load-plan

Usage:
  load-plan PLAN_FILE"
  exit 1
}

TMPFILE="/tmp/.deltafi-load-plan.$$"

cleanup() {
  rm -f $TMPFILE
  exit
}

trap cleanup INT

POSITIONAL=()
while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
    -h|--help)
      cli_help_command
      shift # past argument
      ;;
    *)    # unknown option
      POSITIONAL+=("$1") # save it in an array for later
      shift # past argument
      ;;
  esac
done

set -- "${POSITIONAL[@]}" # restore positional parameters
ARGS=($@)
[[ " ${ARGS[@]} " =~ " --help " ]] && cli_help_command
[[ ${#ARGS[@]} -lt 2 ]] && cli_help_command
FLOW_PLAN_FILE=${ARGS[1]}
SOURCE_PLUGIN_FILE=${ARGS[2]}

if [ ! -f "$FLOW_PLAN_FILE" ]; then
  cli_log "${yellow}${FLOW_PLAN_FILE}: No such file${normal}"
  exit 1
fi

BASENAME="$(basename $FLOW_PLAN_FILE)"
JSON=$(cat "$FLOW_PLAN_FILE")

if [ -f "$SOURCE_PLUGIN_FILE" ] && [ "$( jq 'has("sourcePlugin")' <<< $JSON )" == "false" ]; then
  SOURCE_PLUGIN=$(cat "$SOURCE_PLUGIN_FILE")
  JSON=$(echo "$JSON" | jq --argjson json "$SOURCE_PLUGIN" '. + {sourcePlugin: $json}')
fi

VARIABLES="{\"flowPlan\": $JSON }"

if [[ "$JSON" == *"loadAction"* ]]; then
  OPERATION_NAME="saveIngressFlowPlan"
  QUERY="mutation(\$flowPlan: IngressFlowPlanInput!) {saveIngressFlowPlan(ingressFlowPlan: \$flowPlan) { name }}"
elif [[ "$JSON" == *"egressAction"* ]]; then
  OPERATION_NAME="saveEgressFlowPlan"
  QUERY="mutation(\$flowPlan: EgressFlowPlanInput!) {saveEgressFlowPlan(egressFlowPlan: \$flowPlan) { name }}"
elif [[ "$JSON" == *"enrichActions"* ]]; then
  OPERATION_NAME="saveEnrichFlowPlan"
  QUERY="mutation(\$flowPlan: EnrichFlowPlanInput!) {saveEnrichFlowPlan(enrichFlowPlan: \$flowPlan) { name }}"
else
  cli_log "${red}${BASENAME}: Loading flow plan failed, the plan must contain a load action or egress action${normal}"
  echo -e "${red}Loading flow plan failed, plan must contain a load action, enrich actions or an egress action${normal}"
  exit 1
fi

DELTAFI_DGS=$(deltafi serviceip deltafi-core-domain-service)
POST_QUERY="{ \"query\": \"$QUERY\",\"variables\":$VARIABLES}"

truncate --size 0 ${TMPFILE}
RESPONSE_CODE=$(curl -s -X POST -o ${TMPFILE} -w "%{http_code}" -H "Content-Type: application/json" -d "$POST_QUERY" http://$DELTAFI_DGS/graphql)

if [[ "$RESPONSE_CODE" != "200" ]]; then
  cli_log "${red}${BASENAME}: Loading flow plan failed${normal}"
  echo -e "${red}${RESPONSE_CODE} Error: $(cat ${TMPFILE})${normal}"
else
  ERRORS=$(cat ${TMPFILE} | jq -r "select(.errors) | .errors[] | .message")
  if [[ "$ERRORS" != "" ]]; then
    cli_log "${red}${BASENAME}: Loading flow plan failed${normal}"
    echo -e "${red}Error: ${ERRORS}${normal}"
  else
    LOADED=$(cat ${TMPFILE} | jq -r ".data.${OPERATION_NAME}.name")
    cli_log "Successfully loaded flow plan ${LOADED} from file ${cyan}${BASENAME}${normal}"
  fi
fi

cleanup
