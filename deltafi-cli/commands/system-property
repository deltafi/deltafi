#!/usr/bin/env bash

. "$DELTAFICLI_WORKDIR/common"

cli_help_command() {
  echo "
Command: system-property

Subcommands:
  set [PROPERTY_NAME] [NEW_VALUE]
  list

Usage:
  system-property [SUBCOMMAND]

Options:
  -h, --help          Show help"
  exit 1
}

TMPFILE="/tmp/.deltafi-system-property.$$"

cleanup() {
  rm -f $TMPFILE
  exit
}

log_failed() {
  cli_log "${red}${BASENAME}: Failed to execute ${SUBCOMMAND}${normal}"
  echo -e "${red}Error: ${1}${normal}"
}

trap cleanup INT

POSITIONAL=()
while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
    -h|--help)
      cli_help_command
      shift # past argument
      ;;
    *)    # unknown option
      POSITIONAL+=("$1") # save it in an array for later
      shift # past argument
      ;;
  esac
done

set -- "${POSITIONAL[@]}" # restore positional parameters
ARGS=($@)
[[ " ${ARGS[@]} " =~ " --help " ]] && cli_help_command

SUBCOMMAND=${ARGS[1]}

ALL_PROPERTY_FIELDS="id
                     displayName
                     description
                     properties {
                       key
                       description
                       value
                       defaultValue
                       refreshable
                     }"

VARIABLES="{}"
case "$SUBCOMMAND" in
  set)
    PROPERTY_KEY=${ARGS[2]}
    PROPERTY_VALUE=${ARGS[3]}

    if [[ -z "$PROPERTY_KEY" ]]; then
      cli_log "${red}The property key must be provided${normal}"
      exit
    fi

    EXTRACT_PATH=".data.updateProperties"
    QUERY="mutation { updateProperties(updates: { key: \"$PROPERTY_KEY\" value: \"$PROPERTY_VALUE\" })}"
    ;;
  list)
    EXTRACT_PATH=".data.getPropertySets"
    QUERY="query { getPropertySets { $ALL_PROPERTY_FIELDS } } "
    ;;
  *)
    cli_help_command
    ;;
esac

DELTAFI_DGS=$(_graphql)
QUERY=$(echo $QUERY | sed 's/"/\\"/g')
POST_QUERY="{ \"query\": \"$QUERY\",\"variables\":$VARIABLES}"

truncate -s 0 ${TMPFILE}
RESPONSE_CODE=$(curl -s -X POST -o ${TMPFILE} -w "%{http_code}" -H "Content-Type: application/json" -H "$PERMISSION" -H "$CLI_USER" -d "$POST_QUERY" "$DELTAFI_DGS")

if [[ "$RESPONSE_CODE" != "200" ]]; then
  ERRORS=$(cat ${TMPFILE})
  log_failed "$ERRORS"
else
  DGS_ERRORS=$(cat ${TMPFILE} | jq -r "select(.errors) | .errors[] | .message")
  if [[ "$DGS_ERRORS" != "" ]]; then
    log_failed "$DGS_ERRORS"
  elif [[ "$SUBCOMMAND" == "set" ]]; then
    UPDATED=$(cat ${TMPFILE} | jq -r "${EXTRACT_PATH}")

    if [[ "$UPDATED" == "true" ]]; then
      cli_log "${green}Successfully set ${bold}$PROPERTY_KEY${normal}${green} to ${bold}\"$PROPERTY_VALUE\"${normal}"
    else
      cli_log "${yellow}Property $PROPERTY_KEY was not updated${normal}"
    fi
  else
    cat ${TMPFILE} | jq -r "${EXTRACT_PATH}"
  fi
fi

cleanup
