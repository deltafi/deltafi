plugins {
    id 'groovy-gradle-plugin'
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '1.0.0'
    id "com.github.hierynomus.license" version "${hierynomusLicenseVersion}"
}

description = 'DeltaFi gradle plugin'

license {
    header(rootProject.file('HEADER'))
    excludes(excludeFromLicense)
    exclude("DeltafiActionConventionPlugin.java")
    exclude("DeltafiJavaConventionPlugin.java")
    exclude("DeltafiTestSummaryPlugin.java")
    exclude("DeltafiVersionReckoningPlugin.java")
}

dependencies {
    implementation project(':deltafi-common')

    implementation "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    implementation "com.palantir.gradle.docker:gradle-docker:${palantirDockerVersion}"
}

group 'org.deltafi.gradle-plugin'

pluginBundle {
    website = 'https://deltafi.org'
    vcsUrl = 'https://github.com/deltafi-org/deltafi'
    tags = ['deltafi', 'DeltaFi']
    description = 'Gradle plugins used with DeltaFi'
}

gradlePlugin {
    plugins {
        pluginPlugin {
            id = 'org.deltafi.plugin'
            implementationClass = 'org.deltafi.gradle.plugin.PluginPlugin'
            displayName = 'Deltafi Plugin Tasks'
            description = 'Tasks used to build DeltaFi plugins'
        }
    }
}

allprojects {
    group 'org.deltafi.gradle-plugin'

    afterEvaluate {
        if (project.plugins.hasPlugin("groovy-gradle-plugin")) {
            pluginDescriptors {
                afterEvaluate {
                    declarations.get().each { PluginDeclaration declaration ->
                        switch (declaration.getId()) {
                            case "deltafi.action-convention":
                                declaration.setId("org.deltafi.plugin.action-convention")
                                declaration.setDisplayName("DeltaFi Action Plugin Convention")
                                declaration.setDescription("Convention used to setup a set of DeltaFi actions")
                                break
                            case "deltafi.java-convention":
                                declaration.setId("org.deltafi.plugin.java-convention")
                                declaration.setDisplayName("DeltaFi Java Plugin Convention")
                                declaration.setDescription("Convention used or Java projects")
                                break
                            case "deltafi.test-summary":
                                declaration.setId("org.deltafi.plugin.test-summary")
                                declaration.setDisplayName("DeltaFi Test Summary Convention")
                                declaration.setDescription("Pretty print test results")
                                break
                            case "deltafi.version-reckoning":
                                declaration.setId("org.deltafi.plugin.version-reckoning")
                                declaration.setDisplayName("DeltaFi Version Convention")
                                declaration.setDescription("Determine the version based on the git tag")
                                break
                        }
                    }
                }
            }
        }
    }
}