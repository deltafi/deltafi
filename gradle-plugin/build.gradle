plugins {
    id 'groovy-gradle-plugin'
    id 'com.gradle.plugin-publish' version '1.2.1'
    id "com.github.hierynomus.license" version "${hierynomusLicenseVersion}"
}

description = 'DeltaFi gradle plugin'

license {
    header(rootProject.file('HEADER'))
    excludes(excludeFromLicense)
    exclude("OrgDeltafiPluginConventionPlugin.java")
    strictCheck true
    mapping('java', 'SLASHSTAR_STYLE')
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

dependencies {
    implementation project(':deltafi-common')

    implementation "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    implementation "com.palantir.gradle.docker:gradle-docker:${palantirDockerVersion}"
}

group 'org.deltafi.gradle-plugin'

gradlePlugin {

    website = 'https://deltafi.org'
    vcsUrl = 'https://github.com/deltafi-org/deltafi'

    plugins {
        pluginPlugin {
            id = 'org.deltafi.plugin'
            implementationClass = 'org.deltafi.gradle.plugin.PluginPlugin'
            displayName = 'Deltafi Plugin Tasks'
            description = 'Tasks used to build DeltaFi plugins'
            tags.set(['deltafi', 'DeltaFi', 'normalization'])
        }
    }
}

pluginDescriptors {
    afterEvaluate {
        declarations.get().each { PluginDeclaration declaration ->
            if (declaration.getId() == "org.deltafi.plugin-convention") {
                declaration.setDisplayName("DeltaFi Plugin Convention")
                declaration.setDescription("Convention used for a DeltaFi plugin")
                declaration.getTags().set(['deltafi', 'DeltaFi', 'normalization'])
            }
        }
    }
}
