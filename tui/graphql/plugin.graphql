#
#    DeltaFi - Data transformation and enrichment platform
#
#    Copyright 2021-2025 DeltaFi Contributors <deltafi@deltafi.org>
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#

# type Mutation {
#     "Install the plugin from the given image name"
#     installPlugin(image: String!, imagePullSecret: String): Result!

#     "Uninstall the plugin with the given coordinates"
#     uninstallPlugin(pluginCoordinates: PluginCoordinatesInput!): Result!

#     "Uninstall the plugin with the given coordinates, even if there are blockers"
#     forcePluginUninstall(pluginCoordinates: PluginCoordinatesInput!): Result!
# }

# type Query {
#   plugins: [Plugin!]!
# }

mutation InstallPlugin($Image: String!, $ImagePullSecret: String!) {
  installPlugin(image: $Image, imagePullSecret: $ImagePullSecret) {
		success
		info
		errors
  }
}

mutation UninstallPlugin($groupId: String!, $artifactId: String!, $version: String!) {
  uninstallPlugin(pluginCoordinates: { groupId: $groupId, artifactId: $artifactId, version:$version}) {
    success
    info
    errors
  }
}

query GetPlugins {
  plugins {
    displayName
    imageName
    imageTag
    imagePullSecret
    pluginCoordinates {
      groupId
      artifactId
      version
    }
    actionKitVersion
  }
}

query GetPluginDetails {
  plugins {
    displayName
    description
    imageName
    imageTag
    imagePullSecret
    pluginCoordinates {
      groupId
      artifactId
      version
    }
    actionKitVersion
    actions {
      name
      type
      supportsJoin
      schema
      actionOptions {
        description
      }
      docsMarkdown
    }
    dependencies {
      groupId
      artifactId
      version
    }
    variables {
      name
      description
      dataType
      required
      defaultValue
      value
      masked
    }
  }
}
