#
#    DeltaFi - Data transformation and enrichment platform
#
#    Copyright 2021-2025 DeltaFi Contributors <deltafi@deltafi.org>
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#

# Get all integration tests
query GetIntegrationTests {
  getIntegrationTests {
    name
    description
    plugins {
      groupId
      artifactId
      version
    }
    dataSources
    transformationFlows
    dataSinks
    inputs {
      flow
      contentType
      ingressFileName
      base64Encoded
      data
      metadata {
        key
        value
      }
    }
    timeout
    expectedDeltaFiles {
      stage
      childCount
      parentCount
      expectedFlows {
        flow
        type
        state
        actions
        metadata {
          key
          value
        }
        metaExactMatch
      }
      children {
        stage
        childCount
        parentCount
        expectedFlows {
          flow
          type
          state
          actions
          metadata {
            key
            value
          }
          metaExactMatch
        }
        children {
          stage
          childCount
          parentCount
          expectedFlows {
            flow
            type
            state
            actions
            metadata {
              key
              value
            }
            metaExactMatch
          }
          children {
            stage
            childCount
            parentCount
            expectedFlows {
              flow
              type
              state
              actions
              metadata {
                key
                value
              }
              metaExactMatch
            }
            children {
              stage
              childCount
              parentCount
              expectedFlows {
                flow
                type
                state
                actions
                metadata {
                  key
                  value
                }
                metaExactMatch
              }
              expectedContent {
                flow
                type
                action
                data {
                  name
                  mediaType
                  value
                  contains
                  ignoreWhitespace
                  macroSubstitutions
                }
              }
              annotations {
                key
                value
              }
            }
            expectedContent {
              flow
              type
              action
              data {
                name
                mediaType
                value
                contains
                ignoreWhitespace
                macroSubstitutions
              }
            }
            annotations {
              key
              value
            }
          }
          expectedContent {
            flow
            type
            action
            data {
              name
              mediaType
              value
              contains
              ignoreWhitespace
              macroSubstitutions
            }
          }
          annotations {
            key
            value
          }
        }
        expectedContent {
          flow
          type
          action
          data {
            name
            mediaType
            value
            contains
            ignoreWhitespace
            macroSubstitutions
          }
        }
        annotations {
          key
          value
        }
      }
      expectedContent {
        flow
        type
        action
        data {
          name
          mediaType
          value
          contains
          ignoreWhitespace
          macroSubstitutions
        }
      }
      annotations {
        key
        value
      }
    }
  }
}

# Get a specific integration test
query GetIntegrationTest($name: String!) {
  getIntegrationTest(name: $name) {
    name
    description
    plugins {
      groupId
      artifactId
      version
    }
    dataSources
    transformationFlows
    dataSinks
    inputs {
      flow
      contentType
      ingressFileName
      base64Encoded
      data
      metadata {
        key
        value
      }
    }
    timeout
    expectedDeltaFiles {
      stage
      childCount
      parentCount
      expectedFlows {
        flow
        type
        state
        actions
        metadata {
          key
          value
        }
        metaExactMatch
      }
      children {
        stage
        childCount
        parentCount
        expectedFlows {
          flow
          type
          state
          actions
          metadata {
            key
            value
          }
          metaExactMatch
        }
        children {
          stage
          childCount
          parentCount
          expectedFlows {
            flow
            type
            state
            actions
            metadata {
              key
              value
            }
            metaExactMatch
          }
          children {
            stage
            childCount
            parentCount
            expectedFlows {
              flow
              type
              state
              actions
              metadata {
                key
                value
              }
              metaExactMatch
            }
            children {
              stage
              childCount
              parentCount
              expectedFlows {
                flow
                type
                state
                actions
                metadata {
                  key
                  value
                }
                metaExactMatch
              }
              expectedContent {
                flow
                type
                action
                data {
                  name
                  mediaType
                  value
                  contains
                  ignoreWhitespace
                  macroSubstitutions
                }
              }
              annotations {
                key
                value
              }
            }
            expectedContent {
              flow
              type
              action
              data {
                name
                mediaType
                value
                contains
                ignoreWhitespace
                macroSubstitutions
              }
            }
            annotations {
              key
              value
            }
          }
          expectedContent {
            flow
            type
            action
            data {
              name
              mediaType
              value
              contains
              ignoreWhitespace
              macroSubstitutions
            }
          }
          annotations {
            key
            value
          }
        }
        expectedContent {
          flow
          type
          action
          data {
            name
            mediaType
            value
            contains
            ignoreWhitespace
            macroSubstitutions
          }
        }
        annotations {
          key
          value
        }
      }
      expectedContent {
        flow
        type
        action
        data {
          name
          mediaType
          value
          contains
          ignoreWhitespace
          macroSubstitutions
        }
      }
      annotations {
        key
        value
      }
    }
  }
}

# Load an integration test from YAML configuration
mutation LoadIntegrationTest($configYaml: String!) {
  loadIntegrationTest(configYaml: $configYaml) {
    success
    info
    errors
  }
}

# Save an integration test
mutation SaveIntegrationTest($testCase: IntegrationTestInput!) {
  saveIntegrationTest(testCase: $testCase) {
    success
    info
    errors
  }
}

# Start an integration test
mutation StartIntegrationTest($name: String!) {
  startIntegrationTest(name: $name) {
    id
    testName
    status
    start
    stop
    errors
  }
}

# Remove an integration test
mutation RemoveIntegrationTest($name: String!) {
  removeIntegrationTest(name: $name)
}

# Remove a test result
mutation RemoveTestResult($id: String!) {
  removeTestResult(id: $id)
}

# Get a specific test result
query GetTestResult($id: String!) {
  getTestResult(id: $id) {
    id
    testName
    status
    start
    stop
    errors
  }
}

# Get all test results
query GetTestResults {
  getTestResults {
    id
    testName
    status
    start
    stop
    errors
  }
} 