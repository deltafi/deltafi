plugins {
  id 'org.ajoberstar.reckon' version '0.13.0'
  id 'test-summary' // Local plugin
}

reckon {
    scopeFromProp()
    snapshotFromProp()
}

allprojects { project ->
    task version {
        doLast {
            println "Version is reckoned to " + "$version"
        }
    }
}

subprojects {
    group 'org.deltafi'

    apply plugin: 'java'

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << '-parameters'
    }

    compileTestJava {
        options.encoding = 'UTF-8'
    }

    apply plugin: 'jacoco'

    jacocoTestReport {
        dependsOn test
        reports {
            xml.enabled true
            csv.enabled true
            html.destination layout.buildDirectory.dir('jacocoHtmlReport').get().asFile
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: ['**/generated/**', '**/*Application.class'])
            }))
        }
    }

    jacoco {
        reportsDirectory.set(layout.buildDirectory.dir('jacocoReport'))
    }

    apply plugin: 'maven-publish'

    publishing {
        publications {
            java(MavenPublication) {
                artifact jar
            }
        }
        repositories {
            if (project.hasProperty('gitLabTokenType') && project.hasProperty('gitLabToken')) {
                maven {
                    url projectMavenRepo
                    credentials(HttpHeaderCredentials) {
                        // the following variables reside in ~/.gradle/gradle.properties
                        name = gitLabTokenType
                        value = gitLabToken
                    }
                    authentication {
                        header(HttpHeaderAuthentication)
                    }
                }
            }
        }
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    dependencies {
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    }
}
