import java.util.regex.Matcher

plugins {
  id 'org.deltafi.test-summary' version '1.0'
  id 'org.deltafi.version-reckoning' version '1.0'
  id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

allprojects { project ->
    group 'org.deltafi'

    ext {
        isReleaseVersion = !version.endsWith("SNAPSHOT")
        isSignable = project.hasProperty("signing.keyId") && project.hasProperty("signing.password") && project.hasProperty("signing.secretKeyRingFile")
    }
}

subprojects {
    apply plugin: 'java'

    ext {
        excludeFromLicense = ["**/*.xml", "**/generated/**/*.java", "**/*.MockMaker", "**/*.jks", "**/*.p12",
                              "**/*.yaml", "**/*.tar", "**/*.gz", "**/*.Z", "**/*.zip", "**/*.xz", "**/*.ar",
                              "**/*.txt", "**/*.xml", "**/*.html", "**/*.json", "**/test/resources/**",
                              "**/plugin-templates/**", "**/node_modules/**"]
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << '-parameters'
    }

    compileTestJava {
        options.encoding = 'UTF-8'
    }

    test {
        useJUnitPlatform()
    }

    apply plugin: 'jacoco'

    jacocoTestReport {
        dependsOn test
        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: ['**/generated/**', '**/*Application.class'])
            }))
        }
    }

    apply plugin: 'signing'

    afterEvaluate {
        // Only apply to subprojects with maven-publish applied
        pluginManager.withPlugin('maven-publish') {
            task javadocJar(type: Jar) {
                archiveClassifier = 'javadoc'
                dependsOn javadoc
                from javadoc
            }

            task sourcesJar(type: Jar) {
                archiveClassifier = 'sources'
                from sourceSets.main.allSource
            }

            artifacts {
                archives javadocJar, sourcesJar
            }

            publishing {
                repositories {
                    if (project.hasProperty('gitLabTokenType') && project.hasProperty('gitLabToken')) {
                        maven {
                            name "Gitlab"
                            url projectMavenRepo
                            credentials(HttpHeaderCredentials) {
                                // the following variables reside in ~/.gradle/gradle.properties
                                name = gitLabTokenType
                                value = gitLabToken
                            }
                            authentication {
                                header(HttpHeaderAuthentication)
                            }
                        }
                    }
                }

                if (project.name != 'gradle-plugin') {
                    publications {
                        Public(MavenPublication) {
                            from components.java
                            artifact sourcesJar
                            artifact javadocJar
                            pom {
                                name = project.name
                                description = project.description
                                url = 'https://www.deltafi.org'
                                inceptionYear = '2021'

                                licenses {
                                    license {
                                        name = 'The Apache Software License, Version 2.0'
                                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                                        distribution = 'repo'
                                    }
                                }
                                developers {
                                    developer {
                                         id = 'deltafi'
                                         name = 'DeltaFi Contributors'
                                         email = 'info@deltafi.org'
                                    }
                                }
                                scm {
                                    url = 'https://github.com/deltafi-org/deltafi'
                                    connection = 'scm:https://github.com/deltafi-org/deltafi.git'
                                    developerConnection = 'scm:git://github.com/deltafi-org/deltafi'
                                }
                            }
                        }
                    }
                }
            }

            signing {
                required { isSignable }
            }

            if (project.name != 'gradle-plugin') {
                if (isSignable) {
                    signing {
                        sign publishing.publications
                    }
                }
            }
        }
    }

    dependencies {
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    }

    task allDeps(type: DependencyReportTask) {}
}

if (isReleaseVersion && project.hasProperty('sonatypeNexusUsername') && project.hasProperty('sonatypeNexusPassword')) {
    nexusPublishing {
        repositories {
            sonatype {  //only for users registered in Sonatype after 24 Feb 2021
                nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
                snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
                password = sonatypeNexusPassword
                username = sonatypeNexusUsername
            }
        }
    }
}

import java.util.concurrent.TimeUnit
// Log timings per task.
class TimingsListener implements TaskExecutionListener, BuildListener {
    private long startTime
    private timings = []

    @Override
    void beforeExecute(Task task) {
        startTime = System.nanoTime()
    }

    @Override
    void afterExecute(Task task, TaskState taskState) {
        def ms = TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS);
        timings.add([ms, task.path])
        task.project.logger.warn "${task.path} took ${ms}ms"
    }

    @Override
    void buildFinished(BuildResult result) {
        println "Task timings:"
        for (timing in timings) {
            if (timing[0] >= 50) {
                printf "%7sms  %s\n", timing
            }
        }
    }

    @Override
    void projectsEvaluated(Gradle gradle) {}

    @Override
    void projectsLoaded(Gradle gradle) {}

    @Override
    void settingsEvaluated(Settings settings) {}
}

gradle.addListener new TimingsListener()
