import java.util.concurrent.TimeUnit

buildscript {
    dependencies {
        classpath "org.yaml:snakeyaml:2.3"
    }
}

plugins {
    id 'org.deltafi.test-summary' version '1.0'
    id 'org.deltafi.git-version' version '2.0.1'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id "de.undercouch.download" version "5.6.0"
}

// Distribution configuration

ext {
    // Base distribution directory
    distroOutputDir = layout.buildDirectory.dir('dist')

    // Common files/directories included in all distributions
    commonDistroContents = [
        [source: 'VERSION', destination: '.'],
        [source: 'CHANGELOG.md', destination: '.'],
        [source: 'README.md', destination: '.'],
        [source: 'LICENSE', destination: '.'],
        [source: 'deltafi-cli/', destination: 'deltafi-cli'],
        [source: 'orchestration/', destination: 'orchestration'],
        [source: 'deltafi-docs/public/docs/', destination: 'docs']
    ]

    // Paths to exclude from all distributions
    excludePaths = [
        '**/data/**',
        '**/logs/**',
        '**/compose/settings/env/common.env',
        '**/compose/settings/env/startup.env',
    ]

    // Architecture-specific files/directories
    archDistroContents = [
        'linux-amd64': [
            [source: 'tui/dist/linux/amd64', destination: '.', topLevel: true],
            [source: layout.buildDirectory.file('jq-linux-amd64').orNull,
                destination: 'bin',
                mode: 0755,
                rename: 'jq'
            ],
            [source: layout.buildDirectory.file('yq_linux_amd64').orNull,
                destination: 'bin',
                mode: 0755,
                rename: 'yq'
            ],
            [source: layout.buildDirectory.file('lazydocker/linux/amd64/lazydocker').orNull,
                destination: 'bin',
                mode: 0755,
            ],
            [source: layout.buildDirectory.file('lazydocker/linux/amd64/LICENSE').orNull,
                destination: 'bin',
                rename: 'LICENSE.lazydocker',
            ]
        ],
        'linux-arm64': [
            [source: 'tui/dist/linux/arm64', destination: '.', topLevel: true],
            [source: layout.buildDirectory.file('jq-linux-arm64').orNull,
                destination: 'bin',
                mode: 0755,
                rename: 'jq'
            ],
            [source: layout.buildDirectory.file('yq_linux_arm64').orNull,
                destination: 'bin',
                mode: 0755,
                rename: 'yq'
            ],
            [source: layout.buildDirectory.file('lazydocker/linux/arm64/lazydocker').orNull,
                destination: 'bin',
                mode: 0755,
            ],
            [source: layout.buildDirectory.file('lazydocker/linux/arm64/LICENSE').orNull,
                destination: 'bin',
                rename: 'LICENSE.lazydocker',
            ]
        ],
        'darwin-amd64': [
            [source: 'tui/dist/darwin/amd64', destination: '.', topLevel: true],
            [source: layout.buildDirectory.file('jq-macos-amd64').orNull,
                destination: 'bin',
                mode: 0755,
                rename: 'jq'
            ],
            [source: layout.buildDirectory.file('yq_darwin_amd64').orNull,
                destination: 'bin',
                mode: 0755,
                rename: 'yq'
            ],
            [source: layout.buildDirectory.file('lazydocker/darwin/amd64/lazydocker').orNull,
                destination: 'bin',
                mode: 0755,
            ],
            [source: layout.buildDirectory.file('lazydocker/darwin/amd64/LICENSE').orNull,
                destination: 'bin',
                rename: 'LICENSE.lazydocker',
            ]
        ],
        'darwin-arm64': [
            [source: 'tui/dist/darwin/arm64', destination: '.', topLevel: true],
            [source: layout.buildDirectory.file('jq-macos-arm64').orNull,
                destination: 'bin',
                mode: 0755,
                rename: 'jq'
            ],
            [source: layout.buildDirectory.file('yq_darwin_arm64').orNull,
                destination: 'bin',
                mode: 0755,
                rename: 'yq'
            ],
            [source: layout.buildDirectory.file('lazydocker/darwin/arm64/lazydocker').orNull,
                destination: 'bin',
                mode: 0755,
            ],
            [source: layout.buildDirectory.file('lazydocker/darwin/arm64/LICENSE').orNull,
                destination: 'bin',
                rename: 'LICENSE.lazydocker',
            ]
        ]
    ]
}

// Pretty print maps
import groovy.json.JsonBuilder
java.util.LinkedHashMap.metaClass.pprint = { -> new JsonBuilder(delegate).toPrettyString() }

import org.yaml.snakeyaml.Yaml
def loadDeltafiConfig() {
    def retval = [:];

    def homeDir = System.getenv('HOME');
    File testFile = new File(homeDir + '/.deltafi/config.yaml');

    if ( testFile.isFile() ) {
        retval = new Yaml().load(testFile.newInputStream());
        println ('Loaded configuration from ' + testFile.getPath());
    } else {
        println ('WARNING: ' + testFile.getPath() + ' not found');
    }
    retval = retval ?: [:]

    if (! retval.isEmpty()) println(retval.pprint());

    return retval;
}
ext.deltafiConfig = loadDeltafiConfig();

// Create base distribution task
task dist {
    group = 'distribution'
    description = 'Creates distribution archives for all supported architectures'
    dependsOn 'distBinaries'
}

task distBinaries(type: Download) {
    src([
        'https://github.com/jesseduffield/lazydocker/releases/download/v0.24.1/lazydocker_0.24.1_Darwin_arm64.tar.gz',
        'https://github.com/jesseduffield/lazydocker/releases/download/v0.24.1/lazydocker_0.24.1_Darwin_x86_64.tar.gz',
        'https://github.com/jesseduffield/lazydocker/releases/download/v0.24.1/lazydocker_0.24.1_Linux_arm64.tar.gz',
        'https://github.com/jesseduffield/lazydocker/releases/download/v0.24.1/lazydocker_0.24.1_Linux_x86_64.tar.gz',
        'https://github.com/mikefarah/yq/releases/download/v4.45.1/yq_linux_arm64',
        'https://github.com/mikefarah/yq/releases/download/v4.45.1/yq_linux_amd64',
        'https://github.com/mikefarah/yq/releases/download/v4.45.1/yq_darwin_arm64',
        'https://github.com/mikefarah/yq/releases/download/v4.45.1/yq_darwin_amd64',
        'https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-macos-amd64',
        'https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-macos-arm64',
        'https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-linux-amd64',
        'https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-linux-arm64'
    ])
    dest layout.buildDirectory

    finalizedBy 'decompressDistBinaries'
}

def pathToCamelCase(String path) {
    return path.split(File.separator).collect { String part ->
        part[0].toUpperCase() + part.substring(1)
    }.join('')
}

task decompressDistBinaries {
    group = 'distribution'
    description = 'Decompress the distribution binaries'
}

[ [ source: 'lazydocker_0.24.1_Darwin_arm64.tar.gz', destination: 'lazydocker/darwin/arm64' ],
  [ source: 'lazydocker_0.24.1_Darwin_x86_64.tar.gz', destination: 'lazydocker/darwin/amd64' ],
  [ source: 'lazydocker_0.24.1_Linux_arm64.tar.gz', destination: 'lazydocker/linux/arm64' ],
  [ source: 'lazydocker_0.24.1_Linux_x86_64.tar.gz', destination: 'lazydocker/linux/amd64' ] ].each { archive ->
    task "extract${pathToCamelCase(archive.destination)}" (type: Copy) {
        from tarTree(layout.buildDirectory.file(archive.source))
        into layout.buildDirectory.file(archive.destination)
        dependsOn 'distBinaries'
    }
    decompressDistBinaries.dependsOn "extract${pathToCamelCase(archive.destination)}"
}


task tui {
    group = 'build'
    description = 'Build the TUI for the current architecture'
}

task checkDockerInstallation {
    doLast {
        description = 'Checks if docker is installed'
        group = 'verification'
        def command = "command -v docker"
        def result = exec {
            ignoreExitValue = true
            executable "bash"
            args "-l", "-c", command
            standardOutput = new ByteArrayOutputStream()
            errorOutput = new ByteArrayOutputStream()
        }

        if (result.exitValue != 0) {
            println "✗ docker is not installed or not in PATH"
            throw new GradleException("docker is required but not installed")
        }
    }
}

task checkKindInstallation {
    doLast {
        description = 'Checks if KinD is installed'
        group = 'verification'
        def command = "command -v kind"
        def result = exec {
            ignoreExitValue = true
            executable "bash"
            args "-l", "-c", command
            standardOutput = new ByteArrayOutputStream()
            errorOutput = new ByteArrayOutputStream()
        }

        if (result.exitValue != 0) {
            println "✗ kind is not installed or not in PATH"
            throw new GradleException("kind is required but not installed")
        }
    }
    dependsOn checkDockerInstallation
}

task installPrerequisites {
    group = 'install'
    description = 'Execute any prerequisites prior to install tasks for the current orchestration mode'
    dependsOn tui
    dependsOn checkDockerInstallation
}

task install {
    group = 'install'
    description = 'Install DeltaFi images built from this repo into the current development environment'
    dependsOn installPrerequisites
}

if (!deltafiConfig.isEmpty()) {
    var orchestrationMode = deltafiConfig['orchestrationMode'] ? deltafiConfig['orchestrationMode'].toLowerCase() : null
    if (orchestrationMode == 'kind') {
        task startKindCluster (type: Exec) {
            group = 'install'
            description = 'Configure KinD cluster to receive docker images'
            commandLine "deltafi", "kind", "up"
            dependsOn tui
            dependsOn checkKindInstallation
        }
        installPrerequisites.dependsOn startKindCluster

        task syncKindPods (type: Exec) {
            group = 'install'
            description = 'Synchronize KinD orchestration so latest container images are running'
            commandLine "deltafi", "up", "--force"
            dependsOn tui
            dependsOn checkKindInstallation
        }
    }
    if (orchestrationMode == 'compose') {
        task syncComposeServices (type: Exec) {
            group = 'install'
            description = 'Synchronize Compose orchestration so latest container images are running'
            commandLine "deltafi", "up", "--force"
            dependsOn tui
        }
    }
}

// Create tasks for each architecture
archDistroContents.each { arch, archFiles ->
    def archTask = tasks.create(name: "dist-${arch}", type: Tar) {
        dependsOn 'distBinaries'
        dependsOn 'decompressDistBinaries'
        group = 'distribution'
        description = "Creates distribution archive for ${arch}"

        // Configure archive properties
        archiveBaseName = "deltafi"
        archiveVersion = project.version
        archiveClassifier = arch
        compression = Compression.GZIP

        // Set output directory
        destinationDirectory = distroOutputDir

        // Include common files/directories
        commonDistroContents.each { item ->
            from(item.source) {
                into project.version + "/" + item.destination
                // Apply exclusions using Gradle's pattern syntax
                exclude excludePaths
                exclude {
                    details -> excludePaths.any { pattern ->
                        details.relativePath.pathString.startsWith(pattern.replace('**', ''))
                    }
                }
            }
        }

        // Include architecture-specific files/directories
        archFiles.each { item ->
            from(item.source) {
                into project.version + '/' + item.destination
                if (item.mode != null) {
                    fileMode = item.mode
                }
                if (item.rename != null) {
                    rename { _ -> item.rename }
                }
            }
            if (item.topLevel) {
                from(item.source) {
                    into '.'
                    if (item.mode != null) {
                        fileMode = item.mode
                    }
                    if (item.rename != null) {
                        rename { _ -> item.rename }
                    }
                }
            }
        }

        // Ensure reproducible builds
        preserveFileTimestamps = false
        reproducibleFileOrder = true

        // Ensure output directory exists
        doFirst {
            destinationDirectory.get().asFile.mkdirs()
        }
    }

    // Make the main distro task depend on this architecture-specific task
    dist.finalizedBy archTask
}

// Task to clean the distribution directory
task cleanDist(type: Delete) {
    group = 'distribution'
    description = 'Cleans the distribution directory'
    delete distroOutputDir
}

allprojects { project ->
    group 'org.deltafi'

    ext {
        isReleaseVersion = !version.endsWith("SNAPSHOT")
        isSignable = project.hasProperty("signing.keyId") && project.hasProperty("signing.password") && project.hasProperty("signing.secretKeyRingFile")
    }

    task resolveDeps {
        doLast {
            configurations.each { conf ->
                if (conf.isCanBeResolved()) {
                    conf.resolve()
                }
            }
        }
    }
}

subprojects {
    ext.deltafiConfig = rootProject.deltafiConfig
    task install {
        group = 'install'
        dependsOn rootProject.installPrerequisites
        dependsOn rootProject.tui
    }

    apply plugin: 'signing'

    afterEvaluate {
        var orchestrationMode = deltafiConfig['orchestrationMode'] ? deltafiConfig['orchestrationMode'].toLowerCase() : null
        if (orchestrationMode == 'kind') {
            tasks.matching { it.name == 'pushToKind' }.all {
                dependsOn rootProject.installPrerequisites
            }
        }

        // Only apply to subprojects with maven-publish applied
        pluginManager.withPlugin('maven-publish') {
            task javadocJar(type: Jar) {
                archiveClassifier = 'javadoc'
                dependsOn javadoc
                from javadoc
            }

            task sourcesJar(type: Jar) {
                archiveClassifier = 'sources'
                from sourceSets.main.allSource
            }

            artifacts {
                archives javadocJar, sourcesJar
            }

            publishing {
                repositories {
                    if (project.hasProperty('gitLabTokenType') && project.hasProperty('gitLabToken')) {
                        maven {
                            name "Gitlab"
                            url projectMavenRepo
                            credentials(HttpHeaderCredentials) {
                                // the following variables reside in ~/.gradle/gradle.properties
                                name = gitLabTokenType
                                value = gitLabToken
                            }
                            authentication {
                                header(HttpHeaderAuthentication)
                            }
                        }
                    }
                }

                if (project.name != 'gradle-plugin') {
                    publications {
                        Public(MavenPublication) {
                            from components.java
                            artifact sourcesJar
                            artifact javadocJar
                            pom {
                                name = project.name
                                description = project.description
                                url = 'https://www.deltafi.org'
                                inceptionYear = '2021'

                                licenses {
                                    license {
                                        name = 'The Apache Software License, Version 2.0'
                                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                                        distribution = 'repo'
                                    }
                                }
                                developers {
                                    developer {
                                         id = 'deltafi'
                                         name = 'DeltaFi Contributors'
                                         email = 'info@deltafi.org'
                                    }
                                }
                                scm {
                                    url = 'https://github.com/deltafi-org/deltafi'
                                    connection = 'scm:https://github.com/deltafi-org/deltafi.git'
                                    developerConnection = 'scm:git://github.com/deltafi-org/deltafi'
                                }
                            }
                        }
                    }
                }
            }

            install.dependsOn 'publishToMavenLocal'

            signing {
                required { isSignable }
            }

            if (project.name != 'gradle-plugin') {
                if (isSignable) {
                    signing {
                        sign publishing.publications
                    }
                }
            }
        }
    }
}

if (isReleaseVersion && project.hasProperty('sonatypeNexusUsername') && project.hasProperty('sonatypeNexusPassword')) {
    nexusPublishing {
        repositories {
            sonatype {  //only for users registered in Sonatype after 24 Feb 2021
                nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
                snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
                password = sonatypeNexusPassword
                username = sonatypeNexusUsername
            }
        }
    }
}

// Log timings per task.
class TimingsListener implements TaskExecutionListener, BuildListener {
    private long startTime
    private timings = []

    @Override
    void beforeExecute(Task task) {
        startTime = System.nanoTime()
    }

    @Override
    void afterExecute(Task task, TaskState taskState) {
        def ms = TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS)
        timings.add([ms, task.path])
        task.project.logger.warn "${task.path} took ${ms}ms"
    }

    @Override
    void buildFinished(BuildResult result) {
        println "Task timings:"
        for (timing in timings) {
            if (timing[0] >= 50) {
                printf "%7sms  %s\n", timing
            }
        }
    }

    @Override
    void projectsEvaluated(Gradle gradle) {}

    @Override
    void projectsLoaded(Gradle gradle) {}

    @Override
    void settingsEvaluated(Settings settings) {}
}

// Cache all dependencies to maven local directory
task cacheToMavenLocal(type: Copy) {
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    from new File(gradle.gradleUserHomeDir, 'caches/modules-2/files-2.1')
        into repositories.mavenLocal().url
        eachFile {
            List<String> parts = it.path.split('/')
                it.path = parts[0].replace('.','/') + '/' + parts[1] + '/' + parts[2] + '/' + parts[4]
        }
    includeEmptyDirs false
    subprojects.each { dependsOn("${it.name}:resolveDeps") }
    dependsOn tasks.resolveDeps
}


gradle.addListener new TimingsListener()

