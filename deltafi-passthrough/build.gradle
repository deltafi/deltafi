plugins {
    id 'java'
    id 'io.quarkus'
    id 'idea'
    id 'jacoco'
    id "com.palantir.docker" version "0.22.1"
}

java {
    sourceCompatibility = javaSourceCompatibility
    targetCompatibility = javaTargetCompatibility
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")

    // Use DGS BOM to automatically define versions of other packages below
    implementation(platform('com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:4.1.0')) {
        because 'DGS BOM to automatically define versions of other packages below'
    }

    implementation project(':deltafi-common')
    implementation project(path: ':deltafi-action-kit', configuration: 'jars')
    implementation project(path: ':deltafi-dgs', configuration: 'jars')

    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.quarkus:quarkus-config-yaml'
    implementation 'io.quarkus:quarkus-jackson'
    implementation 'io.quarkus:quarkus-rest-client'
    implementation 'io.quarkus:quarkus-resteasy'
    implementation 'io.quarkus:quarkus-kubernetes-config'
    implementation 'io.quarkiverse.loggingjson:quarkus-logging-json:0.3.1'
    implementation 'io.quarkiverse.minio:quarkus-minio'
    implementation 'com.netflix.graphql.dgs:graphql-dgs-client'
    implementation 'io.quarkus:quarkus-kotlin'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.projectlombok:lombok:1.18.+'
    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.quarkus:quarkus-junit5-mockito'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
    testImplementation 'com.fasterxml.jackson.core:jackson-databind'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        csv.enabled true
        html.destination layout.buildDirectory.dir('jacocoHtmlReport').get().asFile
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['org/deltafi/dgs/generated/**', '**/*Application.class'])
        }))
    }

}

jacoco {
    reportsDirectory.set(layout.buildDirectory.dir('jacocoReport'))
}

docker {
    dependsOn compileJava
    dependsOn build
    name "${project.name}:${project.version}"
    copySpec.from(".").into(".")
}
