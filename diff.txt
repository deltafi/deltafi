diff --git a/CHANGELOG/unreleased/dependency-refresh.md b/CHANGELOG/unreleased/dependency-refresh.md
new file mode 100644
index 000000000..52c90a411
--- /dev/null
+++ b/CHANGELOG/unreleased/dependency-refresh.md
@@ -0,0 +1,42 @@
+# Changes on branch `dependency-refresh`
+Document any changes on this branch here.
+### Added
+- 
+
+### Changed
+- 
+
+### Fixed
+- 
+
+### Removed
+- 
+
+### Deprecated
+- 
+
+### Security
+- 
+
+### Tech-Debt/Refactor
+- 
+
+### Upgrade and Migration
+- nifi-flowfile-packager 1.27.0
+- httpclient5 5.4
+- bcpkix-jdk18on 1.78.1
+- json-schema-validator 1.5.2
+- commons-text 1.12.0
+- dropwizard 4.2.28
+- kubernetes-client 6.13.4
+- docker-java 3.4.0
+- postgresql 42.7.4
+- hypersistence-utils-hibernate-63 3.8.3
+- flyway 10.20.0
+- nifi 1.27.0
+- dgsCodegen 6.3.0
+- dgs 9.1.3
+- jackson 2.17.2
+- json schema generator 4.36.0
+- minio 8.5.12
+- spring boot 3.3.4
diff --git a/deltafi-common/build.gradle b/deltafi-common/build.gradle
index 20a81a637..90634a506 100644
--- a/deltafi-common/build.gradle
+++ b/deltafi-common/build.gradle
@@ -35,8 +35,8 @@ dependencies {
     api 'org.springframework.boot:spring-boot-starter-logging'
     api 'org.springframework.boot:spring-boot-autoconfigure'
     api "org.springframework.retry:spring-retry"
-    api 'org.apache.nifi:nifi-flowfile-packager:1.25.0'
-    api 'org.apache.httpcomponents.client5:httpclient5:5.3.1'
+    api 'org.apache.nifi:nifi-flowfile-packager:1.27.0'
+    api 'org.apache.httpcomponents.client5:httpclient5:5.4'
 
     implementation 'io.jackey:jackey:5.2.0'
     implementation 'org.apache.commons:commons-text'
@@ -66,5 +66,5 @@ dependencies {
     testImplementation "org.mockito:mockito-junit-jupiter:${mockitoJupiterVersion}"
     testImplementation 'org.springframework.boot:spring-boot-starter-test'
 
-    testImplementation 'org.wiremock:wiremock-standalone:3.5.2'
+    testImplementation 'org.wiremock:wiremock-standalone:3.9.1'
 }
diff --git a/deltafi-common/src/test/java/org/deltafi/common/rules/RuleEvaluatorTest.java b/deltafi-common/src/test/java/org/deltafi/common/rules/RuleEvaluatorTest.java
index 4ad7a9ddf..f6bb75fd8 100644
--- a/deltafi-common/src/test/java/org/deltafi/common/rules/RuleEvaluatorTest.java
+++ b/deltafi-common/src/test/java/org/deltafi/common/rules/RuleEvaluatorTest.java
@@ -23,6 +23,7 @@ import org.deltafi.common.content.ContentStorageService;
 import org.deltafi.common.test.storage.s3.InMemoryObjectStorageService;
 import org.deltafi.common.types.*;
 import org.junit.jupiter.api.Test;
+import org.springframework.expression.spel.SpelEvaluationException;
 
 import java.nio.charset.StandardCharsets;
 import java.util.List;
@@ -59,12 +60,11 @@ class RuleEvaluatorTest {
         RuleEvaluator.ImmutableDeltaFileFlow deltaFile = new RuleEvaluator.ImmutableDeltaFileFlow(originalMetadata, originalContent);
         // cannot rewrite value for key 'a'
         Assertions.assertThatThrownBy(() -> ruleEvaluator.doEvaluateCondition("metadata['a'] = 'c'", deltaFile))
-                .isInstanceOf(UnsupportedOperationException.class);
+                .isInstanceOf(SpelEvaluationException.class);
         // cannot add a new metadata key/value
         Assertions.assertThatThrownBy(() -> ruleEvaluator.doEvaluateCondition("metadata['b'] = 'c'", deltaFile))
-                .isInstanceOf(UnsupportedOperationException.class);
+                .isInstanceOf(SpelEvaluationException.class);
 
-        //
         ruleEvaluator.doEvaluateCondition("content[0].setName('c')", deltaFile);
         Assertions.assertThat(originalContent.getFirst().getName()).isEqualTo("test.txt");
         Assertions.assertThat(deltaFile.content().getFirst().getName()).isEqualTo("c");
diff --git a/deltafi-common/src/test/java/org/deltafi/common/ssl/SslContextProviderTest.java b/deltafi-common/src/test/java/org/deltafi/common/ssl/SslContextProviderTest.java
index 8fc44abe9..a89411350 100644
--- a/deltafi-common/src/test/java/org/deltafi/common/ssl/SslContextProviderTest.java
+++ b/deltafi-common/src/test/java/org/deltafi/common/ssl/SslContextProviderTest.java
@@ -20,7 +20,6 @@ package org.deltafi.common.ssl;
 import org.junit.jupiter.api.Test;
 import org.springframework.boot.autoconfigure.ssl.PemSslBundleProperties;
 
-import java.io.UncheckedIOException;
 import java.security.KeyStore;
 import java.security.KeyStoreException;
 import java.security.NoSuchAlgorithmException;
@@ -81,8 +80,8 @@ class SslContextProviderTest {
         properties.getKeystore().setCertificate("classpath:cert.pem");
         properties.getTruststore().setCertificate("classpath:ca_chain.pem");
         assertThatThrownBy(() -> new SslContextProvider(properties))
-                .isInstanceOf(UncheckedIOException.class)
-                .hasMessage("Error reading certificate or key from file 'missingkey.pem'");
+                .isInstanceOf(IllegalStateException.class)
+                .hasMessage("Unable to create key store: Error reading certificate or key from file 'missingkey.pem'");
     }
 
     @Test
@@ -95,7 +94,7 @@ class SslContextProviderTest {
         properties.getTruststore().setCertificate("classpath:ca_chain.pem");
         assertThatThrownBy(() -> new SslContextProvider(properties))
                 .isInstanceOf(IllegalStateException.class)
-                .hasMessage("Error loading private key file: Error decrypting private key");
+                .hasMessage("Unable to create key store: Error loading private key file: Error decrypting private key");
     }
 
     @Test
@@ -107,6 +106,6 @@ class SslContextProviderTest {
         properties.getTruststore().setCertificate("classpath:ca_chain.pem");
         assertThatThrownBy(() -> new SslContextProvider(properties))
                 .isInstanceOf(IllegalStateException.class)
-                .hasMessage("Error loading private key file: Password is required for an encrypted private key");
+                .hasMessage("Unable to create key store: Error loading private key file: Password is required for an encrypted private key");
     }
 }
\ No newline at end of file
diff --git a/deltafi-core-actions/build.gradle b/deltafi-core-actions/build.gradle
index c49c61963..4577ac8f6 100644
--- a/deltafi-core-actions/build.gradle
+++ b/deltafi-core-actions/build.gradle
@@ -15,7 +15,7 @@ dependencies {
     implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:${jacksonVersion}"
     implementation 'com.github.mwiede:jsch:0.2.17'
     implementation 'com.jayway.jsonpath:json-path:2.9.0'
-    implementation 'org.bouncycastle:bcpkix-jdk18on:1.77'
+    implementation 'org.bouncycastle:bcpkix-jdk18on:1.78.1'
 
     testImplementation project(':deltafi-common-test')
     testImplementation project(':deltafi-action-kit-test')
diff --git a/deltafi-core/build.gradle b/deltafi-core/build.gradle
index 9b62e2363..6e1e292ee 100644
--- a/deltafi-core/build.gradle
+++ b/deltafi-core/build.gradle
@@ -16,28 +16,28 @@ dependencies {
 	implementation 'org.springframework.boot:spring-boot-starter-web'
 	implementation 'org.springframework.boot:spring-boot-starter-security'
 
-	implementation 'com.networknt:json-schema-validator:1.1.0'
+	implementation 'com.networknt:json-schema-validator:1.5.2'
 
 	implementation 'com.netflix.graphql.dgs:graphql-dgs-extended-scalars'
-	implementation 'com.netflix.graphql.dgs:graphql-dgs-spring-boot-starter'
-	implementation 'org.apache.commons:commons-text:1.11.0'
-	implementation 'io.dropwizard.metrics:metrics-core:4.2.25'
-	implementation 'io.dropwizard.metrics:metrics-graphite:4.2.25'
-	implementation 'io.fabric8:kubernetes-client:6.10.0'
-	implementation 'com.github.docker-java:docker-java-core:3.3.4'
-	implementation 'com.github.docker-java:docker-java-transport-httpclient5:3.3.4'
+	implementation 'com.netflix.graphql.dgs:graphql-dgs-spring-graphql-starter'
+	implementation 'org.apache.commons:commons-text:1.12.0'
+	implementation 'io.dropwizard.metrics:metrics-core:4.2.28'
+	implementation 'io.dropwizard.metrics:metrics-graphite:4.2.28'
+	implementation 'io.fabric8:kubernetes-client:6.13.4'
+	implementation 'com.github.docker-java:docker-java-core:3.4.0'
+	implementation 'com.github.docker-java:docker-java-transport-httpclient5:3.4.0'
 	implementation 'org.lz4:lz4-java:1.8.0'
-	implementation 'org.postgresql:postgresql:42.7.3'
-	implementation 'io.hypersistence:hypersistence-utils-hibernate-63:3.8.2'
+	implementation 'org.postgresql:postgresql:42.7.4'
+	implementation 'io.hypersistence:hypersistence-utils-hibernate-63:3.8.3'
 	implementation 'com.fasterxml.uuid:java-uuid-generator:5.1.0'
-	implementation 'org.flywaydb:flyway-core:10.18.0'
-	implementation 'org.flywaydb:flyway-database-postgresql:10.18.0'
+	implementation 'org.flywaydb:flyway-core:10.20.0'
+	implementation 'org.flywaydb:flyway-database-postgresql:10.20.0'
 
 	testImplementation project(':deltafi-common-test')
 	testImplementation 'org.springframework.boot:spring-boot-starter-test'
 	testImplementation 'org.springframework.security:spring-security-test'
-	testImplementation 'org.apache.nifi:nifi-flowfile-packager:1.24.0'
-	testImplementation 'org.awaitility:awaitility:4.2.0'
+	testImplementation 'org.apache.nifi:nifi-flowfile-packager:1.27.0'
+	testImplementation 'org.awaitility:awaitility:4.2.2'
 
 	testImplementation "org.testcontainers:junit-jupiter:${testContainersVersion}"
 	testImplementation "org.testcontainers:postgresql:${testContainersVersion}"
@@ -47,6 +47,7 @@ dependencies {
 generateJava {
 	packageName = 'org.deltafi.core.generated'
 	generateClient = true
+	skipEntityQueries = true
 	typeMapping = [
 			"Duration": "java.time.Duration",
 			"JSON": "java.util.Map<String, Object>",
diff --git a/deltafi-core/src/test/java/org/deltafi/core/DeltaFiCoreApplicationTests.java b/deltafi-core/src/test/java/org/deltafi/core/DeltaFiCoreApplicationTests.java
index aabc23166..fd4762852 100644
--- a/deltafi-core/src/test/java/org/deltafi/core/DeltaFiCoreApplicationTests.java
+++ b/deltafi-core/src/test/java/org/deltafi/core/DeltaFiCoreApplicationTests.java
@@ -1908,7 +1908,7 @@ class DeltaFiCoreApplicationTests {
 				new ResumeGraphQLQuery.Builder()
 						.dids(List.of(input.getDid(), second.getDid(), badDid))
 						.build(),
-				new ResumeProjectionRoot().did().success().error(),
+				new ResumeProjectionRoot<>().did().success().error(),
 				SCALARS
 		);
 
@@ -2919,7 +2919,7 @@ class DeltaFiCoreApplicationTests {
 						.offset(null)
 						.orderBy(null)
 						.build(),
-				new DeltaFilesProjectionRoot().count().totalCount().offset().deltaFiles().did()
+				new DeltaFilesProjectionRoot<>().count().totalCount().offset().deltaFiles().did()
 						.flows().id().publishTopics().name().type().parent().state().getParent().created().modified()
 						.actions().name().type().parent().state().parent().created().modified().attempt());
 
diff --git a/deltafi-core/src/test/java/org/deltafi/core/datafetchers/DeletePolicyDatafetcherTestHelper.java b/deltafi-core/src/test/java/org/deltafi/core/datafetchers/DeletePolicyDatafetcherTestHelper.java
index 551022fe7..a80584aa1 100644
--- a/deltafi-core/src/test/java/org/deltafi/core/datafetchers/DeletePolicyDatafetcherTestHelper.java
+++ b/deltafi-core/src/test/java/org/deltafi/core/datafetchers/DeletePolicyDatafetcherTestHelper.java
@@ -61,7 +61,7 @@ public class DeletePolicyDatafetcherTestHelper {
                     .deleteMetadata(false)
                     .build());
 
-    private static final GetDeletePoliciesProjectionRoot projection = new GetDeletePoliciesProjectionRoot()
+    private static final GetDeletePoliciesProjectionRoot<?, ?> projection = new GetDeletePoliciesProjectionRoot<>()
             .id()
             .name()
             .enabled()
@@ -92,20 +92,14 @@ public class DeletePolicyDatafetcherTestHelper {
     }
 
     public static void loadOneDeletePolicy(DgsQueryExecutor dgsQueryExecutor) {
-        executeLoad(dgsQueryExecutor, true, Collections.emptyList());
-    }
-
-    public static Result addOnePolicy(DgsQueryExecutor dgsQueryExecutor) {
-        return executeLoad(dgsQueryExecutor, false, Collections.emptyList());
+        executeLoad(dgsQueryExecutor, Collections.emptyList());
     }
 
     public static Result replaceAllDeletePolicies(DgsQueryExecutor dgsQueryExecutor) {
-        return executeLoad(dgsQueryExecutor, true, TIMED_POLICY_LIST);
+        return executeLoad(dgsQueryExecutor, TIMED_POLICY_LIST);
     }
 
-    private static Result executeLoad(DgsQueryExecutor dgsQueryExecutor,
-                                      boolean replace,
-                                      List<TimedDeletePolicy> timedPolicies) {
+    private static Result executeLoad(DgsQueryExecutor dgsQueryExecutor, List<TimedDeletePolicy> timedPolicies) {
 
         DeletePolicies input = DeletePolicies.builder()
                 .diskSpacePolicies(DISK_POLICY_LIST)
@@ -113,11 +107,11 @@ public class DeletePolicyDatafetcherTestHelper {
                 .build();
 
         LoadDeletePoliciesGraphQLQuery query = LoadDeletePoliciesGraphQLQuery.newRequest()
-                .replaceAll(replace)
+                .replaceAll(true)
                 .policies(input)
                 .build();
 
-        LoadDeletePoliciesProjectionRoot projection = new LoadDeletePoliciesProjectionRoot()
+        LoadDeletePoliciesProjectionRoot<?, ?> projection = new LoadDeletePoliciesProjectionRoot<>()
                 .success()
                 .info()
                 .errors();
@@ -136,7 +130,7 @@ public class DeletePolicyDatafetcherTestHelper {
         EnablePolicyGraphQLQuery query = EnablePolicyGraphQLQuery.newRequest()
                 .id(id).enabled(enabled).build();
 
-        GraphQLQueryRequest graphQLQueryRequest = new GraphQLQueryRequest(query, new UpdateResumePolicyProjectionRoot(), SCALARS);
+        GraphQLQueryRequest graphQLQueryRequest = new GraphQLQueryRequest(query, new UpdateResumePolicyProjectionRoot<>(), SCALARS);
 
         return dgsQueryExecutor.executeAndExtractJsonPathAsObject(
                 graphQLQueryRequest.serialize(),
@@ -146,7 +140,7 @@ public class DeletePolicyDatafetcherTestHelper {
     public static boolean removeDeletePolicy(DgsQueryExecutor dgsQueryExecutor, UUID id) {
         RemoveDeletePolicyGraphQLQuery query = RemoveDeletePolicyGraphQLQuery.newRequest().id(id).build();
 
-        GraphQLQueryRequest graphQLQueryRequest = new GraphQLQueryRequest(query, new UpdateResumePolicyProjectionRoot(), SCALARS);
+        GraphQLQueryRequest graphQLQueryRequest = new GraphQLQueryRequest(query, new UpdateResumePolicyProjectionRoot<>(), SCALARS);
 
         return dgsQueryExecutor.executeAndExtractJsonPathAsObject(
                 graphQLQueryRequest.serialize(),
@@ -159,7 +153,7 @@ public class DeletePolicyDatafetcherTestHelper {
                 .policyUpdate(input)
                 .build();
 
-        UpdateDiskSpaceDeletePolicyProjectionRoot projection = new UpdateDiskSpaceDeletePolicyProjectionRoot()
+        UpdateDiskSpaceDeletePolicyProjectionRoot<?, ?> projection = new UpdateDiskSpaceDeletePolicyProjectionRoot<>()
                 .success()
                 .errors();
 
@@ -177,7 +171,7 @@ public class DeletePolicyDatafetcherTestHelper {
                 .policyUpdate(input)
                 .build();
 
-        UpdateTimedDeletePolicyProjectionRoot projection = new UpdateTimedDeletePolicyProjectionRoot()
+        UpdateTimedDeletePolicyProjectionRoot<?, ?> projection = new UpdateTimedDeletePolicyProjectionRoot<>()
                 .success()
                 .errors();
 
diff --git a/deltafi-core/src/test/java/org/deltafi/core/datafetchers/DeltaFilesDatafetcherTestHelper.java b/deltafi-core/src/test/java/org/deltafi/core/datafetchers/DeltaFilesDatafetcherTestHelper.java
index b7c9a5280..9c4dfbb14 100644
--- a/deltafi-core/src/test/java/org/deltafi/core/datafetchers/DeltaFilesDatafetcherTestHelper.java
+++ b/deltafi-core/src/test/java/org/deltafi/core/datafetchers/DeltaFilesDatafetcherTestHelper.java
@@ -42,7 +42,7 @@ public class DeltaFilesDatafetcherTestHelper {
     static final List<Content> CONTENT = Collections.singletonList(new Content(FILENAME, MEDIA_TYPE, new Segment(OBJECT_UUID, 0, SIZE, DID)));
     public static final IngressEventItem INGRESS_INPUT = new IngressEventItem(DID, FILENAME, REST_DATA_SOURCE_NAME, METADATA, CONTENT);
 
-    public static final DeltaFilesProjectionRoot DELTA_FILES_PROJECTION_ROOT = new DeltaFilesProjectionRoot()
+    public static final DeltaFilesProjectionRoot<?, ?> DELTA_FILES_PROJECTION_ROOT = new DeltaFilesProjectionRoot<>()
             .deltaFiles()
                 .did()
                 .name()
@@ -123,7 +123,7 @@ public class DeltaFilesDatafetcherTestHelper {
             .count()
             .totalCount();
 
-    public static final DeltaFileProjectionRoot DELTA_FILE_PROJECTION_ROOT = new DeltaFileProjectionRoot()
+    public static final DeltaFileProjectionRoot<?, ?> DELTA_FILE_PROJECTION_ROOT = new DeltaFileProjectionRoot<>()
             .did()
             .name()
             .parentDids()
@@ -196,8 +196,8 @@ public class DeltaFilesDatafetcherTestHelper {
             .egressed()
             .filtered();
 
-    public static final ErrorSummaryByFlowProjectionRoot ERRORS_BY_FLOW_PROJECTION_ROOT =
-            new ErrorSummaryByFlowProjectionRoot()
+    public static final ErrorSummaryByFlowProjectionRoot<?, ?> ERRORS_BY_FLOW_PROJECTION_ROOT =
+            new ErrorSummaryByFlowProjectionRoot<>()
                     .count()
                     .offset()
                     .totalCount()
@@ -207,8 +207,8 @@ public class DeltaFilesDatafetcherTestHelper {
                     .dids()
                     .parent();
 
-    public static final ErrorSummaryByMessageProjectionRoot ERRORS_BY_MESSAGE_PROJECTION_ROOT =
-            new ErrorSummaryByMessageProjectionRoot()
+    public static final ErrorSummaryByMessageProjectionRoot<?, ?> ERRORS_BY_MESSAGE_PROJECTION_ROOT =
+            new ErrorSummaryByMessageProjectionRoot<>()
                     .count()
                     .offset()
                     .totalCount()
@@ -219,8 +219,8 @@ public class DeltaFilesDatafetcherTestHelper {
                     .dids()
                     .parent();
 
-    public static final FilteredSummaryByFlowProjectionRoot FILTERED_BY_FlOW_PROJECTION_ROOT =
-            new FilteredSummaryByFlowProjectionRoot()
+    public static final FilteredSummaryByFlowProjectionRoot<?, ?> FILTERED_BY_FlOW_PROJECTION_ROOT =
+            new FilteredSummaryByFlowProjectionRoot<>()
                     .count()
                     .offset()
                     .totalCount()
@@ -230,8 +230,8 @@ public class DeltaFilesDatafetcherTestHelper {
                     .dids()
                     .parent();
 
-    public static final FilteredSummaryByMessageProjectionRoot FILTERED_BY_MESSAGE_PROJECTION_ROOT =
-            new FilteredSummaryByMessageProjectionRoot()
+    public static final FilteredSummaryByMessageProjectionRoot<?, ?> FILTERED_BY_MESSAGE_PROJECTION_ROOT =
+            new FilteredSummaryByMessageProjectionRoot<>()
                     .count()
                     .offset()
                     .totalCount()
diff --git a/deltafi-core/src/test/java/org/deltafi/core/datafetchers/FlowPlanDatafetcherTestHelper.java b/deltafi-core/src/test/java/org/deltafi/core/datafetchers/FlowPlanDatafetcherTestHelper.java
index b9c9b485c..60bcce656 100644
--- a/deltafi-core/src/test/java/org/deltafi/core/datafetchers/FlowPlanDatafetcherTestHelper.java
+++ b/deltafi-core/src/test/java/org/deltafi/core/datafetchers/FlowPlanDatafetcherTestHelper.java
@@ -41,48 +41,48 @@ public class FlowPlanDatafetcherTestHelper {
     public static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();
 
     public static TransformFlowPlan getTransformFlowPlan(DgsQueryExecutor dgsQueryExecutor) {
-        return executeQuery(dgsQueryExecutor, GetTransformFlowPlanGraphQLQuery.newRequest().planName("transformPlan").build(), new GetTransformFlowPlanProjectionRoot().name().type().description().type(), TransformFlowPlan.class);
+        return executeQuery(dgsQueryExecutor, GetTransformFlowPlanGraphQLQuery.newRequest().planName("transformPlan").build(), new GetTransformFlowPlanProjectionRoot<>().name().type().description().type(), TransformFlowPlan.class);
     }
 
     public static DataSinkPlan getDataSinkPlan(DgsQueryExecutor dgsQueryExecutor) {
-        return executeQuery(dgsQueryExecutor, GetDataSinkPlanGraphQLQuery.newRequest().planName("dataSinkPlan").build(), new GetDataSinkPlanProjectionRoot().name().type().description().egressAction().name().actionType().type(), DataSinkPlan.class);
+        return executeQuery(dgsQueryExecutor, GetDataSinkPlanGraphQLQuery.newRequest().planName("dataSinkPlan").build(), new GetDataSinkPlanProjectionRoot<>().name().type().description().egressAction().name().actionType().type(), DataSinkPlan.class);
     }
 
     public static TimedDataSourcePlan getTimedIngressFlowPlan(DgsQueryExecutor dgsQueryExecutor) {
-        return executeQuery(dgsQueryExecutor, GetTimedDataSourcePlanGraphQLQuery.newRequest().planName("timedIngressPlan").build(), new GetTimedDataSourcePlanProjectionRoot().name().type().description().topic()
+        return executeQuery(dgsQueryExecutor, GetTimedDataSourcePlanGraphQLQuery.newRequest().planName("timedIngressPlan").build(), new GetTimedDataSourcePlanProjectionRoot<>().name().type().description().topic()
                 .name().timedIngressAction().name().actionType().type().parent().cronSchedule(), TimedDataSourcePlan.class);
     }
 
     public static TransformFlow validateTransformFlow(DgsQueryExecutor dgsQueryExecutor) {
-        return executeQuery(dgsQueryExecutor, ValidateTransformFlowGraphQLQuery.newRequest().flowName("sampleTransform").build(), new ValidateTransformFlowProjectionRoot().name(), TransformFlow.class);
+        return executeQuery(dgsQueryExecutor, ValidateTransformFlowGraphQLQuery.newRequest().flowName("sampleTransform").build(), new ValidateTransformFlowProjectionRoot<>().name(), TransformFlow.class);
     }
 
     public static TimedDataSource validateTimedIngressFlow(DgsQueryExecutor dgsQueryExecutor) {
-        return executeQuery(dgsQueryExecutor, ValidateTimedDataSourceGraphQLQuery.newRequest().name(TIMED_DATA_SOURCE_NAME).build(), new ValidateTimedDataSourceProjectionRoot().name().type(), TimedDataSource.class);
+        return executeQuery(dgsQueryExecutor, ValidateTimedDataSourceGraphQLQuery.newRequest().name(TIMED_DATA_SOURCE_NAME).build(), new ValidateTimedDataSourceProjectionRoot<>().name().type(), TimedDataSource.class);
     }
 
     public static FlowNames getFlowNames(DgsQueryExecutor dgsQueryExecutor) {
         return executeQuery(dgsQueryExecutor, GetFlowNamesGraphQLQuery.newRequest().build(),
-                new GetFlowNamesProjectionRoot().transform().dataSink().timedDataSource().restDataSource(), FlowNames.class);
+                new GetFlowNamesProjectionRoot<>().transform().dataSink().timedDataSource().restDataSource(), FlowNames.class);
     }
 
     public static DataSink validateDataSink(DgsQueryExecutor dgsQueryExecutor) {
-        return executeQuery(dgsQueryExecutor, ValidateDataSinkGraphQLQuery.newRequest().flowName("sampleEgress").build(), new ValidateDataSinkProjectionRoot().name(), DataSink.class);
+        return executeQuery(dgsQueryExecutor, ValidateDataSinkGraphQLQuery.newRequest().flowName("sampleEgress").build(), new ValidateDataSinkProjectionRoot<>().name(), DataSink.class);
     }
 
     public static List<Flows> getFlows(DgsQueryExecutor dgsQueryExecutor) {
         TypeRef<List<Flows>> typeRef = new TypeRef<>() {};
-        return executeQuery(dgsQueryExecutor, GetFlowsGraphQLQuery.newRequest().build(), new GetFlowsProjectionRoot().sourcePlugin().artifactId().parent().transformFlows().name().parent().dataSinks().name().parent().restDataSources().name().type().parent().timedDataSources().name().type().root(), typeRef);
+        return executeQuery(dgsQueryExecutor, GetFlowsGraphQLQuery.newRequest().build(), new GetFlowsProjectionRoot<>().sourcePlugin().artifactId().parent().transformFlows().name().parent().dataSinks().name().parent().restDataSources().name().type().parent().timedDataSources().name().type().root(), typeRef);
     }
 
     public static SystemFlows getRunningFlows(DgsQueryExecutor dgsQueryExecutor) {
         return executeQuery(dgsQueryExecutor, GetRunningFlowsGraphQLQuery.newRequest().build(),
-                new GetRunningFlowsProjectionRoot().transform().name().parent().dataSink().name().root(), SystemFlows.class);
+                new GetRunningFlowsProjectionRoot<>().transform().name().parent().dataSink().name().root(), SystemFlows.class);
     }
 
     public static SystemFlowPlans getAllFlowPlans(DgsQueryExecutor dgsQueryExecutor) {
         return executeQuery(dgsQueryExecutor, GetAllFlowPlansGraphQLQuery.newRequest().build(),
-                new GetAllFlowPlansProjectionRoot()
+                new GetAllFlowPlansProjectionRoot<>()
                         .timedDataSources().type().name().description().topic().timedIngressAction().name().type().actionType().parent().cronSchedule().parent()
                         .restDataSources().type().name().description().topic().parent()
                         .transformPlans().name().description().parent()
@@ -92,13 +92,13 @@ public class FlowPlanDatafetcherTestHelper {
 
     public static SystemFlows getAllFlows(DgsQueryExecutor dgsQueryExecutor) {
         return executeQuery(dgsQueryExecutor, GetAllFlowsGraphQLQuery.newRequest().build(),
-                new GetAllFlowsProjectionRoot().timedDataSource().type().name().parent().restDataSource().type().name().parent().transform().name().parent().dataSink().name().root(), SystemFlows.class);
+                new GetAllFlowsProjectionRoot<>().timedDataSource().type().name().parent().restDataSource().type().name().parent().transform().name().parent().dataSink().name().root(), SystemFlows.class);
     }
 
     @SuppressWarnings("unchecked")
     public static List<Topic> getAllTopics(DgsQueryExecutor dgsQueryExecutor) {
         return executeQuery(dgsQueryExecutor, GetAllTopicsGraphQLQuery.newRequest().build(),
-                new GetAllTopicsProjectionRoot().name().publishers().name().type().parent().state().parent().condition().parent().subscribers().name().type().parent().state().parent().condition().root(),
+                new GetAllTopicsProjectionRoot<>().name().publishers().name().type().parent().state().parent().condition().parent().subscribers().name().type().parent().state().parent().condition().root(),
                 List.class).stream()
                 .map(map -> OBJECT_MAPPER.convertValue(map, Topic.class))
                 .toList();
@@ -107,7 +107,7 @@ public class FlowPlanDatafetcherTestHelper {
     @SuppressWarnings("unchecked")
     public static List<Topic> getTopics(DgsQueryExecutor dgsQueryExecutor, List<String> topics) {
         return executeQuery(dgsQueryExecutor, GetTopicsGraphQLQuery.newRequest().names(topics).build(),
-                new GetTopicsProjectionRoot().name().publishers().name().type().parent().state().parent().condition().parent().subscribers().name().type().parent().state().parent().condition().root(),
+                new GetTopicsProjectionRoot<>().name().publishers().name().type().parent().state().parent().condition().parent().subscribers().name().type().parent().state().parent().condition().root(),
                 List.class).stream()
                 .map(map -> OBJECT_MAPPER.convertValue(map, Topic.class))
                 .toList();
@@ -115,23 +115,23 @@ public class FlowPlanDatafetcherTestHelper {
 
     public static Topic getTopic(DgsQueryExecutor dgsQueryExecutor, String topic) {
         return executeQuery(dgsQueryExecutor, GetTopicGraphQLQuery.newRequest().name(topic).build(),
-                new GetTopicProjectionRoot().name().publishers().name().type().parent().state().parent().condition().parent().subscribers().name().type().parent().state().parent().condition().root(),
+                new GetTopicProjectionRoot<>().name().publishers().name().type().parent().state().parent().condition().parent().subscribers().name().type().parent().state().parent().condition().root(),
                 Topic.class);
     }
 
     public static TransformFlow getTransformFlow(DgsQueryExecutor dgsQueryExecutor) {
         return executeQuery(dgsQueryExecutor, GetTransformFlowGraphQLQuery.newRequest().flowName("sampleTransform").build(),
-                new GetTransformFlowProjectionRoot().name(), TransformFlow.class);
+                new GetTransformFlowProjectionRoot<>().name(), TransformFlow.class);
     }
 
     public static DataSink getDataSink(DgsQueryExecutor dgsQueryExecutor) {
         return executeQuery(dgsQueryExecutor, GetDataSinkGraphQLQuery.newRequest().flowName("sampleEgress").build(),
-                new GetDataSinkProjectionRoot().name(), DataSink.class);
+                new GetDataSinkProjectionRoot<>().name(), DataSink.class);
     }
 
     public static List<ActionFamily> getActionFamilies(DgsQueryExecutor dgsQueryExecutor) {
         TypeRef<List<ActionFamily>> typeRef = new TypeRef<>() {};
-        return executeQuery(dgsQueryExecutor, GetActionNamesByFamilyGraphQLQuery.newRequest().build(), new GetActionNamesByFamilyProjectionRoot().family().actionNames(), typeRef);
+        return executeQuery(dgsQueryExecutor, GetActionNamesByFamilyGraphQLQuery.newRequest().build(), new GetActionNamesByFamilyProjectionRoot<>().family().actionNames(), typeRef);
     }
 
     public static TransformFlow saveTransformFlowPlan(DgsQueryExecutor dgsQueryExecutor) {
@@ -147,7 +147,7 @@ public class FlowPlanDatafetcherTestHelper {
                 .publish(publishRules)
                 .build();
 
-        return executeQuery(dgsQueryExecutor, SaveTransformFlowPlanGraphQLQuery.newRequest().transformFlowPlan(input).build(), new SaveTransformFlowPlanProjectionRoot().name().flowStatus().state().parent().parent(), TransformFlow.class);
+        return executeQuery(dgsQueryExecutor, SaveTransformFlowPlanGraphQLQuery.newRequest().transformFlowPlan(input).build(), new SaveTransformFlowPlanProjectionRoot<>().name().flowStatus().state().parent().parent(), TransformFlow.class);
     }
 
     public static DataSink saveDataSinkPlan(DgsQueryExecutor dgsQueryExecutor) {
@@ -159,7 +159,7 @@ public class FlowPlanDatafetcherTestHelper {
                 .egressAction(egress)
                 .subscribe(List.of(new Rule("topic", null)))
                 .build();
-        return executeQuery(dgsQueryExecutor, SaveDataSinkPlanGraphQLQuery.newRequest().DataSinkPlan(input).build(), new SaveDataSinkPlanProjectionRoot().name(), DataSink.class);
+        return executeQuery(dgsQueryExecutor, SaveDataSinkPlanGraphQLQuery.newRequest().DataSinkPlan(input).build(), new SaveDataSinkPlanProjectionRoot<>().name(), DataSink.class);
     }
 
     public static TimedDataSource saveTimedDataSourcePlan(DgsQueryExecutor dgsQueryExecutor) {
@@ -173,7 +173,7 @@ public class FlowPlanDatafetcherTestHelper {
                 .cronSchedule("*/5 * * * * *")
                 .topic("topic")
                 .build();
-        return executeQuery(dgsQueryExecutor, SaveTimedDataSourcePlanGraphQLQuery.newRequest().dataSourcePlan(input).build(), new SaveTimedDataSourcePlanProjectionRoot().name().description().type(), TimedDataSource.class);
+        return executeQuery(dgsQueryExecutor, SaveTimedDataSourcePlanGraphQLQuery.newRequest().dataSourcePlan(input).build(), new SaveTimedDataSourcePlanProjectionRoot<>().name().description().type(), TimedDataSource.class);
     }
 
     public static boolean removeTransformFlowPlan(DgsQueryExecutor dgsQueryExecutor) {
diff --git a/deltafi-core/src/test/java/org/deltafi/core/datafetchers/PluginDataFetcherTestHelper.java b/deltafi-core/src/test/java/org/deltafi/core/datafetchers/PluginDataFetcherTestHelper.java
index 96d0b5f5b..cdb23e5f7 100644
--- a/deltafi-core/src/test/java/org/deltafi/core/datafetchers/PluginDataFetcherTestHelper.java
+++ b/deltafi-core/src/test/java/org/deltafi/core/datafetchers/PluginDataFetcherTestHelper.java
@@ -25,7 +25,7 @@ import static org.junit.jupiter.api.Assertions.*;
 
 public class PluginDataFetcherTestHelper {
 
-    public static final PluginsProjectionRoot PLUGINS_PROJECTION_ROOT = new PluginsProjectionRoot()
+    public static final PluginsProjectionRoot PLUGINS_PROJECTION_ROOT = new PluginsProjectionRoot<>()
             .pluginCoordinates()
             .groupId()
             .artifactId()
@@ -42,7 +42,7 @@ public class PluginDataFetcherTestHelper {
             .artifactId()
             .version().parent();
 
-    public static final UninstallPluginProjectionRoot UNINSTALL_PLUGIN_PROJECTION_ROOT = new UninstallPluginProjectionRoot()
+    public static final UninstallPluginProjectionRoot UNINSTALL_PLUGIN_PROJECTION_ROOT = new UninstallPluginProjectionRoot<>()
             .success()
             .errors();
 
diff --git a/deltafi-core/src/test/java/org/deltafi/core/datafetchers/ResumePolicyDatafetcherTestHelper.java b/deltafi-core/src/test/java/org/deltafi/core/datafetchers/ResumePolicyDatafetcherTestHelper.java
index e2c91cedf..55fd13a95 100644
--- a/deltafi-core/src/test/java/org/deltafi/core/datafetchers/ResumePolicyDatafetcherTestHelper.java
+++ b/deltafi-core/src/test/java/org/deltafi/core/datafetchers/ResumePolicyDatafetcherTestHelper.java
@@ -53,7 +53,7 @@ public class ResumePolicyDatafetcherTestHelper {
     public static final boolean RANDOM = false;
 
     public static Result applyResumePolicies(DgsQueryExecutor dgsQueryExecutor, List<String> names) {
-        ApplyResumePoliciesProjectionRoot projection = new ApplyResumePoliciesProjectionRoot()
+        ApplyResumePoliciesProjectionRoot projection = new ApplyResumePoliciesProjectionRoot<>()
                 .success()
                 .info()
                 .errors();
@@ -70,7 +70,7 @@ public class ResumePolicyDatafetcherTestHelper {
     }
 
     public static Result resumePolicyDryRun(DgsQueryExecutor dgsQueryExecutor, String name, String dataSource, String errorSubstring) {
-        ResumePolicyDryRunProjectionRoot projection = new ResumePolicyDryRunProjectionRoot()
+        ResumePolicyDryRunProjectionRoot projection = new ResumePolicyDryRunProjectionRoot<>()
                 .success()
                 .info()
                 .errors();
@@ -89,7 +89,7 @@ public class ResumePolicyDatafetcherTestHelper {
     }
 
     public static List<ResumePolicy> getAllResumePolicies(DgsQueryExecutor dgsQueryExecutor) {
-        GetAllResumePoliciesProjectionRoot projection = new GetAllResumePoliciesProjectionRoot()
+        GetAllResumePoliciesProjectionRoot projection = new GetAllResumePoliciesProjectionRoot<>()
                 .id()
                 .name()
                 .errorSubstring()
@@ -120,7 +120,7 @@ public class ResumePolicyDatafetcherTestHelper {
     }
 
     public static ResumePolicy getResumePolicy(DgsQueryExecutor dgsQueryExecutor, UUID id) {
-        GetResumePolicyProjectionRoot projection = new GetResumePolicyProjectionRoot()
+        GetResumePolicyProjectionRoot projection = new GetResumePolicyProjectionRoot<>()
                 .id()
                 .name()
                 .errorSubstring()
@@ -228,7 +228,7 @@ public class ResumePolicyDatafetcherTestHelper {
 
     static private List<Result> executeLoadPolicies(DgsQueryExecutor dgsQueryExecutor, boolean replaceAll, List<ResumePolicyInput> policies) {
         LoadResumePoliciesGraphQLQuery query = LoadResumePoliciesGraphQLQuery.newRequest().replaceAll(replaceAll).policies(policies).build();
-        LoadResumePoliciesProjectionRoot projection = new LoadResumePoliciesProjectionRoot()
+        LoadResumePoliciesProjectionRoot projection = new LoadResumePoliciesProjectionRoot<>()
                 .success()
                 .errors();
 
@@ -247,7 +247,7 @@ public class ResumePolicyDatafetcherTestHelper {
         RemoveResumePolicyGraphQLQuery query = RemoveResumePolicyGraphQLQuery.newRequest().id(id).build();
 
         // the projection root is @NotNull, pass it a dummy since removeResumePolicy doesn't have a projection root
-        GraphQLQueryRequest graphQLQueryRequest = new GraphQLQueryRequest(query, new LoadResumePoliciesProjectionRoot(), SCALARS);
+        GraphQLQueryRequest graphQLQueryRequest = new GraphQLQueryRequest(query, new LoadResumePoliciesProjectionRoot<>(), SCALARS);
 
         return dgsQueryExecutor.executeAndExtractJsonPathAsObject(
                 graphQLQueryRequest.serialize(),
@@ -258,7 +258,7 @@ public class ResumePolicyDatafetcherTestHelper {
         ResumePolicyInput input = makeResumePolicy(POLICY_NAME3, ERROR_SUBSTRING, DATA_SOURCE3, ACTION3, ACTION_TYPE, MAX_ATTEMPTS, 2 * DELAY);
         input.setId(id);
 
-        UpdateResumePolicyProjectionRoot projection = new UpdateResumePolicyProjectionRoot()
+        UpdateResumePolicyProjectionRoot projection = new UpdateResumePolicyProjectionRoot<>()
                 .success()
                 .errors();
 
diff --git a/deltafi-core/src/test/java/org/deltafi/core/integration/IntegrationDataFetcherTestHelper.java b/deltafi-core/src/test/java/org/deltafi/core/integration/IntegrationDataFetcherTestHelper.java
index 911d697ca..986d0271b 100644
--- a/deltafi-core/src/test/java/org/deltafi/core/integration/IntegrationDataFetcherTestHelper.java
+++ b/deltafi-core/src/test/java/org/deltafi/core/integration/IntegrationDataFetcherTestHelper.java
@@ -29,7 +29,7 @@ import java.util.List;
 
 public class IntegrationDataFetcherTestHelper {
 
-    private static final GetIntegrationTestsProjectionRoot GET_ALL_INT_TESTS = new GetIntegrationTestsProjectionRoot()
+    private static final GetIntegrationTestsProjectionRoot<?, ?>  GET_ALL_INT_TESTS = new GetIntegrationTestsProjectionRoot<>()
             .name()
             .description()
             .plugins()
@@ -153,7 +153,7 @@ public class IntegrationDataFetcherTestHelper {
             .parent()
             .parent();
 
-    private static final GetIntegrationTestProjectionRoot GET_INT_TEST = new GetIntegrationTestProjectionRoot()
+    private static final GetIntegrationTestProjectionRoot<?, ?>  GET_INT_TEST = new GetIntegrationTestProjectionRoot<>()
             .name()
             .description()
             .plugins()
@@ -278,7 +278,7 @@ public class IntegrationDataFetcherTestHelper {
             .parent();
 
 
-    private static final GetTestResultProjectionRoot GET_TEST_RESULT = new GetTestResultProjectionRoot()
+    private static final GetTestResultProjectionRoot<?, ?> GET_TEST_RESULT = new GetTestResultProjectionRoot<>()
             .id()
             .testName()
             .start()
@@ -287,7 +287,7 @@ public class IntegrationDataFetcherTestHelper {
             .status()
             .parent();
 
-    private static final GetTestResultsProjectionRoot GET_ALL_TEST_RESULTS = new GetTestResultsProjectionRoot()
+    private static final GetTestResultsProjectionRoot<?, ?>  GET_ALL_TEST_RESULTS = new GetTestResultsProjectionRoot<>()
             .id()
             .testName()
             .start()
@@ -296,17 +296,17 @@ public class IntegrationDataFetcherTestHelper {
             .status()
             .parent();
 
-    private static final LoadIntegrationTestProjectionRoot LOAD_INT_TEST_PROJECTION = new LoadIntegrationTestProjectionRoot()
+    private static final LoadIntegrationTestProjectionRoot<?, ?>  LOAD_INT_TEST_PROJECTION = new LoadIntegrationTestProjectionRoot<>()
             .info()
             .errors()
             .success();
 
-    private static final SaveIntegrationTestProjectionRoot SAVE_INT_TEST_PROJECTION = new SaveIntegrationTestProjectionRoot()
+    private static final SaveIntegrationTestProjectionRoot<?, ?>  SAVE_INT_TEST_PROJECTION = new SaveIntegrationTestProjectionRoot<>()
             .info()
             .errors()
             .success();
 
-    private static final StartIntegrationTestProjectionRoot START_INT_TEST_PROJECTION = new StartIntegrationTestProjectionRoot()
+    private static final StartIntegrationTestProjectionRoot<?, ?>  START_INT_TEST_PROJECTION = new StartIntegrationTestProjectionRoot<>()
             .id()
             .testName()
             .start()
diff --git a/deltafi-core/src/test/java/org/deltafi/core/services/StorageConfigurationServiceTest.java b/deltafi-core/src/test/java/org/deltafi/core/services/StorageConfigurationServiceTest.java
index bcc3eecab..d7fc928d6 100644
--- a/deltafi-core/src/test/java/org/deltafi/core/services/StorageConfigurationServiceTest.java
+++ b/deltafi-core/src/test/java/org/deltafi/core/services/StorageConfigurationServiceTest.java
@@ -22,6 +22,7 @@ import io.minio.MinioClient;
 import io.minio.SetBucketLifecycleArgs;
 import io.minio.errors.*;
 import io.minio.messages.LifecycleRule;
+import org.assertj.core.api.InstanceOfAssertFactories;
 import org.deltafi.common.storage.s3.ObjectStorageException;
 import org.deltafi.core.MockDeltaFiPropertiesService;
 import org.junit.jupiter.api.Test;
@@ -86,7 +87,7 @@ class StorageConfigurationServiceTest {
         SetBucketLifecycleArgs args = captureArgs.getValue();
         assertThat(args.bucket()).isEqualTo(BUCKET);
 
-        assertThat(args.config().rules()).asList().hasSize(1);
+        assertThat(args.config().rules()).asInstanceOf(InstanceOfAssertFactories.LIST).hasSize(1);
         LifecycleRule rule = args.config().rules().getFirst();
         assertThat(rule.expiration().days()).isEqualTo(13);
     }
diff --git a/deltafi-core/src/test/java/org/deltafi/core/validation/SchemaComplianceValidatorTest.java b/deltafi-core/src/test/java/org/deltafi/core/validation/SchemaComplianceValidatorTest.java
index 42e4af48f..4c323aaa9 100644
--- a/deltafi-core/src/test/java/org/deltafi/core/validation/SchemaComplianceValidatorTest.java
+++ b/deltafi-core/src/test/java/org/deltafi/core/validation/SchemaComplianceValidatorTest.java
@@ -67,7 +67,7 @@ class SchemaComplianceValidatorTest {
         FlowConfigError error = errors.getFirst();
         assertThat(error.getConfigName()).isEqualTo("egressName");
         assertThat(error.getErrorType()).isEqualTo(FlowErrorType.INVALID_ACTION_PARAMETERS);
-        assertThat(error.getMessage()).isEqualTo("$.url: is missing but it is required; $.url2: is not defined in the schema and the schema does not allow additional properties");
+        assertThat(error.getMessage()).isEqualTo("$: required property 'url' not found; $: property 'url2' is not defined in the schema and the schema does not allow additional properties");
     }
 
     @Test
@@ -118,7 +118,7 @@ class SchemaComplianceValidatorTest {
 
         List<FlowConfigError> errors = schemaComplianceValidator.validateAgainstSchema(Util.egressActionDescriptor(), egressConfig(params));
         assertThat(errors).hasSize(1)
-                .contains(FlowConfigError.newBuilder().configName("RestEgress").errorType(FlowErrorType.INVALID_ACTION_PARAMETERS).message("$.url: is missing but it is required").build());
+                .contains(FlowConfigError.newBuilder().configName("RestEgress").errorType(FlowErrorType.INVALID_ACTION_PARAMETERS).message("$: required property 'url' not found").build());
     }
 
     @Test
@@ -138,7 +138,7 @@ class SchemaComplianceValidatorTest {
 
         List<FlowConfigError> errors = schemaComplianceValidator.validateAgainstSchema(Util.egressActionDescriptor(), egressConfig(params));
         assertThat(errors).hasSize(1)
-                .contains(FlowConfigError.newBuilder().configName("RestEgress").errorType(FlowErrorType.INVALID_ACTION_PARAMETERS).message("$.unknownField: is not defined in the schema and the schema does not allow additional properties").build());
+                .contains(FlowConfigError.newBuilder().configName("RestEgress").errorType(FlowErrorType.INVALID_ACTION_PARAMETERS).message("$: property 'unknownField' is not defined in the schema and the schema does not allow additional properties").build());
     }
 
     @Test
@@ -150,7 +150,7 @@ class SchemaComplianceValidatorTest {
         List<FlowConfigError> errors = schemaComplianceValidator.validateAgainstSchema(Util.egressActionDescriptor(), egressConfig(params));
 
         assertThat(errors).hasSize(1)
-                .contains(FlowConfigError.newBuilder().configName("RestEgress").errorType(FlowErrorType.INVALID_ACTION_PARAMETERS).message("$.url: is missing but it is required; $.urlTypo: is not defined in the schema and the schema does not allow additional properties").build());
+                .contains(FlowConfigError.newBuilder().configName("RestEgress").errorType(FlowErrorType.INVALID_ACTION_PARAMETERS).message("$: required property 'url' not found; $: property 'urlTypo' is not defined in the schema and the schema does not allow additional properties").build());
     }
 
     Optional<ActionDescriptor> egressActionDescriptorOptional() {
diff --git a/gradle.properties b/gradle.properties
index a0ed536d1..b2ba05f31 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -4,18 +4,18 @@ org.gradle.internal.http.socketTimeout=120000
 org.gradle.internal.http.connectionTimeout=120000
 org.gradle.parallel=true
 
-dgsCodegenVersion=5.12.4
+dgsCodegenVersion=6.3.0
 dgsCodegenClientVersion=5.1.17
-dgsVersion=8.5.7
-jacksonVersion=2.16.2
-jsonschemaGeneratorVersion=4.35.0
-jupiterVersion=5.10.2
-lombokVersion=1.18.32
-minioVersion=8.5.9
-mockitoJupiterVersion=5.11.0
+dgsVersion=9.1.3
+jacksonVersion=2.17.2
+jsonschemaGeneratorVersion=4.36.0
+jupiterVersion=5.11.2
+lombokVersion=1.18.34
+minioVersion=8.5.12
+mockitoJupiterVersion=5.14.2
 palantirDockerVersion=0.36.0
-springBootVersion=3.2.4
-testContainersVersion=1.19.7
+springBootVersion=3.3.4
+testContainersVersion=1.20.2
 
 projectMavenRepo=
 
