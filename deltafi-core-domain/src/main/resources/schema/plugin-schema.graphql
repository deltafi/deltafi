"""
A Plugin is a collection of packaged actions and optional domains. A Plugin may depend on other Plugins.
"""
type Plugin {
    "The identifying coordinates"
    pluginCoordinates: PluginCoordinates!
    "A description of the functionality provided"
    description: String!
    "The packages included"
    packages: [Package]!
    "The plugin coordinates of required plugins"
    dependencies: [PluginCoordinates]
    "The properties required"
    propertySets: [PropertySet]
    "list of actions that this plugin includes"
    actions: [ActionDescriptor]
    "list of domains that this plugin includes"
    domains: [String]
}

input PluginInput {
    "The identifying coordinates"
    pluginCoordinates: PluginCoordinatesInput!
    "A description of the functionality provided"
    description: String!
    "The packages included"
    packages: [PackageInput]!
    "The plugin coordinates of required plugins"
    dependencies: [PluginCoordinatesInput]
    "The properties required"
    propertySets: [PropertySetInput]
    "list of actions that this plugin includes"
    actions: [ActionDescriptorInput]
    "list of domains that this plugin includes"
    domains: [String]
}

"""
PluginCoordinates are used to uniquely identify a plugin.
"""
type PluginCoordinates {
    groupId: String!
    artifactId: String!
    version: String!
}

input PluginCoordinatesInput {
    groupId: String!
    artifactId: String!
    version: String!
}

type Package {
    "The identifying package coordinates"
    packageCoordinates: PackageCoordinates!
    "The type of items included"
    mediaType: PackagemediaType!
    "The location"
    location: String!
}

input PackageInput {
    "The identifying package coordinates"
    packageCoordinates: PackageCoordinatesInput!
    "The type of items included"
    mediaType: PackagemediaType!
    "The location"
    location: String!
}

"""
PackageCoordinates are used to uniquely identify a package.
"""
type PackageCoordinates {
    groupId: String!
    artifactId: String!
    version: String!
    type: PackageType!
}

input PackageCoordinatesInput {
    groupId: String!
    artifactId: String!
    version: String!
    type: PackageType!
}

"""
The type of package
"""
enum PackageType {
    helm
    docker
}

"""
The type of content included in a package
"""
enum PackagemediaType {
    actions
    domains
    both
}

type ActionDescriptor {
    name: String!
    consumes: String
    produces: String
    requiresDomains: [String]
}

input ActionDescriptorInput {
    name: String!
    consumes: String
    produces: String
    requiresDomains: [String]
}
