scalar DateTime
scalar JSON
scalar Long

type KeyValue {
  key: String!
  value: String
}

input KeyValueInput {
  key: String!
  value: String
}

type SourceInfo {
  filename: String!
  flow: String!
  metadata: [KeyValue!]
}

input SourceInfoInput {
  filename: String!
  flow: String!
  metadata: [KeyValueInput!]
}

input SourceInfoFilter {
  filename: String
  flow: String
  metadata: [KeyValueInput!]
}

"""
A ContentReference is a reference to stored content for a delta file.
"""
type ContentReference {
  uuid: String!
  offset: Long!
  size: Long!
  did: String!
}

input ContentReferenceInput {
  uuid: String!
  offset: Long!
  size: Long!
  did: String!
}

"""
Ingress and transform actions create contentReferences and express additional metadata through ProtocolLayers
Followon actions get the latest "state" of the transformed object from the top of the ProtocolLayer stack
"""
type ProtocolLayer {
  "The type of ProtocolLayer"
  type: String!
  "The action that produced this ProtocolLayer"
  action: String!
  "A reference to content produced by the action"
  contentReference: ContentReference!
  "Additional metadata"
  metadata: [KeyValue!]
}

input ProtocolLayerInput {
  type: String!
  action: String!
  contentReference: ContentReferenceInput!
  metadata: [KeyValueInput!]
}

type FormattedData {
  filename: String!
  formatAction: String!
  contentReference: ContentReference!
  metadata: [KeyValue!]
  egressActions: [String!]!
}

input FormattedDataFilter {
  filename: String
  formatAction: String
  metadata: [KeyValueInput!]
  egressActions: [String!]
}

enum DeltaFileStage {
  INGRESS
  EGRESS
  COMPLETE
  ERROR
  DELETE
}

enum ActionState {
  QUEUED
  COMPLETE
  ERROR
  RETRIED
  FILTERED
}

type Action {
  name: String!
  state: ActionState!
  created: DateTime!
  modified: DateTime!
  errorCause: String
  errorContext: String
}

enum ActionEventType {
  TRANSFORM
  LOAD
  ENRICH
  FORMAT
  VALIDATE
  EGRESS
  ERROR
  FILTER
  DELETE
}

input ActionEventInput {
  did: String!
  action: String!
  time: DateTime!
  type: ActionEventType!
  transform: TransformInput
  load: LoadInput
  enrich: EnrichInput
  format: FormatInput
  error: ErrorInput
  filter: FilterInput
}

type DeltaFile {
  did: String!
  stage: DeltaFileStage!
  actions: [Action!]!
  sourceInfo: SourceInfo!
  protocolStack: [ProtocolLayer]!
  domains: [KeyValue!]!
  enrichment: [KeyValue!]!
  formattedData: [FormattedData]!
  created: DateTime!
  modified: DateTime!
  markedForDelete: DateTime
  markedForDeleteReason: String
  errorAcknowledged: DateTime
  errorAcknowledgedReason: String
}

input IngressInput {
  did: String!
  sourceInfo: SourceInfoInput!
  contentReference: ContentReferenceInput!
  created: DateTime!
}

input TransformInput {
  protocolLayer: ProtocolLayerInput!
}

input LoadInput {
  domains: [KeyValueInput!]!
  protocolLayer: ProtocolLayerInput!
}

input EnrichInput {
  enrichments: [KeyValueInput!]!
}

input FormatInput {
  filename: String!
  contentReference: ContentReferenceInput!
  metadata: [KeyValueInput!]
}

input FilterInput {
  message: String!
}

type DeltaFiles {
  offset: Int
  count: Int
  totalCount: Int
  deltaFiles: [DeltaFile!]!
}

input DeltaFileOrder {
  direction: DeltaFileDirection!
  # The field name is passed directly to the DB for sort
  # this is not ideal, but better than requiring hard-coding every possibility
  field: String!
}

enum DeltaFileDirection {
  ASC
  DESC
}

input DeltaFilesFilter {
  dids: [String!]
  createdAfter: DateTime
  createdBefore: DateTime
  domains: [String!]
  enrichment: [String!]
  isMarkedForDelete: Boolean
  modifiedAfter: DateTime
  modifiedBefore: DateTime
  sourceInfo: SourceInfoFilter
  stage: DeltaFileStage
  actions: [String!]
  formattedData: FormattedDataFilter
}

type RetryResult {
  did: String!
  success: Boolean!
  error: String
}

type AcknowledgeResult {
  did: String!
  success: Boolean!
  error: String
}

type Query {
  flowPlans: [FlowPlan]!
  exportFlowPlan(name: String!): String!

  deltaFiles(offset: Int, limit: Int, filter: DeltaFilesFilter, orderBy: DeltaFileOrder): DeltaFiles!
  deltaFile(did: String!): DeltaFile
  lastCreated(last: Int) : [DeltaFile]!
  lastModified(last: Int) : [DeltaFile]!
  lastErrored(last: Int) : [DeltaFile]!
  lastWithFilename(filename: String!) : DeltaFile

  deltaFiConfigs(configQuery: ConfigQueryInput) : [DeltaFiConfiguration]!
  actionSchemas: [ActionSchema!]!
  exportConfigAsYaml: String!

  plugins:  [Plugin!]!
}

type Mutation {
  saveFlowPlan(flowPlan: FlowPlanInput!) : FlowPlan!
  removeFlowPlan(name: String!) : Boolean!

  ingress(input: IngressInput!): DeltaFile!
  actionEvent(event: ActionEventInput!): DeltaFile!

  retry(dids: [String!]!) : [RetryResult!]!
  acknowledge(dids: [String!]!, reason: String) : [AcknowledgeResult!]!

  registerTransformAction(transformActionConfiguration: TransformActionConfigurationInput!): TransformActionConfiguration!
  registerLoadAction(loadActionConfiguration: LoadActionConfigurationInput!): LoadActionConfiguration!
  registerEnrichAction(enrichActionConfiguration: EnrichActionConfigurationInput!): EnrichActionConfiguration!
  registerFormatAction(formatActionConfiguration: FormatActionConfigurationInput!): FormatActionConfiguration!
  registerValidateAction(validateActionConfiguration: ValidateActionConfigurationInput!): ValidateActionConfiguration!
  registerEgressAction(egressActionConfiguration: EgressActionConfigurationInput!): EgressActionConfiguration!

  registerDeleteSchema(actionSchema: DeleteActionSchemaInput!): ActionSchema!
  registerEgressSchema(actionSchema: EgressActionSchemaInput!): ActionSchema!
  registerEnrichSchema(actionSchema: EnrichActionSchemaInput!): ActionSchema!
  registerFormatSchema(actionSchema: FormatActionSchemaInput!): ActionSchema!
  registerLoadSchema(actionSchema: LoadActionSchemaInput!): ActionSchema!
  registerTransformSchema(actionSchema: TransformActionSchemaInput!): ActionSchema!
  registerValidateSchema(actionSchema: ValidateActionSchemaInput!): ActionSchema!

  addIngressFlow(ingressFlowConfiguration: IngressFlowConfigurationInput!): IngressFlowConfiguration!
  addEgressFlow(egressFlowConfiguration: EgressFlowConfigurationInput!): EgressFlowConfiguration!

  replaceConfig(configYaml: String!): String
  mergeConfig(configYaml: String!): String

  removeDeltaFiConfigs(configQuery: ConfigQueryInput): Int!

  registerPlugin(pluginInput: PluginInput!): Plugin!
}
