plugins {
	id "com.github.hierynomus.license" version "${hierynomusLicenseVersion}"
	id 'com.netflix.dgs.codegen' version "${dgsCodegenVersion}"
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'org.springframework.boot' version "${springBootVersion}"
	id "com.palantir.docker" version "${palantirDockerVersion}"
}

description = 'Core domain for DeltaFi'

apply plugin: 'maven-publish'

license {
	mapping("graphql", "SCRIPT_STYLE")
	header(rootProject.file('HEADER'))
	excludes(excludeFromLicense)
}

bootJar {
	archiveFileName = "${project.name}.jar"
}

jar {
	archiveClassifier = '' // boot plugin set this to plain, clear it
	include('org/deltafi/core/domain/api/**')
	include('org/deltafi/core/domain/generated/client/**')
	include('org/deltafi/core/domain/generated/types/**')
}

generateJava {
    packageName = 'org.deltafi.core.domain.generated'
    generateClient = true
    typeMapping = [
	  "JSON": "java.util.Map<String, Object>",
	  "Long": "java.lang.Long",
	  "ActionSchema": "org.deltafi.core.domain.api.types.ActionSchema",
	  "Content": "org.deltafi.core.domain.api.types.Content",
	  "ContentInput": "org.deltafi.core.domain.api.types.Content",
	  "ContentReference": "org.deltafi.common.content.ContentReference",
	  "ContentReferenceInput": "org.deltafi.common.content.ContentReference",
	  "DeltaFiles": "org.deltafi.core.domain.api.types.DeltaFiles",
	  "EgressFlow": "org.deltafi.core.domain.types.EgressFlow",
	  "EgressFlowPlan": "org.deltafi.core.domain.types.EgressFlowPlan",
	  "EnrichFlow": "org.deltafi.core.domain.types.EnrichFlow",
	  "EnrichFlowPlan": "org.deltafi.core.domain.types.EnrichFlowPlan",
	  "IngressFlow": "org.deltafi.core.domain.types.IngressFlow",
	  "IngressFlowPlan": "org.deltafi.core.domain.types.IngressFlowPlan",
	  "KeyValue": "org.deltafi.core.domain.api.types.KeyValue",
	  "KeyValueInput": "org.deltafi.core.domain.api.types.KeyValue",
	  "PluginCoordinates": "org.deltafi.core.domain.api.types.PluginCoordinates",
	  "PluginCoordinatesInput": "org.deltafi.core.domain.api.types.PluginCoordinates",
	  "ProtocolLayer": "org.deltafi.core.domain.api.types.ProtocolLayer",
	  "ProtocolLayerInput": "org.deltafi.core.domain.api.types.ProtocolLayer",
	  "SourceInfo": "org.deltafi.core.domain.api.types.SourceInfo",
	  "SourceInfoInput": "org.deltafi.core.domain.api.types.SourceInfo"
	]
}

dependencyManagement {
	imports {
		mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2021.0.0'
	}
}

dependencies {
	implementation(platform("com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:${dgsVersion}")) {
		because 'DGS BOM to automatically define versions of other packages below'
	}

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	implementation project(':deltafi-common')

	implementation "javax.inject:javax.inject:1"

	implementation "org.springframework.boot:spring-boot-starter-data-mongodb"
	implementation "org.springframework.boot:spring-boot-starter-aop"
	implementation "org.springframework.retry:spring-retry"
	implementation "org.springframework.cloud:spring-cloud-starter-config"

	implementation "redis.clients:jedis:${jedisVersion}"

	implementation "io.minio:minio:${minioVersion}"

	implementation "com.networknt:json-schema-validator:1.0.65"
	implementation "com.netflix.graphql.dgs:graphql-dgs-extended-scalars"
	implementation "com.netflix.graphql.dgs:graphql-dgs-spring-boot-starter:${dgsVersion}"
	implementation "org.springframework.boot:spring-boot-starter-web"

	implementation "net.logstash.logback:logstash-logback-encoder:7.0.1"
	implementation "ch.qos.logback:logback-classic"

	testImplementation "org.springframework.boot:spring-boot-starter-test"

	testImplementation project(':deltafi-common-test')
	testImplementation 'org.awaitility:awaitility:4.1.1'
	testImplementation 'org.testcontainers:mongodb:1.16.3'
	testImplementation 'org.testcontainers:testcontainers:1.16.3'
	testImplementation 'org.testcontainers:junit-jupiter:1.16.3'
}

task copyProbe(type: Copy) {
    from ('.')
    include "probe.sh"
    destinationDir file('build/docker')
}

dockerPrepare {
    dependsOn compileJava
    dependsOn assemble
    finalizedBy copyProbe
}

docker {
    name "${project.name}:${project.version}"
    tag "local", "${localDockerRegistry}/${project.name}:latest"
    copySpec.from("build/libs/").into("build/libs/")
}
