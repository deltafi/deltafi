plugins {
    id 'java'
    id 'io.quarkus'
    id 'idea'
    id 'jacoco'
    id 'maven-publish'
    id 'org.kordamp.gradle.jandex' version '0.11.0'
}

java {
    sourceCompatibility = javaSourceCompatibility
    targetCompatibility = javaTargetCompatibility
}

sourceCompatibility = '1.11'
targetCompatibility = '1.11'

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
    dependsOn 'jandex'
}

jar {
    enabled = true
}

configurations {
	jars
}

artifacts {
	jars jar
}

quarkusDev {
    dependsOn 'jandex'
}

publishing {
	publications {
		java(MavenPublication) {
			artifact jar
		}
	}
	repositories {
		if(project.hasProperty('gitLabTokenType') && project.hasProperty('gitLabToken')) {
			maven {
				url projectMavenRepo
				credentials(HttpHeaderCredentials) {
					// the following variable reside in ~/.gradle/gradle.properties
					name = gitLabTokenType
					value = gitLabToken
				}
				authentication {
					header(HttpHeaderAuthentication)
				}
			}
		}
	}
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")

    // Use DGS BOM to automatically define versions of other packages below
    implementation(platform("com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:${dgsVersion}")) {
        because 'DGS BOM to automatically define versions of other packages below'
    }

    implementation project(':deltafi-common')
    implementation project(path: ':deltafi-dgs', configuration: 'jars')

    implementation "redis.clients:jedis:${jedisVersion}"

    implementation 'io.quarkus:quarkus-config-yaml'
    implementation 'io.quarkus:quarkus-resteasy-reactive'
    implementation 'io.quarkus:quarkus-resteasy-reactive-jackson'
    implementation 'io.quarkus:quarkus-kubernetes-config'
    implementation "io.quarkiverse.loggingjson:quarkus-logging-json:${quarkusLoggingJsonVersion}"
    implementation "io.minio:minio:${minioVersion}"

    implementation 'com.netflix.graphql.dgs:graphql-dgs-client'
    implementation "com.netflix.graphql.dgs.codegen:graphql-dgs-codegen-client-core:${dgsCodegenVersion}"

    implementation "com.graphql-java:graphql-java:${graphqlJavaVersion}"
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation "com.github.victools:jsonschema-generator:${jsonschemaGeneratorVersion}"
    implementation "com.github.victools:jsonschema-module-jackson:${jsonschemaGeneratorVersion}"

    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.quarkus:quarkus-junit5-mockito'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'org.mockito:mockito-junit-jupiter'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    dependsOn 'jandex'
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        csv.enabled true
        html.destination layout.buildDirectory.dir('jacocoHtmlReport').get().asFile
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['org/deltafi/dgs/generated/**', '**/*Application.class'])
        }))
    }

}

jacoco {
    reportsDirectory.set(layout.buildDirectory.dir('jacocoReport'))
}
