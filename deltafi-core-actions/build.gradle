plugins {
    id 'docker-java'
    id 'org.springframework.boot' version "${springBootVersion}"
}

dependencies {
    implementation project(':deltafi-action-kit')

    implementation 'org.apache.commons:commons-compress:1.27.1'
    implementation 'org.tukaani:xz:1.10'
    implementation 'org.apache.tika:tika-core:3.2.0'
    implementation 'com.bazaarvoice.jolt:jolt-complete:0.1.8'
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jacksonVersion}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:${jacksonVersion}"
    implementation 'com.github.mwiede:jsch:0.2.17'
    implementation 'com.jayway.jsonpath:json-path:2.9.0'
    implementation 'org.bouncycastle:bcpkix-jdk18on:1.78.1'

    testImplementation project(':deltafi-common-test')
    testImplementation project(':deltafi-action-kit-test')

    testImplementation platform("org.junit:junit-bom:${jupiterVersion}")
    testRuntimeOnly platform("org.junit:junit-bom:${jupiterVersion}")
    testImplementation 'io.rest-assured:rest-assured:5.5.5'
    testImplementation "org.mockito:mockito-junit-jupiter"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.junit.jupiter:junit-jupiter-params"
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.wiremock:wiremock-standalone:3.12.0'
    testImplementation 'org.apache.sshd:sshd-core:2.15.0'
    testImplementation 'org.apache.sshd:sshd-sftp:2.15.0'
}

jar {
    // do not create the -plain.jar
    enabled = false
}

springBoot {
    buildInfo {
        properties {
            additional = [
                    description: "Core DeltaFi actions",
                    actionKitVersion: "${project.version}"
           ]
        }
    }
}

dockerPrepare {
    from bootJar
}

configurations {
    docs
}

def docsDirectory = layout.buildDirectory.dir('docs')

task generateDocs(type: JavaExec) {
    dependsOn compileJava
    classpath = sourceSets.main.compileClasspath + sourceSets.main.runtimeClasspath
    mainClass = 'org.deltafi.actionkit.documentation.ActionsDocumentationGenerator'
    args = [docsDirectory.get().asFile, 'org.deltafi.core']
}

artifacts {
    docs(docsDirectory.get().asFile) {
        builtBy generateDocs
    }
}
