
variables:
  PYTHON_BASE_IMAGE: deltafi/python:3.13.8-2
  JAVA_BASE_IMAGE: deltafi/deltafi-build:jdk21.0.8-python3.13.7-2
  BUILDX_BASE_IMAGE: deltafi/docker-with-buildx:28.5.1-alpine3.22-0.29.1-0
  KANIKO_BASE_IMAGE: gcr.io/kaniko-project/executor:v1.24.0-debug

  PROJECT_NAME: ${CI_PROJECT_NAME}
  CORE_PROJECT_ID: 45043636

  DOCKER_DRIVER: overlay2
  DOCKER_PLATFORMS: linux/amd64,linux/arm64/v8
  GITLAB_REPOSITORY: ${CI_REGISTRY_IMAGE}
  DOCKER_IO_NAMESPACE: docker.io/deltafi
  DOCKER_DEV_TAG: ${CI_COMMIT_SHORT_SHA}
  DOCKER_RELEASE_TAG: ${CI_COMMIT_TAG}

default:
  timeout: 45m

image: ${JAVA_BASE_IMAGE}

.gradle:
  variables:
    GRADLE_USER_HOME: /cache/.gradle.${CI_CONCURRENT_ID}
    GRADLE_OPTS: "-Dorg.gradle.daemon=false"
    GRADLE: "./gradlew -s --parallel --no-daemon -PgitLabTokenType=Job-Token -PgitLabToken=${CI_JOB_TOKEN}"

.golang:
  image: deltafi/deltafi-build:jdk21.0.8_9-golang1.25.0-alpine-0
  variables:
    GOPATH: /cache/go
  # cache:
  #   - key: "golang"
  #     paths:
  #       - ${GOPATH}

.gradle-build:
  variables:
    GRADLE_TASKS: assemble test
  extends:
    - .gradle
  stage: build
  script:
    - ${GRADLE} --rerun-tasks ${GRADLE_TASKS}
  artifacts:
    when: always
    reports:
      junit: "**/build/test-results/test/**/TEST-*.xml"
    paths:
      - "**/build"
      - ".gradle"

.publish:
  tags:
    - heavy
  extends:
    - .gradle
  stage: publish
  needs:
    - job: "Core Build"

.docker-publish:
  stage: docker
  image: ${BUILDX_BASE_IMAGE}
  services:
    - docker:stable-dind
  tags:
    - light
  variables:
    REGISTRY: ${CI_REGISTRY}
    REGISTRY_USERNAME: ${CI_REGISTRY_USER}
    REGISTRY_PASSWORD: ${CI_JOB_TOKEN}
    DOCKER_REPOSITORY: ${CI_REGISTRY_IMAGE}
    DOCKER_TAG: ${DOCKER_DEV_TAG}
    DOCKERFILE: "Dockerfile"
    CONTEXT: "."
    DOCKER_BUILD_FLAGS:
  before_script:
    - rm -rf extra.sh
    - docker buildx create --use
    - docker login -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD} ${REGISTRY}
  script:
    - echo docker buildx build --push --platform ${DOCKER_PLATFORMS} --tag ${DOCKER_REPOSITORY}/${PROJECT_NAME}:${DOCKER_TAG} ${DOCKER_BUILD_FLAGS} --file "${DOCKERFILE}" ${CONTEXT}
    - ls -la "$CONTEXT"
    - echo "$DOCKERFILE"
    - cat "$DOCKERFILE"
    - docker buildx build --push --platform ${DOCKER_PLATFORMS} --tag ${DOCKER_REPOSITORY}/${PROJECT_NAME}:${DOCKER_TAG} ${DOCKER_BUILD_FLAGS} --file "${DOCKERFILE}" ${CONTEXT}

.docker-publish-gitlab:
  extends:
    - .docker-publish
  variables:
    REGISTRY: ${CI_REGISTRY}
    REGISTRY_USERNAME: ${CI_REGISTRY_USER}
    REGISTRY_PASSWORD: ${CI_JOB_TOKEN}
    DOCKER_REPOSITORY: ${CI_REGISTRY_IMAGE}
    DOCKER_TAG: ${CI_COMMIT_TAG}

.docker-publish-dockerhub:
  extends:
    - .docker-publish
  variables:
    REGISTRY: docker.io
    REGISTRY_USERNAME: ${DOCKERHUB_USERNAME}
    REGISTRY_PASSWORD: ${DOCKERHUB_PASSWORD}
    DOCKER_REPOSITORY: ${DOCKER_IO_NAMESPACE}
    DOCKER_TAG: ${CI_COMMIT_TAG}

.docker-multiarch:
  extends:
    - .docker-publish-dockerhub
  stage: docker
  tags:
    - heavy
  needs:
    - job: "Core Build"
  variables:
    CONTEXT: "${CI_PROJECT_DIR}/${PROJECT_NAME}/build/docker"
    DOCKERFILE: "${CONTEXT}/Dockerfile"
  rules:
    - if: $CI_COMMIT_TAG

.kaniko:
  stage: docker
  image:
    name: ${KANIKO_BASE_IMAGE}
    entrypoint: [""]
  tags:
    - light
  variables:
    CONTEXT: "${CI_PROJECT_DIR}"
    REGISTRY: ${CI_REGISTRY}
    REGISTRY_USERNAME: ${CI_REGISTRY_USER}
    REGISTRY_PASSWORD: ${CI_JOB_TOKEN}
    DOCKER_REPOSITORY: ${CI_REGISTRY_IMAGE}
    DOCKER_TAG: ${DOCKER_DEV_TAG}
    DOCKER_SECONDARY_TAG: ${CI_COMMIT_BRANCH}
    DOCKERFILE: ${CONTEXT}/Dockerfile
    KANIKO_ARGS: --registry-mirror=172.17.0.1:6000 --cache
    KANIKO_FLAGS:
  script:
    - >
      echo /kaniko/executor
      ${KANIKO_ARGS}
      --context "$CONTEXT"
      --dockerfile "$DOCKERFILE"
      --destination "${DOCKER_REPOSITORY}/${PROJECT_NAME}:$DOCKER_TAG"
      --destination "${DOCKER_REPOSITORY}/${PROJECT_NAME}:$DOCKER_SECONDARY_TAG"
      ${KANIKO_FLAGS}
    - >
      time /kaniko/executor
      ${KANIKO_ARGS}
      --context "$CONTEXT"
      --dockerfile "$DOCKERFILE"
      --destination "${DOCKER_REPOSITORY}/${PROJECT_NAME}:$DOCKER_TAG"
      --destination "${DOCKER_REPOSITORY}/${PROJECT_NAME}:$DOCKER_SECONDARY_TAG"
      ${KANIKO_FLAGS}

# Kaniko used for these docker builds to speed up the process
.docker:
  extends:
    - .kaniko
  needs:
    - job: "Core Build"
  variables:
    CONTEXT: "${CI_PROJECT_DIR}/${PROJECT_NAME}/build/docker"
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH

.publish-python:
  extends:
    - .publish
  variables:
    GITLAB_PYPI_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi"
  only:
    refs:
      - tags
      - dev
      - main
  script:
    - ./gradlew $PROJECT_NAME:build
    - cd $PROJECT_NAME/src
    - uv publish --publish-url ${GITLAB_PYPI_URL} --username gitlab-ci-token --password ${CI_JOB_TOKEN}

.publish-python-pypi:
  extends:
    - .publish
  rules:
    - if: $CI_COMMIT_TAG && $CI_PROJECT_NAMESPACE != 'deltafi'
  script:
    - ./gradlew $PROJECT_NAME:build
    - cd $PROJECT_NAME/src
    - uv publish --username __token__ --password ${PYTHON_PYPI_PUBLISH_PASSWORD}

.container_scanning:
  tags:
    - light
  variables:
    CS_ANALYZER_IMAGE: "$CI_TEMPLATE_REGISTRY_HOST/security-products/container-scanning:5"
    GIT_STRATEGY: fetch
  image: "$CS_ANALYZER_IMAGE$CS_IMAGE_SUFFIX"
  stage: scan
  allow_failure: true
  artifacts:
    reports:
      container_scanning: deltafi-core.container-report.json
    paths:
      - deltafi-core.container-report.json
      - deltafi-core-actions.container-report.json
      - deltafi-egress-sink.container-report.json
      - deltafi-nodemonitor.container-report.json
  dependencies: []
  when: manual
  script:
    - which grype && grype db update
    - CS_DOCKERFILE_PATH=deltafi-core CS_IMAGE=${CI_REGISTRY_IMAGE}/deltafi-core:${CI_COMMIT_SHORT_SHA} gtcs scan
    - cp gl-container-scanning-report.json deltafi-core.container-report.json
    - CS_DOCKERFILE_PATH=deltafi-core-actions CS_IMAGE=${CI_REGISTRY_IMAGE}/deltafi-core-actions:${CI_COMMIT_SHORT_SHA} gtcs scan
    - cp gl-container-scanning-report.json deltafi-core-actions.container-report.json
    - CS_DOCKERFILE_PATH=deltafi-egress-sink CS_IMAGE=${CI_REGISTRY_IMAGE}/deltafi-egress-sink:${CI_COMMIT_SHORT_SHA} gtcs scan
    - cp gl-container-scanning-report.json deltafi-egress-sink.container-report.json
    - CS_DOCKERFILE_PATH=deltafi-nodemonitor CS_IMAGE=${CI_REGISTRY_IMAGE}/deltafi-nodemonitor:${CI_COMMIT_SHORT_SHA} gtcs scan
    - cp gl-container-scanning-report.json deltafi-nodemonitor.container-report.json

.distro-containers:
  stage: release
  tags:
    - light
  image: ${BUILDX_BASE_IMAGE}
  variables:
    REGISTRY: docker.io
    REGISTRY_USERNAME: ${DOCKERHUB_USERNAME}
    REGISTRY_PASSWORD: ${DOCKERHUB_PASSWORD}
    DOCKER_REPOSITORY: docker.io/deltafi
    DISTRO_PROJECT: distro
    ARCH: arm64
    OS: linux
  rules:
    - if: $CI_COMMIT_TAG
      variables:
        VERSION: ${CI_COMMIT_TAG}
  before_script:
    - docker buildx create --use
    - docker login -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD} ${REGISTRY}
  script:
    - export PLATFORM=linux/$ARCH
    - export TAG=$VERSION-$OS-$ARCH
    - echo docker build --label version="$VERSION" --label org.opencontainers.image.version="$VERSION" --push --platform "$PLATFORM" -t "${DOCKER_REPOSITORY}/${DISTRO_PROJECT}:${TAG}" --build-arg VERSION="$VERSION" --build-arg OS="$OS" --build-arg ARCH="$ARCH" -f .ci/Dockerfile.dist ./.ci
    - docker build --label version="$VERSION" --label org.opencontainers.image.version="$VERSION" --push --platform "$PLATFORM" -t "${DOCKER_REPOSITORY}/${DISTRO_PROJECT}:${TAG}" --build-arg VERSION="$VERSION" --build-arg OS="$OS" --build-arg ARCH="$ARCH" -f .ci/Dockerfile.dist ./.ci

