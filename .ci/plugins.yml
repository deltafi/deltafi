image: docker:latest
stages:
  - build
  - docker
  - deploy
  - integration-test

variables:
  PYTHON_BASE_IMAGE: deltafi/python:3.13.8-2
  JAVA_BASE_IMAGE: deltafi/deltafi-build:jdk21.0.8-python3.13.7-2
  BUILDX_BASE_IMAGE: deltafi/docker-with-buildx:28.5.1-alpine3.22-0.29.1-0
  KANIKO_BASE_IMAGE: gcr.io/kaniko-project/executor:v1.24.0-debug

  PROJECT_NAME: ${CI_PROJECT_NAME}
  CORE_PROJECT_ID: 45043636

  DOCKER_DRIVER: overlay2
  DOCKER_PLATFORMS: linux/amd64,linux/arm64/v8
  GITLAB_REPOSITORY: ${CI_REGISTRY_IMAGE}
  DOCKER_IO_NAMESPACE: docker.io/deltafi
  DOCKER_IO_REPOSITORY: ${DOCKER_IO_NAMESPACE}/${PROJECT_NAME}
  DOCKER_DEV_TAG: ${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}
  DOCKER_RELEASE_TAG: ${CI_COMMIT_TAG}

default:
  timeout: 45m

.gradle:
  image: ${JAVA_BASE_IMAGE}
  variables:
    GRADLE_USER_HOME: /cache/.gradle.${CI_CONCURRENT_ID}
    GRADLE_OPTS: "-Dorg.gradle.daemon=false"
    GRADLE: "./gradlew -s --no-daemon --build-cache -PgitLabTokenType=Job-Token -PgitLabToken=${CI_JOB_TOKEN}"

.gradle-build:
  variables:
    GRADLE_TASKS: assemble test
  extends:
    - .gradle
  stage: build
  script:
    - ${GRADLE} --rerun-tasks ${GRADLE_TASKS}
  artifacts:
    when: always
    reports:
      junit: "**/build/test-results/test/**/TEST-*.xml"
    paths:
      - "**/build"
      - ".gradle"

.python-dev-build:
  stage: build
  image: ${PYTHON_BASE_IMAGE}
  tags:
    - heavy
  variables:
    FORK_INDEX: https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/api/v4/projects/${CORE_PROJECT_ID}/packages/pypi/simple
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH
  before_script:
    - export TIMESTAMP=$(date "+%Y%m%d%H%M%S")
    - export DELTAFI_SDK_VERSION="deltafi>=$(uv version --dry-run --short --bump rc || uv version --dry-run --short --bump patch --bump rc),<3.0"
    - echo $DELTAFI_SDK_VERSION
    - uv version `uv version --dry-run --short --bump patch`dev${TIMESTAMP}
    - uv add --index ${FORK_INDEX} "${DELTAFI_SDK_VERSION}"
    - echo "uv version \$(uv version --dry-run --short --bump patch)dev${TIMESTAMP}; uv pip install \"${DELTAFI_SDK_VERSION}\" --index \$DELTAFI_PYPI_INDEX; uv add --index \$DELTAFI_PYPI_INDEX \"${DELTAFI_SDK_VERSION}\"" > extra.sh && chmod +x extra.sh
    - uv sync
    - uv tree
    - cat pyproject.toml
  script:
    - make test
  artifacts:
    when: always
    paths:
      - "extra.sh"
    reports:
      junit: "**/build/test-result.xml"

.python-release-build:
  stage: build
  image: ${PYTHON_BASE_IMAGE}
  tags:
    - heavy
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - uv sync
    - uv tree
    - cat pyproject.toml
  script:
    - make test
  artifacts:
    when: always
    reports:
      junit: "**/build/test-result.xml"

.docker-publish:
  stage: docker
  image: ${BUILDX_BASE_IMAGE}
  services:
    - docker:stable-dind
  tags:
    - light
  rules:
    - if: $CI_COMMIT_TAG
  variables:
    REGISTRY: ${CI_REGISTRY}
    REGISTRY_USERNAME: ${CI_REGISTRY_USER}
    REGISTRY_PASSWORD: ${CI_JOB_TOKEN}
    DOCKER_REPOSITORY: ${CI_REGISTRY_IMAGE}
    DOCKER_TAG: ${DOCKER_DEV_TAG}
    DOCKERFILE: "."
    DOCKER_BUILD_FLAGS:
  before_script:
    - rm -rf extra.sh
    - docker buildx create --use
    - docker login -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD} ${REGISTRY}
  script:
    - echo "$DOCKERFILE"
    - cat "$DOCKERFILE"
    - echo docker build --push --platform ${DOCKER_PLATFORMS} --tag ${DOCKER_REPOSITORY}:${DOCKER_TAG} ${DOCKER_BUILD_FLAGS} --file "${DOCKERFILE}" .
    - docker buildx build --push --platform ${DOCKER_PLATFORMS} --tag ${DOCKER_REPOSITORY}:${DOCKER_TAG} ${DOCKER_BUILD_FLAGS} --file "${DOCKERFILE}" .

.docker-publish-gitlab:
  extends:
    - .docker-publish
  variables:
    REGISTRY: ${CI_REGISTRY}
    REGISTRY_USERNAME: ${CI_REGISTRY_USER}
    REGISTRY_PASSWORD: ${CI_JOB_TOKEN}
    DOCKER_REPOSITORY: ${CI_REGISTRY_IMAGE}
    DOCKER_TAG: ${CI_COMMIT_TAG}

.docker-publish-dockerhub:
  extends:
    - .docker-publish
  variables:
    REGISTRY: docker.io
    REGISTRY_USERNAME: ${DOCKERHUB_USERNAME}
    REGISTRY_PASSWORD: ${DOCKERHUB_PASSWORD}
    DOCKER_REPOSITORY: ${DOCKER_IO_REPOSITORY}
    DOCKER_TAG: ${CI_COMMIT_TAG}

# release:docker:
#   extends:
#     - .docker-publish-gitlab
#   script:
#     - BASE_IMAGE=${PYTHON_BASE_IMAGE} REGISTRY=${DOCKER_REPOSITORY} make info publish

# release:dockerhub:
#   extends:
#     - .docker-publish-dockerhub
#   script:
#     - BASE_IMAGE=${PYTHON_BASE_IMAGE} make info publish

.kaniko:
  stage: docker
  image:
    name: ${KANIKO_BASE_IMAGE}
    entrypoint: [""]
  tags:
    - light
  variables:
    CONTEXT: "${CI_PROJECT_DIR}"
    REGISTRY: ${CI_REGISTRY}
    REGISTRY_USERNAME: ${CI_REGISTRY_USER}
    REGISTRY_PASSWORD: ${CI_JOB_TOKEN}
    DOCKER_REPOSITORY: ${CI_REGISTRY_IMAGE}
    DOCKER_TAG: ${DOCKER_DEV_TAG}
    DOCKER_SECONDARY_TAG: ${CI_COMMIT_BRANCH}
    DOCKERFILE: ${CONTEXT}/Dockerfile
    KANIKO_ARGS: --registry-mirror=172.17.0.1:6000 --cache
    KANIKO_FLAGS:
  script:
    - >
      echo /kaniko/executor
      ${KANIKO_ARGS}
      --context "$CONTEXT"
      --dockerfile "$DOCKERFILE"
      --destination "$DOCKER_REPOSITORY:$DOCKER_TAG"
      --destination "$DOCKER_REPOSITORY:$DOCKER_SECONDARY_TAG"
      ${KANIKO_FLAGS}
    - >
      time /kaniko/executor
      ${KANIKO_ARGS}
      --context "$CONTEXT"
      --dockerfile "$DOCKERFILE"
      --destination "$DOCKER_REPOSITORY:$DOCKER_TAG"
      --destination "$DOCKER_REPOSITORY:$DOCKER_SECONDARY_TAG"
      ${KANIKO_FLAGS}

.python-kaniko:
  stage: docker
  extends:
    - .kaniko
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH
  variables:
    FORK_INDEX: https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/api/v4/projects/${CORE_PROJECT_ID}/packages/pypi/simple
  before_script:
    - cat pyproject.toml
    - cat extra.sh
  script:
    - >
      time /kaniko/executor
      ${KANIKO_ARGS}
      --context "$CONTEXT"
      --dockerfile "$DOCKERFILE"
      --destination "$DOCKER_REPOSITORY:$DOCKER_TAG"
      --destination "$DOCKER_REPOSITORY:$DOCKER_SECONDARY_TAG"
      ${KANIKO_FLAGS}
      --build-arg DELTAFI_PYPI_INDEX=${FORK_INDEX}
      --build-arg BASE_IMAGE=${PYTHON_BASE_IMAGE}

.dev-install:
  stage: deploy
  retry: 2
  tags:
    - light
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
      variables:
        DOCKER_TAG: ${DOCKERIO_REPOSITORY}:${DOCKER_RELEASE_TAG}
    - if: $CI_COMMIT_BRANCH == "main"
      variables:
        DOCKER_TAG: ${GITLAB_REPOSITORY}:${DOCKER_DEV_TAG}
    - if: $CI_COMMIT_BRANCH
      variables:
        DOCKER_TAG: ${GITLAB_REPOSITORY}:${DOCKER_DEV_TAG}
      when: manual
  allow_failure: true
  image: badouralix/curl-jq
  environment:
    name: dev
    url: https://dev.deltafi.org
  variables:
    DELTAFI_CD_SYSTEM: dev.deltafi.org
  script: |-
    echo "Installing $DOCKER_TAG as $DELTAFI_USERNAME on https://$DELTAFI_CD_SYSTEM"

    TMPFILE="/tmp/.deltafi-install-plugin"
    POST_QUERY='{ "query": "mutation { installPlugin(image: \"'$DOCKER_TAG'\") { success info errors }}","variables":null}'
    echo ${POST_QUERY} | jq
    RESPONSE_CODE=$(curl -s -u "$DELTAFI_USERNAME:$DELTAFI_PASSWORD" --retry 5 -X POST -o ${TMPFILE} -w "%{http_code}" -H "Content-Type: application/json" -d "$POST_QUERY" https://$DELTAFI_CD_SYSTEM/api/v2/graphql)

    if [[ "$RESPONSE_CODE" != "200" ]]; then
      echo -e "${RESPONSE_CODE} Error:"
      [[ -f ${TMPFILE} ]] && cat ${TMPFILE}
      [[ -f ${TMPFILE} ]] || echo "No output"
      exit 1
    fi

    SUCCESS=$(cat ${TMPFILE} | jq '.data.installPlugin.success // false')
    if [[ $SUCCESS == "true" ]]; then
      echo -e "Successfully upgraded to ${DOCKER_TAG}"
      exit 0
    else
      ERRORS=$(cat ${TMPFILE} | jq '.errors // .data.installPlugin.errors')
      echo "Failed to upgrade to ${DOCKER_TAG}"
      echo "$ERRORS"
      exit 1
    fi

.integration-test:
  stage: integration-test
  allow_failure: true
  retry: 2
  tags:
    - light
  variables:
    DELTAFI_CD_SYSTEM: dev.deltafi.org
    TEST_NAME: set_TEST_NAME_variable
    MAX_TRIES: 40
    SLEEP_SECS: 5.0
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH
      when: manual
  image: badouralix/curl-jq
  environment:
    name: dev
    url: https://dev.deltafi.org
  script: |-
    TMPFILE="/tmp/.deltafi-integration-test"

    wait_for_test() {
      test_id=$1
      rm -f $TMPFILE

      GET_TEST_POST='{ "query": "{ getTestResult(id: \"'$test_id'\") { status errors }}","variables":null}'
      GET_TEST_RC=$(curl -s -u "$DELTAFI_USERNAME:$DELTAFI_PASSWORD" --retry 5 -X POST -o ${TMPFILE} -w "%{http_code}" -H "Content-Type: application/json" -d "$GET_TEST_POST" https://$DELTAFI_CD_SYSTEM/api/v2/graphql)

      if [[ "$GET_TEST_RC" == "200" ]]; then
        TMP_STATUS=$(cat ${TMPFILE} | jq -r '.data.getTestResult.status')
      else
        TMP_STATUS="ERROR"
      fi
      rm -f $TMPFILE
      echo -e $TMP_STATUS
    }

    wait_in_loop() {
      test_id=$1

      TEST_STATUS=$(wait_for_test $test_id)
      tries=0
      echo "Initial test status: ${TEST_STATUS}"
      until [[ $TEST_STATUS != "STARTED" ]]; do
        tries=`expr $tries + 1`
        if [[ "$tries" == "$MAX_TRIES" ]]; then
          TEST_STATUS="TIMER_EXPIRED"
          break
        fi
        echo "."
        sleep $SLEEP_SECS
        TEST_STATUS=$(wait_for_test $test_id)
      done
      if [[ $TEST_STATUS != "SUCCESSFUL" ]];then
        echo "Final test status: ${TEST_STATUS}"
        exit 1
      fi
    }

    POST_QUERY='{ "query": "mutation { startIntegrationTest(name: \"'$TEST_NAME'\") { id status errors }}","variables":null}'
    echo ${POST_QUERY} | jq
    RESPONSE_CODE=$(curl -s -u "$DELTAFI_USERNAME:$DELTAFI_PASSWORD" --retry 5 -X POST -o ${TMPFILE} -w "%{http_code}" -H "Content-Type: application/json" -d "$POST_QUERY" https://$DELTAFI_CD_SYSTEM/api/v2/graphql)

    if [[ "$RESPONSE_CODE" != "200" ]]; then
      echo -e "${RESPONSE_CODE} Error:"
      [[ -f ${TMPFILE} ]] && cat ${TMPFILE}
      [[ -f ${TMPFILE} ]] || echo "No output"
      exit 1
    fi

    INIT_STATUS=$(cat ${TMPFILE} | jq -r '.data.startIntegrationTest.status')
    TEST_ID=$(cat ${TMPFILE} | jq -r '.data.startIntegrationTest.id')

    if [[ $INIT_STATUS == "STARTED" ]]; then
      echo -e "Started test ${TEST_NAME}, ${TEST_ID}"
      if [[ $MAX_TRIES != "0" ]]; then
        wait_in_loop $TEST_ID
      fi
      echo "Test status: SUCCESS"
      exit 0
    else
      ERRORS=$(cat ${TMPFILE} | jq '.errors // .data.startIntegrationTest.errors')
      echo "Failed to start test ${TEST_NAME}"
      echo "$ERRORS"
      exit 1
    fi

# integration-test:example:
#   extends:
#     - .integration-test
#   variables:
#     DELTAFI_CD_SYSTEM: dev.deltafi.org
#     TEST_NAME: example.example-test
#     MAX_TRIES: 40
#     SLEEP_SECS: 5.0
