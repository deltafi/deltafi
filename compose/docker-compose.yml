x-health-probe: &health-probe
  healthcheck:
    test: /probe.sh
    interval: 15s
    timeout: 15s
    start_period: 5s
    retries: 15

x-logging-label: &logging-label
  logging: "promtail"
  logging_jobname: "containerlogs"

networks:
  deltafi:
    external: true

services:
  deltafi-core:
    image: ${DELTAFI_CORE}
    container_name: deltafi-core
    depends_on:
      deltafi-valkey:
        condition: service_healthy
      deltafi-mongodb:
        condition: service_healthy
      deltafi-minio:
        condition: service_started
    expose:
      - "8080"
    environment:
      JDK_JAVA_OPTIONS: "-Dcom.redhat.fips=false -Dschedule.diskSpace=false"
      UNIQUE_ID: deltafi-core
      SPRING_PROFILES_ACTIVE: monitor
    env_file:
      - ${ENV_DIR}/common.env
      - ${SECRETS_DIR}/valkey.env
      - ${SECRETS_DIR}/mongodb.env
      - ${SECRETS_DIR}/minio.env
      - ${SECRETS_DIR}/clickhouse.env
      - ${SECRETS_DIR}/ssl.env
    <<: *health-probe
    labels:
      deltafi-group: deltafi-core
      <<: *logging-label
    networks:
      - deltafi
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  deltafi-ingress:
    image: ${DELTAFI_INGRESS}
    container_name: deltafi-ingress
    depends_on:
      deltafi-valkey:
        condition: service_healthy
      deltafi-mongodb:
        condition: service_healthy
      deltafi-minio:
        condition: service_started
    environment:
      JDK_JAVA_OPTIONS: "-Dcom.redhat.fips=false -Dschedule.actionEvents=false -Dschedule.maintenance=false -Dschedule.propertySync=true"
    env_file:
      - ${ENV_DIR}/common.env
      - ${SECRETS_DIR}/valkey.env
      - ${SECRETS_DIR}/mongodb.env
      - ${SECRETS_DIR}/minio.env
      - ${SECRETS_DIR}/clickhouse.env
      - ${SECRETS_DIR}/ssl.env
    expose:
      - "8080"
    <<: *health-probe
    labels:
      deltafi-group: deltafi-core
      <<: *logging-label
    networks:
      - deltafi
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  deltafi-auth:
    image: ${DELTAFI_AUTH}
    container_name: deltafi-auth
    environment:
      DATA_DIR: /data
      WORKERS: ${AUTH_WORKERS}
    env_file:
      - ${ENV_DIR}/common.env
    expose:
      - "9292"
    labels:
      deltafi-group: deltafi-core
      <<: *logging-label
    networks:
      - deltafi
    restart: unless-stopped
    volumes:
      - ${DATA_DIR}/auth:/data
    user: "${USER_ID}"
  deltafi-auth-resolver:
    image: ${DELTAFI_AUTH_RESOLVER}
    container_name: deltafi-auth-resolver
    expose:
      - "${AUTH_RESOLVER_PORT}"
    labels:
      deltafi-group: deltafi-core
      <<: *logging-label
    networks:
      - deltafi
    restart: unless-stopped
    profiles: ["auth-resolver"]
  deltafi-ui:
    image: ${DELTAFI_UI}
    container_name: deltafi-ui
    depends_on:
      deltafi-core:
        condition: service_healthy
    expose:
      - "80"
    labels:
      deltafi-group: deltafi-core
      <<: *logging-label
    networks:
      - deltafi
    restart: unless-stopped
  deltafi-core-actions:
    image: ${DELTAFI_CORE_ACTIONS}
    container_name: deltafi-core-actions
    depends_on:
      deltafi-core:
        condition: service_healthy
    env_file:
      - ${ENV_DIR}/common.env
      - ${SECRETS_DIR}/valkey.env
      - ${SECRETS_DIR}/minio.env
    healthcheck:
      test: cat /tmp/running
      interval: 30s
      timeout: 30s
      retries: 4
      start_period: 10s
    labels:
      deltafi-group: deltafi-core
      <<: *logging-label
    networks:
      - deltafi
    restart: unless-stopped
  deltafi-docs:
    image: ${DELTAFI_DOCS}
    container_name: deltafi-docs
    expose:
      - "80"
    labels:
      deltafi-group: deltafi-core
    networks:
      - deltafi
    restart: unless-stopped
  deltafi-nodemonitor:
    image: ${DELTAFI_NODEMONITOR}
    container_name: deltafi-nodemonitor
    depends_on:
      deltafi-graphite:
        condition: service_started
    env_file:
      - ${ENV_DIR}/common.env
      - ${SECRETS_DIR}/valkey.env
    labels:
      deltafi-group: deltafi-core
      <<: *logging-label
    networks:
      - deltafi
    restart: unless-stopped
    volumes:
      - ${DATA_DIR}:/data
  deltafi-egress-sink:
    image: ${DELTAFI_EGRESS_SINK}
    container_name: deltafi-egress-sink
    depends_on:
      deltafi-core:
        condition: service_started
    env_file:
      - ${ENV_DIR}/common.env
    expose:
      - "80"
    labels:
      deltafi-group: deltafi-core
      <<: *logging-label
    networks:
      deltafi:
        aliases:
          - "deltafi-egress-sink-service"
    restart: unless-stopped
    volumes:
      - ${DATA_DIR}/egress-sink:/data/deltafi/egress-sink
    user: "${USER_ID}"
  deltafi-minio:
    image: ${MINIO}
    command: server /export -S /etc/minio/certs/ --address :9000 --console-address :9001
    container_name: deltafi-minio
    expose:
      - "9000"
    ports:
      - "9001:9001"
    environment:
      MINIO_PROMETHEUS_AUTH_TYPE: public
      MINIO_API_DELETE_CLEANUP_INTERVAL: 1s
    env_file:
      - ${SECRETS_DIR}/minio.env
    labels:
      deltafi-group: deltafi-dependency
    networks:
      - deltafi
    restart: unless-stopped
    volumes:
      - ${DATA_DIR}/minio:/export
    user: "${USER_ID}"
  deltafi-mongodb:
    image: ${MONGODB}
    container_name: deltafi-mongodb
    environment:
      BITNAMI_DEBUG: false
      ALLOW_EMPTY_PASSWORD: no
      MONGODB_SYSTEM_LOG_VERBOSITY: 0
      MONGODB_DISABLE_SYSTEM_LOG: no
      MONGODB_DISABLE_JAVASCRIPT: no
      MONGODB_ENABLE_IPV6: no
      MONGODB_ENABLE_DIRECTORY_PER_DB: no
    env_file:
      - ${SECRETS_DIR}/mongodb.env
    healthcheck:
      test: mongo --disableImplicitSessions --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep -q 'true'
      start_period: 5s
      timeout: 5s
      interval: 10s
      retries: 6
    labels:
      deltafi-group: deltafi-dependency
    networks:
      - deltafi
    expose:
      - "27017"
    restart: unless-stopped
    volumes:
      - ${DATA_DIR}/mongo:/bitnami/mongodb
    user: "${USER_ID}"
  deltafi-valkey:
    image: bitnami/valkey:7.2.5
    container_name: deltafi-valkey
    environment:
      BITNAMI_DEBUG: false
      REDIS_REPLICATION_MODE: master
      VALKEY_REPLICATION_MODE: master
    env_file:
      - ${SECRETS_DIR}/valkey.env
    healthcheck:
      test: [ "CMD", "valkey-cli", "--raw", "incr", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 8
      start_period: 5s
    labels:
      deltafi-group: deltafi-dependency
    networks:
      - deltafi
    expose:
      - "6379"
    restart: unless-stopped
    volumes:
      - ${SETTINGS_DIR}/redis/:/opt/bitnami/redis/mounted-etc/:ro
  deltafi-grafana:
    image: ${GRAFANA}
    container_name: deltafi-grafana
    environment:
      GF_PATHS_DATA: /var/lib/grafana/
      GF_PATHS_LOGS: /var/log/grafana
      GF_PATHS_PLUGINS: /var/lib/grafana-plugins
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
    env_file:
      - ${SECRETS_DIR}/grafana.env
      - ${SECRETS_DIR}/clickhouse.env
    expose:
      - "3000"
    labels:
      deltafi-group: deltafi-dependency
    networks:
      deltafi:
        aliases:
          - "visualization"
          - "grafana"
    volumes:
      - ${DATA_DIR}/grafana:/var/lib/grafana
      - ${SETTINGS_DIR}/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ${SETTINGS_DIR}/grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ${SETTINGS_DIR}/grafana/provider.yaml:/etc/grafana/provisioning/dashboards/provider.yaml
      - ${SETTINGS_DIR}/grafana/dashboards:/tmp/dashboards
    restart: unless-stopped
    user: "${USER_ID}"
  deltafi-docker-ui:
    image: deltafi/docker-web-gui:1.0.1-0
    container_name: deltafi-docker-ui
    expose:
      - "3230"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      deltafi-group: deltafi-dependency
    networks:
      deltafi:
        aliases:
          - "orchestration"
    restart: unless-stopped
  deltafi-graphite:
    image: ${GRAPHITE}
    container_name: deltafi-graphite
    environment:
      STATSD_INTERFACE: tcp
      GRAPHITE_TIME_ZONE: Etc/UTC
    expose:
      - "8080"
      - "2003/tcp"
      - "2003/udp"
      - "2004"
      - "2023"
      - "2024"
      - "8125/udp"
      - "8126"
    labels:
      deltafi-group: deltafi-dependency
    networks:
      - deltafi
    restart: unless-stopped
    volumes:
      - ${SETTINGS_DIR}/graphite/conf:/opt/graphite/conf/
      - ${SETTINGS_DIR}/graphite/statsd/tcp.js:/opt/statsd/config/tcp.js
      - ${SETTINGS_DIR}/graphite/statsd/udp.js:/opt/statsd/config/udp.js
      - ${DATA_DIR}/graphite:/opt/graphite/storage/
  deltafi-clickhouse:
    scale: ${CLICKHOUSE_SCALE}
    image: ${CLICKHOUSE}
    container_name: deltafi-clickhouse
    env_file:
      - ${SECRETS_DIR}/clickhouse.env
    expose:
      - "8123/tcp"
      - "9000/tcp"
      - "9004/tcp"
      - "9005/tcp"
      - "9009/tcp"
    labels:
      deltafi-group: deltafi-dependency
    networks:
      - deltafi
    restart: unless-stopped
    volumes:
      - ${DATA_DIR}/clickhouse:/bitnami/clickhouse/
      - ${SETTINGS_DIR}/clickhouse/override.xml:/bitnami/clickhouse/etc/conf.d/override.xml:ro
    user: "${USER_ID}"
  deltafi-loki:
    image: ${LOKI}
    container_name: deltafi-loki
    command: -config.file=/etc/loki/loki.yaml
    expose:
      - "3100"
      - "9095"
      - "7946"
    labels:
      deltafi-group: deltafi-dependency
    networks:
      - deltafi
    restart: unless-stopped
    volumes:
      - ${SETTINGS_DIR}/loki/loki.yaml:/etc/loki/loki.yaml
      - ${DATA_DIR}/loki:/data
    user: "${USER_ID}"
  deltafi-promtail:
    image: ${PROMTAIL}
    container_name: deltafi-promtail
    command: -config.file=/etc/promtail/promtail.yaml
    depends_on:
      deltafi-loki:
        condition: service_started
    expose:
      - "3101"
    labels:
      deltafi-group: deltafi-dependency
    networks:
      - deltafi
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${SETTINGS_DIR}/promtail/promtail.yaml:/etc/promtail/promtail.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
  deltafi-nginx:
    image: ${NGINX}
    container_name: deltafi-nginx
    depends_on:
      deltafi-auth:
        condition: service_started
      deltafi-ui:
        condition: service_started
      deltafi-grafana:
        condition: service_started
      deltafi-graphite:
        condition: service_started
      deltafi-docs:
        condition: service_started
    environment:
      NGINX_ENVSUBST_OUTPUT_DIR: /etc/nginx/
    env_file:
      - ${ENV_DIR}/nginx.env
    labels:
      deltafi-group: deltafi-dependency
    networks:
      deltafi:
        aliases:
          - "ingress"
    restart: unless-stopped
    volumes:
      - ${SETTINGS_DIR}/nginx:/etc/nginx/templates
    ports:
      - "80:80"
      - "8888:8888"
