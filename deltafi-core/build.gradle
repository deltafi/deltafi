plugins {
	id "com.github.hierynomus.license" version "${hierynomusLicenseVersion}"
	id 'com.netflix.dgs.codegen' version "${dgsCodegenVersion}"
	id 'org.springframework.boot' version "${springBootVersion}"
	id "com.palantir.docker" version "${palantirDockerVersion}"
}

description = 'DeltaFi Core'

license {
	mapping("graphql", "SCRIPT_STYLE")
	header(rootProject.file('HEADER'))
	excludes(excludeFromLicense)
}

dependencies {
	implementation project(':deltafi-common')

	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-config-server'

	implementation 'com.networknt:json-schema-validator:1.0.72'

	implementation 'com.netflix.graphql.dgs:graphql-dgs-extended-scalars'
	implementation 'com.netflix.graphql.dgs:graphql-dgs-spring-boot-starter'

	testImplementation project(':deltafi-common-test')
	testImplementation "org.springframework.boot:spring-boot-starter-test"
	testImplementation 'org.apache.nifi:nifi-flowfile-packager:1.16.2'
	testImplementation 'org.awaitility:awaitility:4.2.0'
	testImplementation "org.testcontainers:mongodb:${testContainersVersion}"
	testImplementation "org.testcontainers:testcontainers:${testContainersVersion}"
	testImplementation "org.testcontainers:junit-jupiter:${testContainersVersion}"
}

generateJava {
	packageName = 'org.deltafi.core.generated'
	generateClient = true
	typeMapping = [
			"JSON": "java.util.Map<String, Object>",
			"Long": "java.lang.Long",
			"Metadata": "java.util.Map<String, String>",

			"ContentReference": "org.deltafi.common.content.ContentReference",
			"ContentReferenceInput": "org.deltafi.common.content.ContentReference",

			"Action": "org.deltafi.common.types.Action",
			"ActionConfiguration": "org.deltafi.common.types.ActionConfiguration",
			"ActionDescriptor": "org.deltafi.common.types.ActionDescriptor",
			"ActionDescriptorInput": "org.deltafi.common.types.ActionDescriptor",
			"ActionEventInput": "org.deltafi.common.types.ActionEventInput",
			"ActionEventType": "org.deltafi.common.types.ActionEventType",
			"ActionState": "org.deltafi.common.types.ActionState",
			"Content": "org.deltafi.common.types.Content",
			"ContentInput": "org.deltafi.common.types.Content",
			"DataType": "org.deltafi.common.types.VariableDataType",
			"DeltaFiConfiguration": "org.deltafi.common.types.DeltaFiConfiguration",
			"DeltaFile": "org.deltafi.common.types.DeltaFile",
			"DeltaFileStage": "org.deltafi.common.types.DeltaFileStage",
			"Domain": "org.deltafi.common.types.Domain",
			"DomainActionConfiguration": "org.deltafi.common.types.DomainActionConfiguration",
			"DomainInput": "org.deltafi.common.types.Domain",
			"DomainResultInput": "org.deltafi.common.types.DomainResultInput",
			"Egress": "org.deltafi.common.types.Egress",
			"EgressActionConfiguration": "org.deltafi.common.types.EgressActionConfiguration",
			"EgressFlowConfiguration": "org.deltafi.common.types.EgressFlowConfiguration",
			"EgressFlowPlan": "org.deltafi.common.types.EgressFlowPlan",
			"EnrichActionConfiguration": "org.deltafi.common.types.EnrichActionConfiguration",
			"EnrichFlowConfiguration": "org.deltafi.common.types.EnrichFlowConfiguration",
			"EnrichFlowPlan": "org.deltafi.common.types.EnrichFlowPlan",
			"EnrichInput": "org.deltafi.common.types.EnrichInput",
			"Enrichment": "org.deltafi.common.types.Enrichment",
			"EnrichmentInput": "org.deltafi.common.types.Enrichment",
			"ErrorDomain": "org.deltafi.common.types.ErrorDomain",
			"ErrorInput": "org.deltafi.common.types.ErrorInput",
			"FilterInput": "org.deltafi.common.types.FilterInput",
			"FormatActionConfiguration": "org.deltafi.common.types.FormatActionConfiguration",
			"FormatInput": "org.deltafi.common.types.FormatInput",
			"FormattedData": "org.deltafi.common.types.FormattedData",
			"FormattedDataInput": "org.deltafi.common.types.FormattedData",
			"IngressFlowConfiguration": "org.deltafi.common.types.IngressFlowConfiguration",
			"IngressFlowPlan": "org.deltafi.common.types.IngressFlowPlan",
			"IngressInput": "org.deltafi.common.types.IngressInput",
			"KeyValue": "org.deltafi.common.types.KeyValue",
			"KeyValueInput": "org.deltafi.common.types.KeyValue",
			"LoadActionConfiguration": "org.deltafi.common.types.LoadActionConfiguration",
			"LoadInput": "org.deltafi.common.types.LoadInput",
			"Plugin": "org.deltafi.common.types.Plugin",
			"PluginCoordinates": "org.deltafi.common.types.PluginCoordinates",
			"PluginCoordinatesInput": "org.deltafi.common.types.PluginCoordinates",
			"Property": "org.deltafi.common.types.Property",
			"PropertyInput": "org.deltafi.common.types.Property",
			"PropertySet": "org.deltafi.common.types.PropertySet",
			"PropertySetInput": "org.deltafi.common.types.PropertySet",
			"PropertySource": "org.deltafi.common.types.PropertySource",
			"ProtocolLayer": "org.deltafi.common.types.ProtocolLayer",
			"ProtocolLayerInput": "org.deltafi.common.types.ProtocolLayer",
			"SourceInfo": "org.deltafi.common.types.SourceInfo",
			"SourceInfoInput": "org.deltafi.common.types.SourceInfo",
			"SplitInput": "org.deltafi.common.types.SplitInput",
			"TransformActionConfiguration": "org.deltafi.common.types.TransformActionConfiguration",
			"TransformInput": "org.deltafi.common.types.TransformInput",
			"ValidateActionConfiguration": "org.deltafi.common.types.ValidateActionConfiguration",
			"Variable": "org.deltafi.common.types.Variable",
			"VariableInput": "org.deltafi.common.types.Variable",

			"DeletePolicy": "org.deltafi.core.types.DeletePolicy",
			"DeletePolicies": "org.deltafi.core.types.DeletePolicies",
			"DeletePoliciesInput": "org.deltafi.core.types.DeletePolicies",
			"DeltaFiles": "org.deltafi.core.types.DeltaFiles",
			"DiskSpaceDeletePolicy": "org.deltafi.core.types.DiskSpaceDeletePolicy",
			"DiskSpaceDeletePolicyInput": "org.deltafi.core.types.DiskSpaceDeletePolicy",
			"EgressFlow": "org.deltafi.core.types.EgressFlow",
			"EnrichFlow": "org.deltafi.core.types.EnrichFlow",
			"IngressFlow": "org.deltafi.core.types.IngressFlow",
			"PropertyId": "org.deltafi.core.types.PropertyId",
			"PropertyUpdate": "org.deltafi.core.types.PropertyUpdate",
			"Result": "org.deltafi.core.types.Result",
			"TimedDeletePolicy": "org.deltafi.core.types.TimedDeletePolicy",
			"TimedDeletePolicyInput": "org.deltafi.core.types.TimedDeletePolicy",
			"UniqueKeyValues": "org.deltafi.core.types.UniqueKeyValues"
	]
}

jar {
	// do not create the -plain.jar
	enabled = false
}

task copyProbe(type: Copy) {
    from ('.')
    include "probe.sh"
    destinationDir file('build/docker')
}

dockerPrepare {
    dependsOn assemble
    finalizedBy copyProbe
}

docker {
    name "${project.name}:${project.version}"
    tag "local", "${localDockerRegistry}/${project.name}:latest"
	copySpec.from(bootJar.archiveFile).into("build/libs/")
}
