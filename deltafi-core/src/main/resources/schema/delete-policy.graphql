#
#    DeltaFi - Data transformation and enrichment platform
#
#    Copyright 2021-2025 DeltaFi Contributors <deltafi@deltafi.org>
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#

interface DeletePolicy {
    id: UUID!
    name: String!
    enabled: Boolean!
    flow: String
}

type TimedDeletePolicy implements DeletePolicy {
    id: UUID!
    name: String!
    enabled: Boolean!
    flow: String
    afterCreate: String
    afterComplete: String
    minBytes: Long
    deleteMetadata: Boolean!
}

input TimedDeletePolicyInput {
    id: UUID
    name: String!
    enabled: Boolean!
    flow: String
    "Really a Duration type:"
    afterCreate: String
    "Really a Duration type:"
    afterComplete: String
    minBytes: Long
    deleteMetadata: Boolean!
}

input DeletePoliciesInput {
    timedPolicies: [TimedDeletePolicyInput!]!
}

type DeletePolicies {
    timedPolicies: [TimedDeletePolicy!]!
}

extend type Query {
    getDeletePolicies: [DeletePolicy!]!
    exportDeletePolicies: DeletePolicies!
}

extend type Mutation {
    removeDeletePolicy(id: UUID!) : Boolean!
    loadDeletePolicies(replaceAll: Boolean!, policies: DeletePoliciesInput!) : Result!
    enablePolicy(id: UUID!, enabled: Boolean!) : Boolean!
    updateTimedDeletePolicy(policyUpdate: TimedDeletePolicyInput!) : Result!
}
