#
#    DeltaFi - Data transformation and enrichment platform
#
#    Copyright 2022 DeltaFi Contributors <deltafi@deltafi.org>
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#

scalar DateTime
scalar JSON
scalar Long
scalar Metadata

type KeyValue {
  key: String!
  value: String
}

input KeyValueInput {
  key: String!
  value: String
}

type UniqueKeyValues {
  key: String!
  values: [String]!
}

type Domain {
  name: String!
  value: String
  mediaType: String!
}

input DomainInput {
  name: String!
  value: String
  mediaType: String!
}

type Egress {
  flow: String!
}

type Enrichment {
  name: String!
  value: String
  mediaType: String!
}

input EnrichmentInput {
  name: String!
  value: String
  mediaType: String!
}

type SourceInfo {
  filename: String!
  flow: String!
  metadata: [KeyValue!]
}

input SourceInfoInput {
  filename: String!
  flow: String!
  metadata: [KeyValueInput!]
}

input SourceInfoFilter {
  filename: String
  flow: String
  metadata: [KeyValueInput!]
}

type FlowAssignmentRule {
  id: String!
  name: String!
  flow: String!
  priority: Int!
  filenameRegex: String
  requiredMetadata: [KeyValue!]
}

input FlowAssignmentRuleInput {
  id: String
  name: String!
  flow: String!
  priority: Int
  filenameRegex: String
  requiredMetadata: [KeyValueInput!]
}

type Content {
  name: String
  metadata: [KeyValue!]
  contentReference: ContentReference!
}

input ContentInput {
  name: String
  metadata: [KeyValueInput!]
  contentReference: ContentReferenceInput!
}

"""
A ContentReference is a reference to stored content for a delta file.
"""
type ContentReference {
  segments: [Segment!]!
  mediaType: String!
  size: Long!
}

input ContentReferenceInput {
  segments: [SegmentInput!]!
  mediaType: String!
  size: Long
}

type Segment {
  uuid: String!
  offset: Long!
  size: Long!
  did: String!
}

input SegmentInput {
  uuid: String!
  offset: Long!
  size: Long!
  did: String!
}

"""
Ingress and transform actions create contentReferences and express additional metadata through ProtocolLayers
Followon actions get the latest "state" of the transformed object from the top of the ProtocolLayer stack
"""
type ProtocolLayer {
  "The action that produced this ProtocolLayer"
  action: String!
  "Content produced by the action"
  content: [Content!]!
  "Additional metadata"
  metadata: [KeyValue!]
}

input ProtocolLayerInput {
  action: String
  content: [ContentInput!]!
  metadata: [KeyValueInput!]
}

type FormattedData {
  filename: String!
  formatAction: String!
  contentReference: ContentReference!
  metadata: [KeyValue!]
  egressActions: [String!]!
  validateActions: [String!]!
}

input FormattedDataFilter {
  filename: String
  formatAction: String
  metadata: [KeyValueInput!]
  egressActions: [String!]
}

enum DeltaFileStage {
  INGRESS
  ENRICH
  EGRESS
  COMPLETE
  ERROR
  CANCELLED
}

enum ActionState {
  QUEUED
  COMPLETE
  ERROR
  RETRIED
  FILTERED
  SPLIT
  CANCELLED
}

type Action {
  name: String!
  state: ActionState!
  created: DateTime!
  queued: DateTime
  start: DateTime
  stop: DateTime
  modified: DateTime!
  errorCause: String
  errorContext: String
}

enum ActionEventType {
  TRANSFORM
  LOAD
  DOMAIN
  ENRICH
  FORMAT
  FORMAT_MANY
  VALIDATE
  EGRESS
  ERROR
  FILTER
  SPLIT
}

input ActionEventInput {
  did: String!
  action: String!
  start: DateTime!
  stop: DateTime!
  type: ActionEventType!
  transform: TransformEvent
  load: LoadEvent
  domain: DomainEvent
  enrich: EnrichEvent
  format: FormatEvent
  formatMany: [FormatEvent]
  error: ErrorEvent
  filter: FilterEvent
  split: [SplitEvent]
}

type DeltaFile {
  did: String!
  parentDids: [String!]!
  childDids: [String!]!
  requeueCount: Int!
  ingressBytes: Long!
  totalBytes: Long!
  stage: DeltaFileStage!
  actions: [Action!]!
  sourceInfo: SourceInfo!
  protocolStack: [ProtocolLayer!]!
  domains: [Domain!]!
  indexedMetadata: Metadata
  enrichment: [Enrichment!]!
  formattedData: [FormattedData!]!
  egress: [Egress!]!
  created: DateTime!
  modified: DateTime!
  contentDeleted: DateTime
  contentDeletedReason: String
  errorAcknowledged: DateTime
  errorAcknowledgedReason: String
  testMode: Boolean
  testModeReason: String
  egressed: Boolean
  filtered: Boolean
  replayed: DateTime
  replayDid: String
}

input IngressEvent {
  did: String!
  sourceInfo: SourceInfoInput!
  content: [ContentInput!]!
  created: DateTime!
}

input TransformEvent {
  protocolLayer: ProtocolLayerInput!
}

input LoadEvent {
  domains: [DomainInput!]!
  protocolLayer: ProtocolLayerInput!
}

input DomainEvent {
  indexedMetadata: Metadata
}

input EnrichEvent {
  enrichments: [EnrichmentInput!]!
  indexedMetadata: Metadata
}

input ErrorEvent {
  cause: String!
  context: String
}

input FormatEvent {
  filename: String!
  contentReference: ContentReferenceInput!
  metadata: [KeyValueInput!]
}

input FilterEvent {
  message: String!
}

input SplitEvent {
  sourceInfo: SourceInfoInput!
  content: [ContentInput!]!
}

type DeltaFiles {
  offset: Int
  count: Int
  totalCount: Int
  deltaFiles: [DeltaFile!]!
}

input DeltaFileOrder {
  direction: DeltaFileDirection!
  # The field name is passed directly to the DB for sort
  # this is not ideal, but better than requiring hard-coding every possibility
  field: String!
}

enum DeltaFileDirection {
  ASC
  DESC
}

input ErrorSummaryFilter {
  modifiedAfter: DateTime
  modifiedBefore: DateTime
  errorAcknowledged: Boolean
  flow: String
}

type CountPerFlow {
  flow: String!
  count: Int!
  dids: [String!]!
}

type CountPerMessage {
  message: String!
  flow: String!
  count: Int!
  dids: [String!]!
}

type ErrorsByFlow {
  offset: Int!
  count: Int!
  totalCount: Int!
  countPerFlow: [CountPerFlow!]!
}

type ErrorsByMessage {
  offset: Int!
  count: Int!
  totalCount: Int!
  countPerMessage: [CountPerMessage!]!
}

input DeltaFilesFilter {
  dids: [String!]
  parentDid: String
  requeueCountMin: Int
  ingressBytesMin: Long
  ingressBytesMax: Long
  totalBytesMin: Long
  totalBytesMax: Long
  createdAfter: DateTime
  createdBefore: DateTime
  domains: [String!]
  indexedMetadata: [KeyValueInput]
  enrichment: [String!]
  egressFlows: [String!]
  contentDeleted: Boolean
  modifiedAfter: DateTime
  modifiedBefore: DateTime
  sourceInfo: SourceInfoFilter
  stage: DeltaFileStage
  actions: [String!]
  errorCause: String
  formattedData: FormattedDataFilter
  errorAcknowledged: Boolean
  egressed: Boolean
  filtered: Boolean
  testMode: Boolean
}

type RetryResult {
  did: String!
  success: Boolean!
  error: String
}

type AcknowledgeResult {
  did: String!
  success: Boolean!
  error: String
}

type CancelResult {
  did: String!
  success: Boolean!
  error: String
}

type Result {
  success: Boolean!
  info: [String]
  errors: [String]
}

type Query {
  getIngressFlowPlan(planName: String!): IngressFlowPlan!
  getEgressFlowPlan(planName: String!): EgressFlowPlan!
  getEnrichFlowPlan(planName: String!): EnrichFlowPlan!
  getIngressFlow(flowName: String!): IngressFlow!
  getEgressFlow(flowName: String!): EgressFlow!
  getEnrichFlow(flowName: String!): EnrichFlow!
  validateIngressFlow(flowName: String!): IngressFlow!
  validateEgressFlow(flowName: String!): EgressFlow!
  validateEnrichFlow(flowName: String!): EnrichFlow!
  getFlowNames(state: FlowState): FlowNames!
  getFlows: [Flows]!
  getRunningFlows: SystemFlows!
  getAllFlows: SystemFlows!
  getAllFlowPlans: SystemFlowPlans!
  getActionNamesByFamily: [ActionFamily]!

  getPropertySets: [PropertySet]!

  resolveFlowFromFlowAssignmentRules(sourceInfo: SourceInfoInput!): String
  getAllFlowAssignmentRules: [FlowAssignmentRule]!
  getFlowAssignmentRule(id: String!): FlowAssignmentRule

  deltaFiles(offset: Int, limit: Int, filter: DeltaFilesFilter, orderBy: DeltaFileOrder): DeltaFiles!
  deltaFile(did: String!): DeltaFile
  rawDeltaFile(did: String!, pretty: Boolean): String
  lastCreated(last: Int) : [DeltaFile]!
  lastModified(last: Int) : [DeltaFile]!
  lastErrored(last: Int) : [DeltaFile]!
  lastWithFilename(filename: String!) : DeltaFile

  errorSummaryByFlow(offset: Int, limit: Int, filter: ErrorSummaryFilter, orderBy: DeltaFileOrder): ErrorsByFlow!
  errorSummaryByMessage(offset: Int, limit: Int, filter: ErrorSummaryFilter, orderBy: DeltaFileOrder): ErrorsByMessage!

  sourceMetadataUnion(dids: [String!]!) : [UniqueKeyValues!]!

  deltaFiConfigs(configQuery: ConfigQueryInput) : [DeltaFiConfiguration]!
  actionDescriptors: [ActionDescriptor!]!
  exportConfigAsYaml: String!

  plugins: [Plugin!]!
  verifyActionsAreRegistered(pluginCoordinates: PluginCoordinatesInput!) : Boolean

  domains: [String!]!
  indexedMetadataKeys(domain: String): [String!]!

  version: String!
}

type Mutation {
  loadFlowAssignmentRules(replaceAll: Boolean!, rules: [FlowAssignmentRuleInput!]!): [Result!]!
  removeFlowAssignmentRule(id: String!): Boolean!
  updateFlowAssignmentRule(rule: FlowAssignmentRuleInput!): Result!

  saveIngressFlowPlan(ingressFlowPlan: IngressFlowPlanInput!) : IngressFlow!
  saveEnrichFlowPlan(enrichFlowPlan: EnrichFlowPlanInput!) : EnrichFlow!
  saveEgressFlowPlan(egressFlowPlan: EgressFlowPlanInput!) : EgressFlow!
  removeIngressFlowPlan(name: String!) : Boolean!
  removeEnrichFlowPlan(name: String!) : Boolean!
  removeEgressFlowPlan(name: String!) : Boolean!

  startIngressFlow(flowName: String!) : Boolean!
  stopIngressFlow(flowName: String!) : Boolean!
  startEgressFlow(flowName: String!) : Boolean!
  stopEgressFlow(flowName: String!) : Boolean!
  startEnrichFlow(flowName: String!) : Boolean!
  stopEnrichFlow(flowName: String!) : Boolean!

  enableIngressTestMode(flowName: String!) : Boolean!
  disableIngressTestMode(flowName: String!) : Boolean!
  enableEgressTestMode(flowName: String!) : Boolean!
  disableEgressTestMode(flowName: String!) : Boolean!

  ingress(input: IngressEvent!): DeltaFile!
  actionEvent(event: ActionEventInput!): DeltaFile!

  resume(dids: [String!]!, removeSourceMetadata: [String!], replaceSourceMetadata: [KeyValueInput!]) : [RetryResult!]!
  replay(dids: [String!]!, replaceFilename: String, replaceFlow: String, removeSourceMetadata: [String!], replaceSourceMetadata: [KeyValueInput!]) : [RetryResult!]!
  acknowledge(dids: [String!]!, reason: String) : [AcknowledgeResult!]!
  cancel(dids: [String!]!) : [CancelResult!]!

  savePluginVariables(pluginVariablesInput: PluginVariablesInput!) : Boolean!
  setPluginVariableValues(pluginCoordinates: PluginCoordinatesInput!, variables: [KeyValueInput]!) : Boolean!

  updateProperties(updates: [PropertyUpdate]!): Int!
  removePropertyOverrides(propertyIds: [PropertyId]!): Int!

  # use when adding or removing a plugin
  addPluginPropertySet(propertySet: PropertySetInput!) : Boolean!
  removePluginPropertySet(propertySetId: String!): Boolean!

  stressTest(flow: String!, contentSize: Int!, numFiles: Int!, metadata: [KeyValueInput!], batchSize: Int) : Int!
}
