#
#    DeltaFi - Data transformation and enrichment platform
#
#    Copyright 2021-2025 DeltaFi Contributors <deltafi@deltafi.org>
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#

scalar DateTime
scalar Duration
scalar JSON
scalar Long
scalar Metadata
scalar UUID

type KeyValue {
  key: String!
  value: String
}

input KeyValueInput {
  key: String!
  value: String
}

type PerActionUniqueKeyValues {
  flow: String!
  flowType: FlowType!
  action: String!
  keyVals: [UniqueKeyValues!]!
}

type UniqueKeyValues {
  key: String!
  values: [String]!
}

input NameFilter {
  name: String!
  caseSensitive: Boolean
}

type Content {
  name: String
  segments: [Segment!]!
  mediaType: String!
  size: Long!
  tags: [String!]!
}

type Segment {
  uuid: UUID!
  offset: Long!
  size: Long!
  did: UUID!
}

enum LogSeverity {
  TRACE
  INFO
  WARNING
  ERROR
  USER
}

type LogMessage {
  severity: LogSeverity!
  created: DateTime!
  source: String!
  message: String!
}

enum DeltaFileStage {
  IN_FLIGHT
  COMPLETE
  ERROR
  CANCELLED
}

enum ActionState {
  COLD_QUEUED
  QUEUED
  COMPLETE
  ERROR
  RETRIED
  FILTERED
  SPLIT
  CANCELLED
  JOINING
  JOINED
  INHERITED
  PAUSED
}

enum ActionType {
  INGRESS
  TIMED_INGRESS
  TRANSFORM
  EGRESS
  PUBLISH
  UNKNOWN
}

enum SummaryByFlowSort {
  NAME,
  TYPE,
  COUNT
}

enum SummaryByMessageSort {
  NAME,
  TYPE,
  COUNT,
  MESSAGE
}

type Action {
  name: String!
  type: ActionType!
  state: ActionState!
  created: DateTime!
  queued: DateTime
  start: DateTime
  stop: DateTime
  modified: DateTime!
  errorCause: String
  errorContext: String
  nextAutoResume: DateTime
  nextAutoResumeReason: String
  filteredCause: String
  filteredContext: String
  attempt: Int!
  content: [Content!]!
  metadata: Metadata
  deleteMetadataKeys: [String!]!
}

type DeltaFileFlowInput {
  metadata: Metadata!
  content: [Content!]!
  topics: [String]
  ancestorIds: [Int!]!
}

enum DeltaFileFlowState {
  IN_FLIGHT
  COMPLETE
  PENDING_ANNOTATIONS
  ERROR
  FILTERED
  CANCELLED
  PAUSED
}

enum FlowType {
  REST_DATA_SOURCE
  TIMED_DATA_SOURCE
  ON_ERROR_DATA_SOURCE
  TRANSFORM
  DATA_SINK
}

type DeltaFileFlow {
  name: String!
  id: UUID!
  number: Int!
  type: FlowType!
  state: DeltaFileFlowState!
  created: DateTime!
  modified: DateTime!
  input: DeltaFileFlowInput!
  actions: [Action!]!
  publishTopics: [String!]!
  # +1 from the last dataSource
  depth: Int!
  pendingAnnotations: [String]
  testMode: Boolean!
  testModeReason: String
  errorAcknowledged: DateTime
  errorAcknowledgedReason: String
}

type DeltaFile {
  did: UUID!
  # optional name assigned by the data source
  name: String
  dataSource: String!
  transforms: [String!]!
  dataSinks: [String!]!
  topics: [String!]!
  parentDids: [UUID!]!
  childDids: [UUID!]!
  flows: [DeltaFileFlow!]!
  requeueCount: Int!
  ingressBytes: Long!
  referencedBytes: Long!
  totalBytes: Long!
  stage: DeltaFileStage!
  annotations: Metadata
  created: DateTime!
  modified: DateTime!
  pinned: Boolean
  contentDeleted: DateTime
  contentDeletedReason: String
  egressed: Boolean
  filtered: Boolean
  replayed: DateTime
  replayDid: UUID
  paused: Boolean
  warnings: Boolean
  userNotes: Boolean
  messages: [LogMessage!]
}

type DeltaFiles {
  offset: Int
  count: Int
  totalCount: Int
  deltaFiles: [DeltaFile!]!
}

input DeltaFileOrder {
  direction: DeltaFileDirection!
  # The field name is passed directly to the DB for sort
  # this is not ideal, but better than requiring hard-coding every possibility
  field: String!
}

enum DeltaFileDirection {
  ASC
  DESC
}

input ErrorSummaryFilter {
  modifiedAfter: DateTime
  modifiedBefore: DateTime
  errorAcknowledged: Boolean
  flow: String
}

input FilteredSummaryFilter {
  modifiedAfter: DateTime
  modifiedBefore: DateTime
  flow: String
}

type CountPerFlow {
  flow: String!
  type: FlowType!
  count: Int!
  dids: [UUID!]!
}

type CountPerMessage {
  message: String!
  flow: String!
  type: FlowType!
  count: Int!
  dids: [UUID!]!
}

type ErrorsByFlow {
  offset: Int!
  count: Int!
  totalCount: Int!
  countPerFlow: [CountPerFlow!]!
}

type ErrorsByMessage {
  offset: Int!
  count: Int!
  totalCount: Int!
  countPerMessage: [CountPerMessage!]!
}

type FilteredByFlow {
  offset: Int!
  count: Int!
  totalCount: Int!
  countPerFlow: [CountPerFlow!]!
}

type FilteredByMessage {
  offset: Int!
  count: Int!
  totalCount: Int!
  countPerMessage: [CountPerMessage!]!
}

input DeltaFilesFilter {
  dids: [UUID!]
  nameFilter: NameFilter
  parentDid: UUID
  requeueCountMin: Int
  ingressBytesMin: Long
  ingressBytesMax: Long
  referencedBytesMin: Long
  referencedBytesMax: Long
  totalBytesMin: Long
  totalBytesMax: Long
  createdAfter: DateTime
  createdBefore: DateTime
  annotations: [KeyValueInput!]
  dataSources: [String!]
  transforms: [String!]
  dataSinks: [String!]
  topics: [String!]
  contentDeleted: Boolean
  modifiedAfter: DateTime
  modifiedBefore: DateTime
  stage: DeltaFileStage
  actions: [String!]
  errorCause: String
  filteredCause: String
  errorAcknowledged: Boolean
  egressed: Boolean
  filtered: Boolean
  testMode: Boolean
  replayable: Boolean
  replayed: Boolean
  terminalStage: Boolean
  pendingAnnotations: Boolean
  paused: Boolean
  pinned: Boolean
  warnings: Boolean
  userNotes: Boolean
}

type RetryResult {
  did: UUID!
  success: Boolean!
  error: String
}

type AcknowledgeResult {
  did: UUID!
  success: Boolean!
  error: String
}

type CancelResult {
  did: UUID!
  success: Boolean!
  error: String
}

type PinResult {
  did: UUID!
  success: Boolean!
  error: String
}

type Result {
  success: Boolean!
  info: [String]
  errors: [String]
}

type DeltaFileStats {
  totalCount: Long!
  inFlightCount: Long!
  inFlightBytes: Long!
}

input ResumeMetadata {
  flow: String!
  action: String!
  metadata: [KeyValueInput!]
  deleteMetadataKeys: [String!]
}

type Topic {
  name: String!
  publishers: [TopicParticipant!]!
  subscribers: [TopicParticipant!]!
}

type TopicParticipant {
  name: String!
  type: FlowType!
  state: FlowState!
  condition: String
}

type Query {
  getDataSinkPlan(planName: String!): DataSinkPlan!
  getRestDataSourcePlan(planName: String!): RestDataSourcePlan!
  getTimedDataSourcePlan(planName: String!): TimedDataSourcePlan!
  getOnErrorDataSourcePlan(planName: String!): OnErrorDataSourcePlan!
  getTransformFlowPlan(planName: String!): TransformFlowPlan!
  getDataSink(flowName: String!): DataSink!
  getRestDataSource(name: String!): RestDataSource!
  getTimedDataSource(name: String!): TimedDataSource!
  getOnErrorDataSource(name: String!): OnErrorDataSource!
  getTransformFlow(flowName: String!): TransformFlow!
  validateDataSink(flowName: String!): DataSink!
  validateRestDataSource(name: String!): RestDataSource!
  validateTimedDataSource(name: String!): TimedDataSource!
  validateOnErrorDataSource(name: String!): OnErrorDataSource!
  validateTransformFlow(flowName: String!): TransformFlow!
  getFlowNames(state: FlowState): FlowNames!
  getFlows: [Flows]!
  getRunningFlows: SystemFlows!
  getAllFlows: SystemFlows!
  getAllTopics: [Topic!]!
  getTopics(names: [String!]!): [Topic!]!
  getTopic(name: String!): Topic!
  getAllFlowPlans: SystemFlowPlans!
  getAllSystemFlowPlans: SystemFlowPlans!
  getActionNamesByFamily: [ActionFamily]!
  dataSourceErrorsExceeded: [DataSourceErrorState]!

  deltaFiles(offset: Int, limit: Int, filter: DeltaFilesFilter, orderBy: DeltaFileOrder): DeltaFiles!
  deltaFile(did: UUID!): DeltaFile
  rawDeltaFile(did: UUID!, pretty: Boolean): String
  pendingAnnotations(did: UUID!): [String]!
  lastCreated(last: Int) : [DeltaFile]!
  lastModified(last: Int) : [DeltaFile]!
  lastErrored(last: Int) : [DeltaFile]!
  lastWithName(name: String!) : DeltaFile

  errorSummaryByFlow(offset: Int, limit: Int, filter: ErrorSummaryFilter, direction: DeltaFileDirection, sortField: SummaryByFlowSort): ErrorsByFlow!
  errorSummaryByMessage(offset: Int, limit: Int, filter: ErrorSummaryFilter, direction: DeltaFileDirection, sortField: SummaryByMessageSort): ErrorsByMessage!

  filteredSummaryByFlow(offset: Int, limit: Int, filter: FilteredSummaryFilter, direction: DeltaFileDirection, sortField: SummaryByFlowSort): FilteredByFlow!
  filteredSummaryByMessage(offset: Int, limit: Int, filter: FilteredSummaryFilter, direction: DeltaFileDirection, sortField: SummaryByMessageSort): FilteredByMessage!

  errorMetadataUnion(dids: [UUID!]!) : [PerActionUniqueKeyValues!]!
  sourceMetadataUnion(dids: [UUID!]!) : [UniqueKeyValues!]!

  actionDescriptors: [ActionDescriptor!]!
  exportConfigAsYaml: String!

  plugins: [Plugin!]!

  annotationKeys: [String!]!

  version: String!
  totalCount: Long
  countUnacknowledgedErrors: Long

  deltaFileStats: DeltaFileStats!
}

type Mutation {
  saveDataSinkPlan(dataSinkPlan: DataSinkPlanInput!) : DataSink!
  saveTimedDataSourcePlan(dataSourcePlan: TimedDataSourcePlanInput!) : TimedDataSource!
  saveRestDataSourcePlan(dataSourcePlan: RestDataSourcePlanInput!) : RestDataSource!
  saveOnErrorDataSourcePlan(dataSourcePlan: OnErrorDataSourcePlanInput!) : OnErrorDataSource!
  saveTransformFlowPlan(transformFlowPlan: TransformFlowPlanInput!) : TransformFlow!
  removeDataSinkPlan(name: String!) : Boolean!
  removeRestDataSourcePlan(name: String!) : Boolean!
  removeTimedDataSourcePlan(name: String!) : Boolean!
  removeOnErrorDataSourcePlan(name: String!) : Boolean!
  removeTransformFlowPlan(name: String!) : Boolean!
  saveSystemFlowPlans(systemFlowPlansInput: SystemFlowPlansInput!) : Boolean!

  setFlowState(flowType: FlowType!, flowName: String!, flowState: FlowState!) : Boolean!

  setRestDataSourceMaxErrors(name: String!, maxErrors: Int!) : Boolean!
  setTimedDataSourceMaxErrors(name: String!, maxErrors: Int!) : Boolean!
  setOnErrorDataSourceMaxErrors(name: String!, maxErrors: Int!) : Boolean!
  setRestDataSourceRateLimit(name: String!, rateLimit: RateLimitInput!) : Boolean!
  removeRestDataSourceRateLimit(name: String!) : Boolean!
  enableDataSinkTestMode(flowName: String!) : Boolean!
  disableDataSinkTestMode(flowName: String!) : Boolean!
  setTimedDataSourceMemo(name: String!, memo: String) : Boolean!
  setTimedDataSourceCronSchedule(name: String!, cronSchedule: String!) : Boolean!
  enableRestDataSourceTestMode(name: String!) : Boolean!
  enableTimedDataSourceTestMode(name: String!) : Boolean!
  enableOnErrorDataSourceTestMode(name: String!) : Boolean!
  disableRestDataSourceTestMode(name: String!) : Boolean!
  disableTimedDataSourceTestMode(name: String!) : Boolean!
  disableOnErrorDataSourceTestMode(name: String!) : Boolean!
  enableTransformTestMode(flowName: String!) : Boolean!
  disableTransformTestMode(flowName: String!) : Boolean!
  setDataSinkExpectedAnnotations(flowName: String!, expectedAnnotations: [String]) : Boolean!

  taskTimedDataSource(name: String!, memo: String) : Boolean!
  resume(dids: [UUID!]!, resumeMetadata: [ResumeMetadata!]) : [RetryResult!]!
  resumeByFlow(flowType: FlowType!, name: String!, resumeMetadata: [ResumeMetadata], includeAcknowledged: Boolean): [RetryResult]!
  resumeByErrorCause(errorCause: String!, resumeMetadata: [ResumeMetadata], includeAcknowledged: Boolean): [RetryResult]!
  resumeMatching(filter: DeltaFilesFilter!, resumeMetadata: [ResumeMetadata!]) : [RetryResult]!
  replay(dids: [UUID!]!, removeSourceMetadata: [String!], replaceSourceMetadata: [KeyValueInput!]) : [RetryResult!]!
  replayMatching(filter: DeltaFilesFilter!, removeSourceMetadata: [String], replaceSourceMetadata: [KeyValueInput]) : [RetryResult!]!

  acknowledge(dids: [UUID!]!, reason: String) : [AcknowledgeResult!]!
  acknowledgeMatching(filter: DeltaFilesFilter!, reason: String) : [AcknowledgeResult]!

  cancel(dids: [UUID!]!) : [CancelResult!]!
  cancelMatching(filter: DeltaFilesFilter!) : [CancelResult]!

  userNote(dids: [UUID!]!, message: String!) : [Result!]!

  pin(dids: [UUID!]!) : [Result!]!
  unpin(dids: [UUID!]!) : [Result!]!
  pinMatching(filter: DeltaFilesFilter!): [PinResult]!
  unpinMatching(filter: DeltaFilesFilter!): [PinResult]!

  addAnnotations(did: UUID!, annotations: [KeyValueInput!]!, allowOverwrites: Boolean!) : Boolean!
  annotateMatching(filter: DeltaFilesFilter!, annotations: [KeyValueInput]!, allowOverwrites: Boolean!) : Boolean!

  savePluginVariables(variables: [VariableInput]!) : Boolean!
  removePluginVariables: Boolean!
  setPluginVariableValues(pluginCoordinates: PluginCoordinatesInput!, variables: [KeyValueInput!]) : Boolean!

  stressTest(flow: String!, contentSize: Int!, numFiles: Int!, metadata: [KeyValueInput!], batchSize: Int) : Int!
  stressTestAnalyticEvents(numRecords: Int!, hours: Int!) : Int!
}
