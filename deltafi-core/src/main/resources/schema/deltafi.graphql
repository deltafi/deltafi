#
#    DeltaFi - Data transformation and enrichment platform
#
#    Copyright 2021-2023 DeltaFi Contributors <deltafi@deltafi.org>
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#

scalar DateTime
scalar JSON
scalar Long
scalar Metadata

type KeyValue {
  key: String!
  value: String
}

input KeyValueInput {
  key: String!
  value: String
}

type PerActionUniqueKeyValues {
  flow: String!
  action: String!
  keyVals: [UniqueKeyValues!]!
}

type UniqueKeyValues {
  key: String!
  values: [String]!
}

type Domain {
  name: String!
  value: String
  mediaType: String!
}

input DomainInput {
  name: String!
  value: String
  mediaType: String!
}

type Egress {
  flow: String!
}

type Enrichment {
  name: String!
  value: String
  mediaType: String!
}

enum ProcessingType {
  NORMALIZATION
  TRANSFORMATION
}

type SourceInfo {
  filename: String!
  flow: String!
  metadata: Metadata
  processingType: ProcessingType
}

input SourceInfoFilter {
  # deprecated: use filenameFilter
  filename: String
  filenameFilter: FilenameFilter
  # deprecated: use ingressFlows
  flow: String
  ingressFlows: [String!]
  metadata: [KeyValueInput!]
  processingType: ProcessingType
}

input FilenameFilter {
  filename: String!
  regex: Boolean
  caseSensitive: Boolean
}

type FlowAssignmentRule {
  id: String!
  name: String!
  flow: String!
  priority: Int!
  filenameRegex: String
  requiredMetadata: [KeyValue!]
}

input FlowAssignmentRuleInput {
  id: String
  name: String!
  flow: String!
  priority: Int
  filenameRegex: String
  requiredMetadata: [KeyValueInput!]
}

type Content {
  name: String
  segments: [Segment!]!
  mediaType: String!
  size: Long!
}

type Segment {
  uuid: String!
  offset: Long!
  size: Long!
  did: String!
}

enum DeltaFileStage {
  INGRESS
  ENRICH
  EGRESS
  COMPLETE
  ERROR
  CANCELLED
}

enum ActionState {
  QUEUED
  COMPLETE
  ERROR
  RETRIED
  FILTERED
  REINJECTED 
  CANCELLED
}

enum ActionType {
  INGRESS
  TRANSFORM
  LOAD
  DOMAIN
  ENRICH
  FORMAT
  VALIDATE
  EGRESS
  UNKNOWN
}

type Action {
  name: String!
  type: ActionType!
  flow: String!
  state: ActionState!
  created: DateTime!
  queued: DateTime
  start: DateTime
  stop: DateTime
  modified: DateTime!
  errorCause: String
  errorContext: String
  filteredCause: String
  attempt: Int!
  content: [Content!]!
  metadata: Metadata
  deleteMetadataKeys: [String!]!
  domains: [Domain!]!
  enrichments: [Enrichment!]!
}

type DeltaFile {
  did: String!
  parentDids: [String!]!
  childDids: [String!]!
  requeueCount: Int!
  ingressBytes: Long!
  referencedBytes: Long!
  totalBytes: Long!
  stage: DeltaFileStage!
  actions: [Action!]!
  sourceInfo: SourceInfo!
  metadata: Metadata!
  annotations: Metadata
  egress: [Egress!]!
  created: DateTime!
  modified: DateTime!
  contentDeleted: DateTime
  contentDeletedReason: String
  errorAcknowledged: DateTime
  errorAcknowledgedReason: String
  testMode: Boolean
  testModeReason: String
  egressed: Boolean
  filtered: Boolean
  replayed: DateTime
  replayDid: String
  nextAutoResume: DateTime
  nextAutoResumeReason: String
  pendingAnnotationsForFlows: [String]
}

type DeltaFiles {
  offset: Int
  count: Int
  totalCount: Int
  deltaFiles: [DeltaFile!]!
}

input DeltaFileOrder {
  direction: DeltaFileDirection!
  # The field name is passed directly to the DB for sort
  # this is not ideal, but better than requiring hard-coding every possibility
  field: String!
}

enum DeltaFileDirection {
  ASC
  DESC
}

input ErrorSummaryFilter {
  modifiedAfter: DateTime
  modifiedBefore: DateTime
  errorAcknowledged: Boolean
  flow: String
}

type CountPerFlow {
  flow: String!
  count: Int!
  dids: [String!]!
}

type CountPerMessage {
  message: String!
  flow: String!
  count: Int!
  dids: [String!]!
}

type ErrorsByFlow {
  offset: Int!
  count: Int!
  totalCount: Int!
  countPerFlow: [CountPerFlow!]!
}

type ErrorsByMessage {
  offset: Int!
  count: Int!
  totalCount: Int!
  countPerMessage: [CountPerMessage!]!
}

input DeltaFilesFilter {
  dids: [String!]
  parentDid: String
  requeueCountMin: Int
  ingressBytesMin: Long
  ingressBytesMax: Long
  referencedBytesMin: Long
  referencedBytesMax: Long
  totalBytesMin: Long
  totalBytesMax: Long
  createdAfter: DateTime
  createdBefore: DateTime
  domains: [String!]
  annotations: [KeyValueInput!]
  enrichments: [String!]
  egressFlows: [String!]
  contentDeleted: Boolean
  modifiedAfter: DateTime
  modifiedBefore: DateTime
  sourceInfo: SourceInfoFilter
  stage: DeltaFileStage
  actions: [String!]
  errorCause: String
  filteredCause: String
  errorAcknowledged: Boolean
  egressed: Boolean
  filtered: Boolean
  testMode: Boolean
  replayable: Boolean
  replayed: Boolean
  terminalStage: Boolean
  pendingAnnotations: Boolean
}

type RetryResult {
  did: String!
  success: Boolean!
  error: String
}

type AcknowledgeResult {
  did: String!
  success: Boolean!
  error: String
}

type CancelResult {
  did: String!
  success: Boolean!
  error: String
}

type Result {
  success: Boolean!
  info: [String]
  errors: [String]
}

type DeltaFileStats {
  count: Int!
  totalBytes: Long!
  referencedBytes: Long!
}

input ResumeMetadata {
  flow: String!
  action: String!
  metadata: [KeyValueInput!]
  deleteMetadataKeys: [String!]
}

type Query {
  getIngressFlowPlan(planName: String!): IngressFlowPlan!
  getEgressFlowPlan(planName: String!): EgressFlowPlan!
  getEnrichFlowPlan(planName: String!): EnrichFlowPlan!
  getTransformFlowPlan(planName: String!): TransformFlowPlan!
  getIngressFlow(flowName: String!): IngressFlow!
  getEgressFlow(flowName: String!): EgressFlow!
  getEnrichFlow(flowName: String!): EnrichFlow!
  getTransformFlow(flowName: String!): TransformFlow!
  validateIngressFlow(flowName: String!): IngressFlow!
  validateEgressFlow(flowName: String!): EgressFlow!
  validateEnrichFlow(flowName: String!): EnrichFlow!
  validateTransformFlow(flowName: String!): TransformFlow!
  getFlowNames(state: FlowState): FlowNames!
  getFlows: [Flows]!
  getRunningFlows: SystemFlows!
  getAllFlows: SystemFlows!
  getAllFlowPlans: SystemFlowPlans!
  getActionNamesByFamily: [ActionFamily]!
  ingressFlowErrorsExceeded: [IngressFlowErrorState]!

  getAllFlowAssignmentRules: [FlowAssignmentRule]!
  getFlowAssignmentRule(id: String!): FlowAssignmentRule

  deltaFiles(offset: Int, limit: Int, filter: DeltaFilesFilter, orderBy: DeltaFileOrder): DeltaFiles!
  deltaFile(did: String!): DeltaFile
  rawDeltaFile(did: String!, pretty: Boolean): String
  pendingAnnotations(did: String!): [String]!
  lastCreated(last: Int) : [DeltaFile]!
  lastModified(last: Int) : [DeltaFile]!
  lastErrored(last: Int) : [DeltaFile]!
  lastWithFilename(filename: String!) : DeltaFile

  errorSummaryByFlow(offset: Int, limit: Int, filter: ErrorSummaryFilter, orderBy: DeltaFileOrder): ErrorsByFlow!
  errorSummaryByMessage(offset: Int, limit: Int, filter: ErrorSummaryFilter, orderBy: DeltaFileOrder): ErrorsByMessage!

  errorMetadataUnion(dids: [String!]!) : [PerActionUniqueKeyValues!]!
  sourceMetadataUnion(dids: [String!]!) : [UniqueKeyValues!]!

  deltaFiConfigs(configQuery: ConfigQueryInput) : [DeltaFiConfiguration]!
  actionDescriptors: [ActionDescriptor!]!
  exportConfigAsYaml: String!

  plugins: [Plugin!]!
  verifyActionsAreRegistered(pluginCoordinates: PluginCoordinatesInput!) : Boolean

  domains: [String!]!
  annotationKeys(domain: String): [String!]!

  version: String!
  totalCount: Long

  deltaFileStats(inFlightOnly: Boolean, includeDeletedContent: Boolean): DeltaFileStats!
}

type Mutation {
  loadFlowAssignmentRules(replaceAll: Boolean!, rules: [FlowAssignmentRuleInput!]!): [Result!]!
  removeFlowAssignmentRule(id: String!): Boolean!
  updateFlowAssignmentRule(rule: FlowAssignmentRuleInput!): Result!

  saveIngressFlowPlan(ingressFlowPlan: IngressFlowPlanInput!) : IngressFlow!
  saveEnrichFlowPlan(enrichFlowPlan: EnrichFlowPlanInput!) : EnrichFlow!
  saveEgressFlowPlan(egressFlowPlan: EgressFlowPlanInput!) : EgressFlow!
  saveTransformFlowPlan(transformFlowPlan: TransformFlowPlanInput!) : TransformFlow!
  removeIngressFlowPlan(name: String!) : Boolean!
  removeEnrichFlowPlan(name: String!) : Boolean!
  removeEgressFlowPlan(name: String!) : Boolean!
  removeTransformFlowPlan(name: String!) : Boolean!

  startIngressFlow(flowName: String!) : Boolean!
  stopIngressFlow(flowName: String!) : Boolean!
  startEgressFlow(flowName: String!) : Boolean!
  startTransformFlow(flowName: String!) : Boolean!
  stopEgressFlow(flowName: String!) : Boolean!
  startEnrichFlow(flowName: String!) : Boolean!
  stopEnrichFlow(flowName: String!) : Boolean!
  stopTransformFlow(flowName: String!) : Boolean!

  setMaxErrors(flowName: String!, maxErrors: Int!) : Boolean!
  enableIngressTestMode(flowName: String!) : Boolean!
  disableIngressTestMode(flowName: String!) : Boolean!
  enableEgressTestMode(flowName: String!) : Boolean!
  disableEgressTestMode(flowName: String!) : Boolean!
  setTransformMaxErrors(flowName: String!, maxErrors: Int!) : Boolean!
  enableTransformTestMode(flowName: String!) : Boolean!
  disableTransformTestMode(flowName: String!) : Boolean!
  setTransformFlowExpectedAnnotations(flowName: String!, expectedAnnotations: [String]) : Boolean!
  setEgressFlowExpectedAnnotations(flowName: String!, expectedAnnotations: [String]) : Boolean!

  resume(dids: [String!]!, resumeMetadata: [ResumeMetadata!]) : [RetryResult!]!
  replay(dids: [String!]!, replaceFilename: String, replaceFlow: String, removeSourceMetadata: [String!], replaceSourceMetadata: [KeyValueInput!]) : [RetryResult!]!
  acknowledge(dids: [String!]!, reason: String) : [AcknowledgeResult!]!
  cancel(dids: [String!]!) : [CancelResult!]!

  savePluginVariables(pluginVariablesInput: PluginVariablesInput!) : Boolean!
  setPluginVariableValues(pluginCoordinates: PluginCoordinatesInput!, variables: [KeyValueInput!]) : Boolean!

  stressTest(flow: String!, contentSize: Int!, numFiles: Int!, metadata: [KeyValueInput!], batchSize: Int) : Int!
}
