#
#    DeltaFi - Data transformation and enrichment platform
#
#    Copyright 2021-2023 DeltaFi Contributors <deltafi@deltafi.org>
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#

enum DataType {
  STRING
  BOOLEAN
  NUMBER
  LIST
  MAP
}

type Variable {
  name: String!
  description: String!
  dataType: DataType!
  required: Boolean!
  defaultValue: String
  value: String
  masked: Boolean
}

input VariableInput {
  name: String!
  description: String!
  dataType: DataType!
  required: Boolean!
  defaultValue: String
  value: String
  masked: Boolean
}

type PluginVariables {
  sourcePlugin: PluginCoordinates!
  variables: [Variable]!
}

input PluginVariablesInput {
  sourcePlugin: PluginCoordinatesInput!
  variables: [VariableInput]!
}

type EgressFlowPlan {
  name: String!
  type: String!
  description: String!
  sourcePlugin: PluginCoordinates!
  subscribe: [Rule!]!
  egressAction: ActionConfiguration!
}

input EgressFlowPlanInput {
  name: String!
  type: String!
  description: String!
  subscribe: [RuleInput!]!
  egressAction: ActionConfigurationInput!
}

interface DataSourcePlan {
  name: String!
  type: String!
  description: String!
  sourcePlugin: PluginCoordinates!
  topic: String!
}

type TimedDataSourcePlan implements DataSourcePlan {
  name: String!
  type: String!
  description: String!
  sourcePlugin: PluginCoordinates!
  topic: String!
  timedIngressAction: ActionConfiguration!
  cronSchedule: String
}

type RestDataSourcePlan implements DataSourcePlan {
  name: String!
  type: String!
  description: String!
  sourcePlugin: PluginCoordinates!
  topic: String!
}

input TimedDataSourcePlanInput {
  name: String!
  type: String!
  description: String!
  topic: String!
  timedIngressAction: ActionConfigurationInput!
  cronSchedule: String
}

input RestDataSourcePlanInput {
  name: String!
  type: String!
  description: String!
  topic: String!
}

type TransformFlowPlan {
  name: String!
  type: String!
  description: String!
  sourcePlugin: PluginCoordinates!
  subscribe: [Rule!]!
  transformActions: [ActionConfiguration!]
  publish: PublishRules!
}

input TransformFlowPlanInput {
  name: String!
  type: String!
  description: String!
  subscribe: [RuleInput!]!
  transformActions: [ActionConfigurationInput!]
  publish: PublishRulesInput!
}

enum FlowState {
  STOPPED
  RUNNING
  INVALID
}

enum FlowErrorType {
  UNRESOLVED_VARIABLE
  UNREGISTERED_ACTION
  INACTIVE_ACTION
  INVALID_ACTION_PARAMETERS
  INVALID_CONFIG
}

type FlowConfigError {
  configName: String!
  errorType: FlowErrorType!
  message: String!
}

type FlowStatus {
  state: FlowState!
  errors: [FlowConfigError]
  testMode: Boolean!
}

type Flows {
  sourcePlugin: PluginCoordinates!
  variables: [Variable]
  egressFlows: [EgressFlow]
  restDataSources: [RestDataSource]
  timedDataSources: [TimedDataSource]
  transformFlows: [TransformFlow]
}

type SystemFlows {
  egress: [EgressFlow]!
  restDataSource: [RestDataSource]!
  timedDataSource: [TimedDataSource]!
  transform: [TransformFlow]!
}

type SystemFlowPlans {
  egressPlans: [EgressFlowPlan]!
  restDataSources: [RestDataSourcePlan]!
  timedDataSources: [TimedDataSourcePlan]!
  transformPlans: [TransformFlowPlan]!
}

type EgressFlow {
  name: String!
  description: String!
  sourcePlugin: PluginCoordinates!
  flowStatus: FlowStatus!
  subscribe: [Rule!]!
  expectedAnnotations: [String]
  egressAction: ActionConfiguration!
  variables: [Variable]!
}

enum IngressStatus {
  HEALTHY
  DEGRADED
  UNHEALTHY
}

interface DataSource {
  name: String!
  type: String!
  description: String!
  sourcePlugin: PluginCoordinates!
  maxErrors: Int!
  flowStatus: FlowStatus!
  topic: String!
}

type TimedDataSource implements DataSource {
  name: String!
  type: String!
  description: String!
  sourcePlugin: PluginCoordinates!
  maxErrors: Int!
  flowStatus: FlowStatus!
  topic: String!
  cronSchedule: String
  lastRun: DateTime
  nextRun: DateTime
  memo: String
  currentDid: UUID
  executeImmediate: Boolean
  ingressStatus: IngressStatus
  ingressStatusMessage: String
  timedIngressAction: ActionConfiguration!
  variables: [Variable]!
}

type RestDataSource implements DataSource {
  name: String!
  type: String!
  description: String!
  sourcePlugin: PluginCoordinates!
  maxErrors: Int!
  flowStatus: FlowStatus!
  topic: String!
}

type TransformFlow {
  name: String!
  description: String!
  sourcePlugin: PluginCoordinates!
  subscribe: [Rule!]!
  flowStatus: FlowStatus!
  maxErrors: Int!
  transformActions: [ActionConfiguration!]
  publish: PublishRules
  variables: [Variable]!
}

type ActionFamily {
  family: String!
  actionNames: [String]!
}

type FlowNames {
  egress: [String]!
  transform: [String]!
  restDataSource: [String]!
  timedDataSource: [String]!
}

type DataSourceErrorState {
  name: String!
  currErrors: Int!
  maxErrors: Int!
}