#
#    DeltaFi - Data transformation and enrichment platform
#
#    Copyright 2021-2024 DeltaFi Contributors <deltafi@deltafi.org>
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#

type TimedDataSourceSnapshot {
    name: String!
    topic: String!
    running: Boolean!
    testMode: Boolean!
    cronSchedule: String
    maxErrors: Int
}

type RestDataSourceSnapshot {
    name: String!
    topic: String!
    running: Boolean!
    testMode: Boolean!
    maxErrors: Int
}

type TransformFlowSnapshot {
    name: String!
    running: Boolean!
    testMode: Boolean!
}

type DataSinkSnapshot {
    name: String!
    running: Boolean!
    testMode: Boolean!
    expectedAnnotations: [String]
}

type User {
    id: UUID!
    name: String!
    username: String!
    password: String
    dn: String
    roles: [Role]!
    createdAt: DateTime!
    updatedAt: DateTime!
}

type Role {
    id: UUID!
    name: String!
    permissions: [String]!
    createdAt: DateTime!
    updatedAt: DateTime!
}

type SystemSnapshot {
    id: UUID!
    reason: String
    created: DateTime!
    deletePolicies: DeletePolicies!
    deltaFiProperties: [KeyValue]!
    installedPlugins: [PluginCoordinates]!
    links: [Link]!
    pluginVariables: [PluginVariables]!
    restDataSources: [RestDataSourceSnapshot]
    timedDataSources: [TimedDataSourceSnapshot]
    transformFlows: [TransformFlowSnapshot]
    dataSinks: [DataSinkSnapshot]
    resumePolicies: [ResumePolicy]!
    systemFlowPlans: SystemFlowPlans!
    users: [User]!
    roles: [Role]!
}

input TimedDataSourceSnapshotInput {
    name: String!
    topic: String!
    running: Boolean!
    testMode: Boolean!
    cronSchedule: String
    maxErrors: Int
}

input RestDataSourceSnapshotInput {
    name: String!
    topic: String!
    running: Boolean!
    testMode: Boolean!
    maxErrors: Int
}

input TransformFlowSnapshotInput {
    name: String!
    running: Boolean!
    testMode: Boolean!
}

input DataSinkSnapshotInput {
    name: String!
    running: Boolean!
    testMode: Boolean!
    expectedAnnotations: [String]
}

input UserInput {
    id: UUID!
    name: String!
    username: String!
    password: String
    dn: String
    roles: [RoleInput]!
    createdAt: DateTime!
    updatedAt: DateTime!
}

input RoleInput {
    id: UUID!
    name: String!
    permissions: [String]!
    createdAt: DateTime!
    updatedAt: DateTime!
}

input SystemSnapshotInput {
    id: String!
    reason: String
    created: DateTime!
    deletePolicies: DeletePoliciesInput!
    deltaFiProperties: [KeyValueInput]!
    installedPlugins: [PluginCoordinatesInput]!
    links: [LinkInput]!
    pluginVariables: [PluginVariablesInput]!
    testTransformFlows: [String]
    testIngressFlows: [String]
    testDataSinks: [String]
    restDataSources: [RestDataSourceSnapshotInput]
    timedDataSources: [TimedDataSourceSnapshotInput]
    transformFlows: [TransformFlowSnapshotInput]
    dataSinks: [DataSinkSnapshotInput]
    resumePolicies: [ResumePolicyInput]!
    systemFlowPlans: SystemFlowPlansInput
    users: [UserInput]
    roles: [RoleInput]
}

extend type Query {
  getSystemSnapshots: [SystemSnapshot]!
  getSystemSnapshot(snapshotId: UUID!) : SystemSnapshot
}

extend type Mutation {
    # create and return a new system snapshot with an optional reason
    snapshotSystem(reason: String): SystemSnapshot!

    # apply the snapshot with the given SnapshotId, hardReset (default=false) indicates all custom config should be reset before applying the snapshot
    resetFromSnapshotWithId(snapshotId: UUID!, hardReset: Boolean) : Result!

    # import the given SystemSnapshot
    importSnapshot(snapshot: SystemSnapshotInput!) : SystemSnapshot!

    # delete the snapshot with the given SnapshotId
    deleteSnapshot(snapshotId: UUID!): Result
}
