#
#    DeltaFi - Data transformation and enrichment platform
#
#    Copyright 2021-2024 DeltaFi Contributors <deltafi@deltafi.org>
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#

"""
A Plugin is a collection of actions. It may depend on other Plugins.
"""
type Plugin {
    "The identifying coordinates"
    pluginCoordinates: PluginCoordinates!
    "A user-friendly name"
    displayName: String!
    "A description of the functionality provided"
    description: String!
    "The action kit version"
    actionKitVersion: String!
    "The actions included"
    actions: [ActionDescriptor!]
    "The plugin coordinates of required plugins"
    dependencies: [PluginCoordinates!]
    "Variables associated with this plugin"
    variables: [Variable]
}

input PluginInput {
    "The identifying coordinates"
    pluginCoordinates: PluginCoordinatesInput!
    "A user-friendly name"
    displayName: String!
    "A description of the functionality provided"
    description: String!
    "The action kit version"
    actionKitVersion: String!
    "The actions included"
    actions: [ActionDescriptorInput!]
    "The plugin coordinates of required plugins"
    dependencies: [PluginCoordinatesInput!]
}

"""
PluginCoordinates are used to uniquely identify a plugin.
"""
type PluginCoordinates {
    groupId: String!
    artifactId: String!
    version: String!
}

input PluginCoordinatesInput {
    groupId: String!
    artifactId: String!
    version: String!
}

type ActionDescriptor {
    name: String!
    description: String
    type: String!
    supportsJoin: Boolean!
    schema: JSON
    docsMarkdown: String
}

input ActionDescriptorInput {
    name: String!
    description: String
    type: String!
    supportsJoin: Boolean!
    schema: JSON
}

type PluginImageRepository {
    "The base of the image repository to pull from for one or more plugin groups (i.e. docker.io/deltafi)"
    imageRepositoryBase: String!
    "The plugin groups whose images are hosted in this repository"
    pluginGroupIds: [String]!
    "An optional secret used to pull from this repository"
    imagePullSecret: String
}

input PluginImageRepositoryInput {
    "The base of the image repository to pull from for one or more plugin groups (i.e. docker.io/deltafi)"
    imageRepositoryBase: String!
    "The plugin groups whose images are hosted in this repository"
    pluginGroupIds: [String]!
    "An optional secret used to pull from this repository"
    imagePullSecret: String
}

extend type Query {
    "Get all of the configured plugin image repositories"
    getPluginImageRepositories: [PluginImageRepository]!
}

extend type Mutation {
    "Add an image repository for one or more groups of plugins"
    savePluginImageRepository(pluginImageRepository: PluginImageRepositoryInput!): PluginImageRepository!

    "Remove an image repository for one or more groups of plugins"
    removePluginImageRepository(id: String!): Result!

    "Install the plugin with the given coordinates"
    installPlugin(pluginCoordinates: PluginCoordinatesInput!): Result!

    "Install the plugin with optional overrides for stored fields"
    installPluginWithSettings(pluginCoordinates: PluginCoordinatesInput!, imageRepositoryOverride: String, imagePullSecretOverride: String, customDeploymentYaml: String): Result!

    "Uninstall the plugin with the given coordinates"
    uninstallPlugin(pluginCoordinates: PluginCoordinatesInput!): Result!

    "Helper to create a basic opaque secret"
    addBasicCredential(sourceName: String!, username: String!, password: String!): Result!
}
