#
#    DeltaFi - Data transformation and enrichment platform
#
#    Copyright 2021-2023 DeltaFi Contributors <deltafi@deltafi.org>
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#

type BackOff {
    delay: Int!
    maxDelay: Int
    multiplier: Int
    random: Boolean
}

input BackOffInput {
    delay: Int!
    maxDelay: Int
    multiplier: Int
    random: Boolean
}

type ResumePolicy {
    id: String!
    name: String!
    errorSubstring: String
    flow: String
    action: String
    actionType: String
    maxAttempts: Int!
    priority: Int
    backOff: BackOff!
}

input ResumePolicyInput {
    id: String
    name: String!
    errorSubstring: String
    flow: String
    action: String
    actionType: String
    maxAttempts: Int!
    priority: Int
    backOff: BackOffInput!
}

extend type Query {
    getAllResumePolicies: [ResumePolicy!]!
    getResumePolicy(id: String!): ResumePolicy
}

extend type Mutation {
  loadResumePolicies(replaceAll: Boolean!, policies: [ResumePolicyInput!]!): [Result!]!
    removeResumePolicy(id: String!) : Boolean!
    updateResumePolicy(resumePolicy: ResumePolicyInput!) : Result!
}
