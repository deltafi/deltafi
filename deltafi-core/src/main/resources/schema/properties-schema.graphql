#
#    DeltaFi - Data transformation and enrichment platform
#
#    Copyright 2021-2023 DeltaFi Contributors <deltafi@deltafi.org>
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#

enum PropertySource {
    EXTERNAL
    MONGO
    DEFAULT
}

type Property {
    key: String!                    # property key
    description: String!            # describe what this property does
    defaultValue: String            # value used if no value is set in git or mongo
    refreshable: Boolean!           # will apps automatically pick up changes to this property
    editable: Boolean! @deprecated(reason: "all properties will be editable")
    hidden: Boolean! @deprecated(reason: "all properties will be visible")
    value: String                   # value as set in git/file-system or mongo
    propertySource: PropertySource! # where the property was set (external for git/filesystem or mongo)
}

input PropertyInput {
    key: String!                    # property key
    description: String!            # describe what this property does
    defaultValue: String            # value used if no value is set in git or mongo
    refreshable: Boolean!           # will apps automatically pick up changes to this property
    editable: Boolean! @deprecated(reason: "all properties will be editable")
    hidden: Boolean! @deprecated(reason: "all properties will be visible")
    value: String                   # value as set in git/file-system or mongo
    propertySource: PropertySource  # not needed here but allows the Property class to be reused for input
}

type PropertySet {
    id: String!
    displayName: String!
    description: String!
    properties: [Property]!
}

input PropertySetInput {
    id: String!
    displayName: String!
    description: String!
    properties: [PropertyInput]!
}

input PropertyUpdate {
    propertySetId: String!
    key: String!
    value: String!
}

input PropertyId {
    propertySetId: String!
    key: String!
}

enum PropertyType {
    ACTION_QUEUE_THRESHOLD
    AGE_OFF_DAYS
    CONTENT_STORAGE_THRESHOLD
    CORE_SERVICE_THREADS
    DELETE_BATCH_SIZE
    DELETE_FREQUENCY
    DELETE_ON_COMPLETION
    DELTAFILE_CACHE_ENABLED
    DELTAFILE_CACHE_SYNC_SECONDS
    IMAGE_PULL_SECRET
    IMAGE_REPOSITORY_BASE
    INGRESS_DISK_SPACE_REQUIRED
    INGRESS_ENABLED
    METRICS_ENABLED
    REQUEUE_SECONDS
    AUTO_RESUME_CHECK_FREQUENCY
    SCHEDULER_POOL_SIZE
    SECURITY_BANNER_BACKGROUND_COLOR
    SECURITY_BANNER_ENABLED
    SECURITY_BANNER_TEXT
    SECURITY_BANNER_TEXT_COLOR
    SYSTEM_NAME
    TOP_BAR_BACKGROUND_COLOR
    TOP_BAR_TEXT_COLOR
    UI_USE_UTC
}

type DeleteProperties {
    ageOffDays: Int!
    frequency: String!
    policyBatchSize: Int!
}

type IngressProperties {
    enabled: Boolean!
    diskSpaceRequirementInMb: Long!
}

type MetricsProperties {
    enabled: Boolean!
}

type PluginProperties {
    imageRepositoryBase: String
    imagePullSecret: String
}

type SystemCheckProperties {
    actionQueueSizeThreshold: Int!
    contentStoragePercentThreshold: Int!
}
type Link {
    name: String!
    url: String!
    description: String
}

type TopBar {
    backgroundColor: String
    textColor: String
}

type SecurityBanner {
    text: String
    backgroundColor: String
    textColor: String
    enabled: Boolean!
}

type UiProperties {
    useUTC: Boolean!
    deltaFileLinks: [Link]!
    externalLinks: [Link]!
    topBar: TopBar!
    securityBanner: SecurityBanner!
}

input DeletePropertiesInput {
    ageOffDays: Int!
    frequency: String!
    policyBatchSize: Int!
}

input IngressPropertiesInput {
    enabled: Boolean!
    diskSpaceRequirementInMb: Long!
}

input MetricsPropertiesInput {
    enabled: Boolean!
}

input PluginPropertiesInput {
    imageRepositoryBase: String
    imagePullSecret: String
}

input SystemCheckPropertiesInput {
    actionQueueSizeThreshold: Int!
    contentStoragePercentThreshold: Int!
}

input LinkInput {
    name: String!
    url: String!
    description: String
}

input TopBarInput {
    backgroundColor: String
    textColor: String
}

input SecurityBannerInput {
    text: String
    backgroundColor: String
    textColor: String
    enabled: Boolean!
}

input UiPropertiesInput {
    useUTC: Boolean!
    deltaFileLinks: [LinkInput]
    externalLinks: [LinkInput]
    topBar: TopBarInput!
    securityBanner: SecurityBannerInput!
}

type DeltaFiProperties {
    systemName: String!
    requeueSeconds: Int!
    autoResumeCheckFrequency: String!
    coreServiceThreads: Int!
    scheduledServiceThreads: Int!
    delete: DeleteProperties!
    ingress: IngressProperties!
    metrics: MetricsProperties!
    plugins: PluginProperties!
    checks: SystemCheckProperties!
    ui: UiProperties!
    setProperties: [PropertyType]!
}

input DeltaFiPropertiesInput {
    systemName: String!
    requeueSeconds: Int!
    autoResumeCheckFrequency: String!
    coreServiceThreads: Int!
    scheduledServiceThreads: Int!
    delete: DeletePropertiesInput!
    ingress: IngressPropertiesInput!
    metrics: MetricsPropertiesInput!
    plugins: PluginPropertiesInput!
    checks: SystemCheckPropertiesInput!
    ui: UiPropertiesInput!
    setProperties: [PropertyType]!
}

extend type Query {
    getPropertySets: [PropertySet]!
    getDeltaFiProperties: DeltaFiProperties!
}

extend type Mutation {
    updateProperties(updates: [PropertyUpdate]!): Boolean!
    removePropertyOverrides(propertyIds: [PropertyId]!): Boolean!
    saveExternalLink(link: LinkInput!): Boolean!
    saveDeltaFileLink(link: LinkInput!): Boolean!
    removeExternalLink(linkName: String!): Boolean!
    removeDeltaFileLink(linkName: String!): Boolean!
}
