create table if not exists actions (attempt integer not null, number integer not null, replay_start boolean not null, version integer not null, created timestamp(6) with time zone, error_acknowledged timestamp(6) with time zone, modified timestamp(6) with time zone, next_auto_resume timestamp(6) with time zone, queued timestamp(6) with time zone, start timestamp(6) with time zone, stop timestamp(6) with time zone, delta_file_flow_id uuid, id uuid not null, error_cause varchar(100000), error_context varchar(100000), filtered_cause varchar(100000), filtered_context varchar(100000), error_acknowledged_reason varchar(255), name varchar(255), next_auto_resume_reason varchar(255), state varchar(255) check (state in ('COLD_QUEUED','QUEUED','COMPLETE','ERROR','RETRIED','FILTERED','SPLIT','CANCELLED','JOINING','JOINED','INHERITED')), type varchar(255) check (type in ('INGRESS','TIMED_INGRESS','TRANSFORM','EGRESS','PUBLISH','UNKNOWN')), content jsonb, delete_metadata_keys jsonb, metadata jsonb, primary key (id));
create table if not exists  annotations (delta_file_id uuid, id uuid not null, key varchar(255), value varchar(255), primary key (id));
create table if not exists  delete_policies (delete_metadata boolean, enabled boolean not null, max_percent integer, min_bytes bigint, id uuid not null, policy_type varchar(31) not null, after_complete varchar(255), after_create varchar(255), flow varchar(255), name varchar(255) not null unique, primary key (id));
create table if not exists  delta_file_flows (depth integer not null, number integer not null, test_mode boolean not null, created timestamp(6) with time zone, modified timestamp(6) with time zone, version bigint not null, delta_file_id uuid, id uuid not null, join_id uuid, name varchar(255), state varchar(255) check (state in ('IN_FLIGHT','PENDING_ANNOTATIONS','COMPLETE','ERROR','CANCELLED')), test_mode_reason varchar(255), type varchar(255) check (type in ('REST_DATA_SOURCE','TIMED_DATA_SOURCE','TRANSFORM','EGRESS')), flow_plan jsonb, input jsonb, pending_actions jsonb, pending_annotations jsonb, publish_topics jsonb, primary key (id));
create table if not exists  delta_files (content_deletable boolean not null, egressed boolean, filtered boolean, requeue_count integer not null, terminal boolean not null, content_deleted timestamp(6) with time zone, created timestamp(6) with time zone, ingress_bytes bigint not null, modified timestamp(6) with time zone, referenced_bytes bigint not null, replayed timestamp(6) with time zone, total_bytes bigint not null, version bigint not null, did uuid not null, join_id uuid, replay_did uuid, content_deleted_reason varchar(255), data_source varchar(255), name varchar(255), normalized_name varchar(255), stage varchar(255) check (stage in ('IN_FLIGHT','COMPLETE','ERROR','CANCELLED')), child_dids jsonb, parent_dids jsonb, primary key (did));
create table if not exists  events (acknowledged boolean not null, notification boolean not null, timestamp timestamp(6) with time zone, id uuid not null, content varchar(100000), severity varchar(255), source varchar(255), summary varchar(255), primary key (id));
create table if not exists  flow_plans (id uuid not null, discriminator varchar(31) not null, description varchar(100000), cron_schedule varchar(255), name varchar(255), topic varchar(255), type varchar(255) check (type in ('REST_DATA_SOURCE','TIMED_DATA_SOURCE','TRANSFORM','EGRESS')), egress_action jsonb, publish jsonb, source_plugin jsonb, subscribe jsonb, timed_ingress_action jsonb, transform_actions jsonb, primary key (id), unique (name, type));
create table if not exists  flows (execute_immediate boolean, max_errors integer, last_run timestamp(6) with time zone, next_run timestamp(6) with time zone, current_did uuid, id uuid not null, discriminator varchar(31) not null, description varchar(100000), cron_schedule varchar(255), ingress_status varchar(255) check (ingress_status in ('HEALTHY','DEGRADED','UNHEALTHY')), ingress_status_message varchar(255), memo varchar(255), name varchar(255), topic varchar(255), type varchar(255) check (type in ('REST_DATA_SOURCE','TIMED_DATA_SOURCE','TRANSFORM','EGRESS')), egress_action jsonb, expected_annotations jsonb, flow_status jsonb, publish jsonb, source_plugin jsonb, subscribe jsonb, timed_ingress_action jsonb, transform_actions jsonb, variables jsonb, primary key (id), unique (name, type));
create table if not exists  join_entries (count integer not null, locked boolean not null, max_flow_depth integer not null, max_num integer, min_num integer, join_date timestamp(6) with time zone, locked_time timestamp(6) with time zone, id uuid not null, join_definition jsonb, primary key (id), constraint unique_join_definition unique (join_definition));
create table if not exists  join_entry_dids (did uuid not null, id uuid not null, join_entry_id uuid, primary key (id));
create table if not exists  links (id uuid not null, description varchar(255), link_type varchar(255) check (link_type in ('EXTERNAL','DELTAFILE_LINK')), name varchar(255), url varchar(255), primary key (id), unique (name, link_type));
create table if not exists  plugin_image_repository (image_pull_secret varchar(255), image_repository_base varchar(255) not null, plugin_group_ids jsonb, primary key (image_repository_base), unique (plugin_group_ids));
create table if not exists  plugin_variables (id uuid not null, artifact_id varchar(255), group_id varchar(255), version varchar(255), variables jsonb, primary key (id), unique (group_id, artifact_id, version));
create table if not exists  plugins (action_kit_version varchar(255), artifact_id varchar(255) not null, description varchar(255), display_name varchar(255), group_id varchar(255) not null, version varchar(255) not null, actions jsonb, dependencies jsonb, primary key (artifact_id, group_id, version));
create table if not exists  properties (refreshable boolean not null, custom_value varchar(255), default_value varchar(255), description varchar(255), key varchar(255) not null, primary key (key));
create table if not exists  queued_annotations (allow_overwrites boolean not null, time timestamp(6) with time zone not null, did uuid not null, id uuid not null, annotations jsonb, primary key (id));
create table if not exists  resume_policies (action_type smallint check (action_type between 0 and 5), max_attempts integer not null, priority integer, id uuid not null, action varchar(255), data_source varchar(255), error_substring varchar(255), name varchar(255) not null unique, back_off jsonb, primary key (id), unique (error_substring, action, action_type));
create table if not exists  system_snapshot (created timestamp(6) with time zone, id uuid not null, reason varchar(255), delete_policies jsonb, delta_fi_properties jsonb, egress_flows jsonb, installed_plugins jsonb, links jsonb, plugin_image_repositories jsonb, plugin_variables jsonb, rest_data_sources jsonb, resume_policies jsonb, timed_data_sources jsonb, transform_flows jsonb, primary key (id));
create table if not exists  test_results (start timestamp(6) with time zone, stop timestamp(6) with time zone, description varchar(255), id varchar(255) not null, status varchar(255) check (status in ('INVALID','STARTED','SUCCESSFUL','FAILED')), errors jsonb, primary key (id));
create index if not exists  idx_action on actions (delta_file_flow_id, state, type, name, error_acknowledged);
create index if not exists  idx_action_state on actions (state, delta_file_flow_id);
create index if not exists  idx_annotations on annotations (key, value);
create index if not exists  idx_annotations_did on annotations (delta_file_id);
create index if not exists  idx_flow on delta_file_flows (delta_file_id, state, name, test_mode, pending_annotations);
create index if not exists  idx_flow_state on delta_file_flows (state, delta_file_id);
create index if not exists  idx_created on delta_files (created, stage, data_source, normalized_name, egressed, filtered, terminal, ingress_bytes);
create index if not exists  idx_modified on delta_files (modified, stage, data_source, normalized_name, egressed, filtered, terminal, ingress_bytes);
create index if not exists  idx_delta_files_stage_in_flight on delta_files ((stage = 'IN_FLIGHT'));
create index if not exists  idx_delta_files_stage_error on delta_files ((stage = 'ERROR'));
create index if not exists  idx_delta_files_content_deletable on delta_files using btree (modified, data_source) where (content_deletable = true);
create index if not exists  idx_actions_error_count on actions (state, error_acknowledged) where state = 'ERROR' and error_acknowledged is null;
create index if not exists  idx_actions_cold_queued on actions (name, type) where state = 'COLD_QUEUED';
create index if not exists  idx_actions_auto_resume_flow_sparse on actions (next_auto_resume, delta_file_flow_id) where next_auto_resume is not null;