plugins {
    id "com.netflix.dgs.codegen" version "${dgsCodegenVersion}"
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.springframework.boot' version "${springBootVersion}"
    id "com.palantir.docker" version "${palantirDockerVersion}"
    id "com.github.hierynomus.license" version "${hierynomusLicenseVersion}"
}
license {
    excludes(excludeFromLicense)
    header(rootProject.file('HEADER'))
    mapping("graphql", "SCRIPT_STYLE")
}

bootJar {
    archiveFileName = "${project.name}.jar"
}

jar {
    archiveClassifier = '' // boot plugin set this to plain, clear it
    include('org/deltafi/config/server/api/**')
}

generateJava {
    packageName = 'org.deltafi.config.server.api.generated'
    generateClient = true
    generateDataTypes = false
    typeMapping = [
            "Property": "org.deltafi.config.server.api.domain.Property",
            "PropertyId": "org.deltafi.config.server.api.domain.PropertyId",
            "PropertySource": "org.deltafi.config.server.api.domain.PropertySource",
            "PropertyUpdate": "org.deltafi.config.server.api.domain.PropertyUpdate",
            "PropertyInput": "org.deltafi.config.server.api.domain.Property",
            "PropertySet": "org.deltafi.config.server.api.domain.PropertySet",
            "PropertySetInput": "org.deltafi.config.server.api.domain.PropertySet"
    ]
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2021.0.0'
    }
}

dependencies {
    implementation(platform("com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:${dgsVersion}")) {
        because 'DGS BOM to automatically define versions of other packages below'
    }

    implementation "com.netflix.graphql.dgs:graphql-dgs-extended-scalars"
    implementation "com.netflix.graphql.dgs:graphql-dgs-spring-boot-starter"

    implementation 'org.springframework.cloud:spring-cloud-config-server'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.springframework.boot:spring-boot-starter-data-mongodb"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:mongodb:1.16.3'
    testImplementation 'org.testcontainers:testcontainers:1.16.3'
    testImplementation 'org.testcontainers:junit-jupiter:1.16.3'
    testImplementation project(':deltafi-common-test')
}

task copyProbe(type: Copy) {
    from ('.')
    include "probe.sh"
    destinationDir file('build/docker')
}

dockerPrepare {
    dependsOn compileJava
    dependsOn assemble
    finalizedBy copyProbe
}

docker {
    name "${project.name}:${project.version}"
    copySpec.from("build/libs/").into("build/libs/")
}
