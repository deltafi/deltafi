plugins {
    id "com.netflix.dgs.codegen" version "${dgsCodegenVersion}"
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.springframework.boot' version '2.4.5'
    id "com.palantir.docker" version "${palantirDockerVersion}"
}

task renameJar (type: Copy) {
    from ('build/libs/')
    include "deltafi-config-server-${project.version}.jar"
    destinationDir file('build/libs/')
    rename "deltafi-config-server-${project.version}.jar", 'deltafi-config-server.jar'
}

assemble.finalizedBy(renameJar)

jar {
    enabled = true
    archiveClassifier.set('api')
    include('org/deltafi/config/server/api/**')
}

configurations {
    jars
}

artifacts {
    jars jar
}

generateJava {
    packageName = 'org.deltafi.config.server.api.generated'
    generateClient = true
    generateDataTypes = false
    typeMapping = [
            "Property": "org.deltafi.config.server.api.domain.Property",
            "PropertySource": "org.deltafi.config.server.api.domain.PropertySource",
            "PropertyUpdate": "org.deltafi.config.server.api.domain.PropertyUpdate",
            "PropertyInput": "org.deltafi.config.server.api.domain.Property",
            "PropertySet": "org.deltafi.config.server.api.domain.PropertySet",
            "PropertySetInput": "org.deltafi.config.server.api.domain.PropertySet"
    ]
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2020.0.3'
    }
}

dependencies {
    // Use DGS BOM to automatically define versions of other packages below
    implementation(platform("com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:${dgsVersion}")) {
        because 'DGS BOM to automatically define versions of other packages below'
    }

    implementation "com.netflix.graphql.dgs:graphql-dgs-extended-scalars"
    implementation "com.netflix.graphql.dgs:graphql-dgs-spring-boot-starter"

    implementation 'org.springframework.cloud:spring-cloud-config-server'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.springframework.boot:spring-boot-starter-data-mongodb"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "de.flapdoodle.embed:de.flapdoodle.embed.mongo:2.2.0"
}

docker {
    dependsOn compileJava
    dependsOn build
    name "${project.name}:${project.version}"
    copySpec.from("build/libs/").into("build/libs/")
}