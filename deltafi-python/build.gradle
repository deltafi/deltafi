plugins {
    id 'license-plain'
}

license {
    includes(["**/*.py"])
}

task copyTemplate(type: Copy) {
    from file('src/pyproject.toml.template')
    into 'src'
    rename { 'pyproject.toml' }
}
licenseLocal.dependsOn copyTemplate

task checkUvInstallation {
    description = 'Checks if uv is installed, prompts for installation if missing'
    group = 'verification'

    doLast {
        def uvInstalled = isUvInstalled()

        if (uvInstalled) {
            println "✓ uv is already installed and available"
            return
        }

        println "✗ uv is not installed or not in PATH"
        printInstallationInstructions()
        throw new GradleException("uv is required but not installed")
    }
}

task uvVirtualEnvironment(type: Exec) {
    dependsOn checkUvInstallation
    workingDir 'src'
    def venvDir = file('src/.venv')
    onlyIf {
        !venvDir.exists()
    }
    commandLine 'uv', 'venv', '--system-site-packages'
}

task uvVersion(type: Exec) {
    dependsOn copyTemplate, uvVirtualEnvironment
    workingDir 'src'
    String pythonVersion = version.replaceAll('-.*', "rc${new Date().format('yyyyMMddHHmmss')}")
    commandLine 'uv', 'version', '--frozen', "${pythonVersion}"
}

task cleanDist(type: Delete) {
    delete 'src/dist'
}

task cleanVirtualEnvironment(type: Delete) {
    delete 'src/.venv', '.venv', 'src/venv', 'venv'
}

task uvDependencies(type: Exec) {
    dependsOn uvVersion
    workingDir 'src'
    commandLine 'uv', 'pip', 'install', '-e', '.[test]'
}

task verifyDependencies(type: Exec) {
    dependsOn uvDependencies
    workingDir 'src'
    commandLine 'uv', 'run', '--frozen', 'python', '-c', 'import redis, minio, pydantic; print("Dependencies installed successfully")'
}

task uvBuild(type: Exec) {
    dependsOn cleanDist, uvVersion
    workingDir 'src'
    commandLine 'uv', 'build'
}

task test(type: Exec) {
    dependsOn verifyDependencies
    workingDir 'src'
    commandLine 'uv', 'run', '--frozen', 'pytest', '--junit-xml=../build/test-results/test/TEST-results.xml'
}

task publishToMavenLocal {}
publishToMavenLocal.dependsOn uvBuild

clean.dependsOn cleanDist
clean.dependsOn cleanVirtualEnvironment

assemble.dependsOn uvBuild

// uv installation support

def isUvInstalled() {
    try {
        def result = exec {
            commandLine 'uv', '--version'
            ignoreExitValue = true
            standardOutput = new ByteArrayOutputStream()
            errorOutput = new ByteArrayOutputStream()
        }
        return result.exitValue == 0
    } catch (Exception e) {
        return false
    }
}

def printInstallationInstructions() {
    def os = System.getProperty('os.name').toLowerCase()

    println "\n" + "=".repeat(60)
    println "UV INSTALLATION REQUIRED"
    println "=".repeat(60)

    if (os.contains('windows')) {
        println "For Windows, run this in PowerShell:"
        println "  irm https://astral.sh/uv/install.ps1 | iex"
    } else {
        if (isHomebrewAvailable()) {
            println "You have Homebrew installed. Run:"
            println "  brew install uv"
        } else {
            println "Install via curl (recommended):"
            println "  curl -LsSf https://astral.sh/uv/install.sh | sh"
            println ""
            println "Or install Homebrew first, then use:"
            println "  brew install uv"
        }
    }

    println ""
    println "After installation, run this task again:"
    println "  ./gradlew checkUvInstallation"
    println "=".repeat(60)
}

def isHomebrewAvailable() {
    try {
        def result = exec {
            commandLine 'brew', '--version'
            ignoreExitValue = true
            standardOutput = new ByteArrayOutputStream()
            errorOutput = new ByteArrayOutputStream()
        }
        return result.exitValue == 0
    } catch (Exception e) {
        return false
    }
}
