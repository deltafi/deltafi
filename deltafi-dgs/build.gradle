plugins {
	id 'com.netflix.dgs.codegen' version '4.4.3'
	id 'com.github.ben-manes.versions' version '0.38.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
	id 'maven-publish'
	id 'org.springframework.boot' version '2.4.5'
}

java {
    sourceCompatibility = javaSourceCompatibility
    targetCompatibility = javaTargetCompatibility
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

jar {
	enabled = true
	archiveClassifier.set('api')
	include('org/deltafi/dgs/api/**')
	include('org/deltafi/dgs/generated/client/**')
	include('org/deltafi/dgs/generated/types/**')
}

configurations {
	jars
}

artifacts {
	jars jar
}

generateJava {
    packageName = 'org.deltafi.dgs.generated'
    generateClient = true
    typeMapping = [
      deltaFile: "org.deltafi.dgs.api.types.DeltaFile",
      feedStats: "org.deltafi.dgs.services.FeedStats"
    ]
}

publishing {
	publications {
		java(MavenPublication) {
			artifact jar
		}
	}
	repositories {
		if(project.hasProperty('gitLabTokenType') && project.hasProperty('gitLabToken')) {
			maven {
				url projectMavenRepo
				credentials(HttpHeaderCredentials) {
					// the following variable reside in ~/.gradle/gradle.properties
					name = gitLabTokenType
					value = gitLabToken
				}
				authentication {
					header(HttpHeaderAuthentication)
				}
			}
		}
	}
}

dependencies {
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	implementation project(":deltafi-common")
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.retry:spring-retry'

	// Use DGS BOM to automatically define versions of other packages below
	implementation(platform('com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:4.2.0')) {
		because 'DGS BOM to automatically define versions of other packages below'
	}

	implementation 'com.netflix.graphql.dgs:graphql-dgs-extended-scalars'
	implementation 'com.netflix.graphql.dgs:graphql-dgs-spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	implementation 'net.logstash.logback:logstash-logback-encoder:6.6'
	implementation 'ch.qos.logback:logback-classic'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:2.2.0'
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.enabled true
		csv.enabled true
		html.destination layout.buildDirectory.dir('jacocoHtmlReport').get().asFile
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: ['org/deltafi/dgs/generated/**', '**/*Application.class'])
		}))
	}

}

jacoco {
	reportsDirectory.set(layout.buildDirectory.dir('jacocoReport'))
}
