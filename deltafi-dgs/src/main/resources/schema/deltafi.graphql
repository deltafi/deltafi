scalar DateTime

interface DeltaFiDomain {
  did: String!
}

interface DeltaFiEnrichment {
  did: String!
}

type KeyValue {
  key: String!
  value: String
}

input KeyValueInput {
  key: String!
  value: String
}

type SourceInfo {
  filename: String!
  flow: String!
  metadata: [KeyValue!]
}

input SourceInfoInput {
  filename: String!
  flow: String!
  metadata: [KeyValueInput!]
}

type ObjectReference {
  name: String!
  bucket: String!
  offset: Int!
  size: Int!
}

type ProtocolLayer {
  type: String!
  objectReference: ObjectReference!
  metadata: [KeyValue!]
}

input ObjectReferenceInput {
  name: String!
  bucket: String!
  offset: Int!
  size: Int!
}

input ProtocolLayerInput {
  type: String!
  objectReference: ObjectReferenceInput!
  metadata: [KeyValueInput!]
}

type DeltaFiDomains @key(fields: "did") {
  did: String!
  domainTypes: [String!]!
  sampleDomain: SampleDomain
}

type DeltaFiEnrichments @key(fields: "did")  {
  did: String!
  enrichmentTypes: [String!]!
  sampleEnrichment: SampleEnrichment
}

type FormattedData {
  filename: String!
  formatAction: String!
  metadata: [KeyValue!]
  objectReference: ObjectReference!
}

input FormatResultInput {
  filename: String!
  metadata: [KeyValueInput!]
  objectReference: ObjectReferenceInput!
}

enum DeltaFileStage {
  INGRESS
  TRANSFORM
  LOAD
  ENRICH
  FORMAT
  VALIDATE
  EGRESS
  COMPLETE
  ERROR
  DELETE
}

enum ActionState {
  QUEUED
  DISPATCHED
  COMPLETE
  ERROR
}

type ActionEvent {
  state: ActionState!
  time: DateTime!
  errorMessage: String
}

type Action {
  name: String!
  state: ActionState!
  history: [ActionEvent!]!
  created: DateTime!
  modified: DateTime!
  errorMessage: String
}

type DeltaFile {
  did: String!
  stage: String!
  actions: [Action!]!
  sourceInfo: SourceInfo!
  protocolStack: [ProtocolLayer]!
  domains: DeltaFiDomains!
  enrichment: DeltaFiEnrichments!
  formattedData: [FormattedData]!
  created: DateTime!
  modified: DateTime!
  markedForDelete: DateTime
  markedForDeleteReason: String
}

type FeedStats {
  actionName : String!
  recentQueryTimes : [DateTime]!
  numQueries : Int
}

enum ConfigType {
  TRANSFORM_ACTION
  LOAD_ACTION
  LOAD_ACTION_GROUP
  ENRICH_ACTION
  FORMAT_ACTION
  VALIDATE_ACTION
  EGRESS_ACTION
  INGRESS_FLOW
  EGRESS_FLOW
  DOMAIN_ENDPOINT
}

interface DeltaFiConfiguration {
  name: String!
  created: DateTime!
  modified: DateTime!
  apiVersion: String
}

input ConfigQueryInput {
  configType: ConfigType!
  name: String
  apiVersion: String
}

type IngressFlowConfiguration implements DeltaFiConfiguration {
  name: String!
  created: DateTime!
  modified: DateTime!
  apiVersion: String
  type: String!
  transformActions: [String]!
  loadActions: [String]!
}

input IngressFlowConfigurationInput {
  name: String!
  apiVersion: String
  type: String!
  transformActions: [String]!
  loadActions: [String]!
}

type EgressFlowConfiguration implements DeltaFiConfiguration {
  name: String!
  created: DateTime!
  modified: DateTime!
  apiVersion: String
  egressAction: String!
  formatAction: String!
  validateActions: [String]
  includeIngressFlows: [String]
  excludeIngressFlows: [String]
}

input EgressFlowConfigurationInput {
  name: String!
  formatAction: String!
  apiVersion: String
  validateActions: [String]
  includeIngressFlows: [String]
  excludeIngressFlows: [String]
}

type TransformActionConfiguration implements DeltaFiConfiguration {
  name: String!
  created: DateTime!
  modified: DateTime!
  apiVersion: String
  consumes: String!
  produces: String!
}

input TransformActionConfigurationInput {
  name: String!
  apiVersion: String
  consumes: String!
  produces: String!
}

type LoadActionConfiguration implements DeltaFiConfiguration {
  name: String!
  created: DateTime!
  modified: DateTime!
  apiVersion: String
  consumes: String!
  requiresMetadataKeyValues: [KeyValue]
}

input LoadActionConfigurationInput {
  name: String!
  apiVersion: String
  consumes: String!
  requiresMetadataKeyValues: [KeyValueInput]
}

type EnrichActionConfiguration implements DeltaFiConfiguration {
  name: String!
  created: DateTime!
  modified: DateTime!
  apiVersion: String
  requiresDomains: [String]!
  requiresEnrichment: [String]
}

input EnrichActionConfigurationInput {
  name: String!
  apiVersion: String
  requiresDomains: [String]!
  requiresEnrichment: [String]
}

type FormatActionConfiguration implements DeltaFiConfiguration {
  name: String!
  created: DateTime!
  modified: DateTime!
  apiVersion: String
  requiresDomains: [String]!
  requiresEnrichment: [String]
}

input FormatActionConfigurationInput {
  name: String!
  apiVersion: String
  requiresDomains: [String]!
  requiresEnrichment: [String]
}

type ValidateActionConfiguration implements DeltaFiConfiguration {
  name: String!
  created: DateTime!
  modified: DateTime!
  apiVersion: String
}

input ValidateActionConfigurationInput {
  name: String!
  apiVersion: String
}

type EgressActionConfiguration implements DeltaFiConfiguration {
  name: String!
  created: DateTime!
  modified: DateTime!
  apiVersion: String
}

input EgressActionConfigurationInput {
  name: String!
  apiVersion: String
}

type LoadActionGroupConfiguration implements DeltaFiConfiguration {
  name: String!
  created: DateTime!
  modified: DateTime!
  apiVersion: String
  loadActions: [String]!
}

input LoadActionGroupConfigurationInput {
  name: String!
  apiVersion: String
  loadActions: [String]!
}

type DomainEndpointConfiguration implements DeltaFiConfiguration {
  name: String!
  created: DateTime!
  modified: DateTime!
  apiVersion: String
  url: String!
  domainVersion: String
}

input DomainEndpointConfigurationInput {
  name: String!
  apiVersion: String
  url: String!
  domainVersion: String
}

type Query {
  deltaFile(did: String!): DeltaFile
  actionFeed(action: String!, limit: Int, dryRun: Boolean) : [DeltaFile]!
  lastCreated(last: Int) : [DeltaFile]!
  lastModified(last: Int) : [DeltaFile]!
  lastErrored(last: Int) : [DeltaFile]!
  lastWithFilename(filename: String!) : DeltaFile

  # feed stats are for debug purposes and do not persist across DGS restarts
  feedStats(forAction: String) : [FeedStats]!

  deltaFiConfig(configQuery: ConfigQueryInput) : [DeltaFiConfiguration]!
}

type Mutation {
  ingress(sourceInfo: SourceInfoInput!, objectReference: ObjectReferenceInput!): DeltaFile!
  transform(did: String!, fromTransformAction: String!, protocolLayer: ProtocolLayerInput!): DeltaFile!

  # Load and enrich mutations record the fact of these domain-driven events
  # Prior to calling them, an Action should write domain-specific records under the DeltaFile
  load(did: String!, fromLoadAction: String!, domains: [String!]): DeltaFile!
  enrich(did: String!, fromEnrichAction: String!, enrichments: [String!]): DeltaFile!

  format(did: String!, fromFormatAction: String!, formatResult: FormatResultInput!): DeltaFile!
  validate(did: String!, fromValidateAction: String!): DeltaFile!
  egress(did: String!, fromEgressAction: String!): DeltaFile!

  error(did: String!, fromAction: String!, message: String!) : DeltaFile!
  retry(did: String!) : DeltaFile!

  # The caller is responsible for removing all data, domains, and enrichment corresponding to this DeltaFile before calling this mutation
  # Failure to do so may result in orphaned data and metadata
  delete(dids: [String!]!) : [String!]!

  registerTransformAction(transformActionConfiguration: TransformActionConfigurationInput!): TransformActionConfiguration!
  registerLoadAction(loadActionConfiguration: LoadActionConfigurationInput!): LoadActionConfiguration!
  registerEnrichAction(enrichActionConfiguration: EnrichActionConfigurationInput!): EnrichActionConfiguration!
  registerFormatAction(formatActionConfiguration: FormatActionConfigurationInput!): FormatActionConfiguration!
  registerValidateAction(validateActionConfiguration: ValidateActionConfigurationInput!): ValidateActionConfiguration!
  registerEgressAction(egressActionConfiguration: EgressActionConfigurationInput!): EgressActionConfiguration!
  registerDomainEndpoint(domainEndpointConfiguration: DomainEndpointConfigurationInput!): DomainEndpointConfiguration!

  addLoadActionGroup(loadActionGroupConfiguration: LoadActionGroupConfigurationInput!): LoadActionGroupConfiguration!
  addIngressFlow(ingressFlowConfiguration: IngressFlowConfigurationInput!): IngressFlowConfiguration!
  addEgressFlow(egressFlowConfiguration: EgressFlowConfigurationInput!): EgressFlowConfiguration!

  removeConfig(configQuery: ConfigQueryInput): Int!
}
