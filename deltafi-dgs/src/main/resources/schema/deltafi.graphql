scalar DateTime
scalar JSON
scalar Long

type KeyValue {
  key: String!
  value: String
}

input KeyValueInput {
  key: String!
  value: String
}

type SourceInfo {
  filename: String!
  flow: String!
  metadata: [KeyValue!]
}

input SourceInfoInput {
  filename: String!
  flow: String!
  metadata: [KeyValueInput!]
}

type ObjectReference {
  name: String!
  bucket: String!
  offset: Long!
  size: Long!
}

type ProtocolLayer {
  type: String!
  objectReference: ObjectReference!
  metadata: [KeyValue!]
}

input ObjectReferenceInput {
  name: String!
  bucket: String!
  offset: Long!
  size: Long!
}

input ProtocolLayerInput {
  type: String!
  objectReference: ObjectReferenceInput!
  metadata: [KeyValueInput!]
}

type FormattedData {
  filename: String!
  formatAction: String!
  metadata: [KeyValue!]
  objectReference: ObjectReference!
  egressActions: [String!]!
}

enum DeltaFileStage {
  INGRESS
  EGRESS
  COMPLETE
  ERROR
  DELETE
}

enum ActionState {
  QUEUED
  COMPLETE
  ERROR
  FILTERED
}

type Action {
  name: String!
  state: ActionState!
  created: DateTime!
  modified: DateTime!
  errorCause: String
  errorContext: String
}

enum ActionEventType {
  TRANSFORM
  LOAD
  ENRICH
  FORMAT
  VALIDATE
  EGRESS
  ERROR
  FILTER
}

input ActionEventInput {
  did: String!
  action: String!
  time: DateTime!
  type: ActionEventType!
  transform: TransformInput
  load: LoadInput
  enrich: EnrichInput
  format: FormatInput
  error: ErrorInput
  filter: FilterInput
}

type DeltaFile {
  did: String!
  stage: String!
  actions: [Action!]!
  sourceInfo: SourceInfo!
  protocolStack: [ProtocolLayer]!
  domains: [KeyValue!]!
  enrichment: [KeyValue!]!
  formattedData: [FormattedData]!
  created: DateTime!
  modified: DateTime!
  markedForDelete: DateTime
  markedForDeleteReason: String
}

input IngressInput {
  did: String!
  sourceInfo: SourceInfoInput!
  objectReference: ObjectReferenceInput!
  created: DateTime!
}

input TransformInput {
  protocolLayer: ProtocolLayerInput!
}

input LoadInput {
  domains: [String!]
}

input EnrichInput {
  enrichments: [String!]
}

input FormatInput {
  filename: String!
  metadata: [KeyValueInput!]
  objectReference: ObjectReferenceInput!
}

input FilterInput {
  message: String!
}

type Query {
  deltaFile(did: String!): DeltaFile
  lastCreated(last: Int) : [DeltaFile]!
  lastModified(last: Int) : [DeltaFile]!
  lastErrored(last: Int) : [DeltaFile]!
  lastWithFilename(filename: String!) : DeltaFile

  deltaFiConfigs(configQuery: ConfigQueryInput) : [DeltaFiConfiguration]!
  actionSchemas: [ActionSchema!]!
  exportConfigAsYaml: String!
}

type Mutation {
  ingress(input: IngressInput!): DeltaFile!
  actionEvent(event: ActionEventInput!): DeltaFile!

  retry(did: String!) : DeltaFile!

  # The caller is responsible for removing all data corresponding to this DeltaFile before calling this mutation
  delete(dids: [String!]!) : [String!]!

  registerTransformAction(transformActionConfiguration: TransformActionConfigurationInput!): TransformActionConfiguration!
  registerLoadAction(loadActionConfiguration: LoadActionConfigurationInput!): LoadActionConfiguration!
  registerEnrichAction(enrichActionConfiguration: EnrichActionConfigurationInput!): EnrichActionConfiguration!
  registerFormatAction(formatActionConfiguration: FormatActionConfigurationInput!): FormatActionConfiguration!
  registerValidateAction(validateActionConfiguration: ValidateActionConfigurationInput!): ValidateActionConfiguration!
  registerEgressAction(egressActionConfiguration: EgressActionConfigurationInput!): EgressActionConfiguration!
  registerDomainEndpoint(domainEndpointConfiguration: DomainEndpointConfigurationInput!): DomainEndpointConfiguration!

  registerAction(actionSchema: ActionSchemaInput!): ActionSchema!

  addLoadActionGroup(loadActionGroupConfiguration: LoadActionGroupConfigurationInput!): LoadActionGroupConfiguration!
  addIngressFlow(ingressFlowConfiguration: IngressFlowConfigurationInput!): IngressFlowConfiguration!
  addEgressFlow(egressFlowConfiguration: EgressFlowConfigurationInput!): EgressFlowConfiguration!

  replaceConfig(configYaml: String!): String
  mergeConfig(configYaml: String!): String

  removeDeltaFiConfigs(configQuery: ConfigQueryInput): Int!
}
