# DeltaFi config
deltafi:
  envVars:
    # notation needed spring-boot apps
    - name: DELTAFI_CONFIG_IMPORT
      value: deltafi:mongodb=true&git=false
    # notation needed for quarkus apps
    - name: CONFIG_SERVER_URL
      value: http://deltafi-core-domain-service/config
    - name: REDIS_PASSWORD
      valueFrom:
        secretKeyRef:
          name: redis-password
          key: redis-password
    - name: MINIO_ACCESSKEY
      valueFrom:
        secretKeyRef:
          name: minio-keys
          key: accesskey
    - name: MINIO_SECRETKEY
      valueFrom:
        secretKeyRef:
          name: minio-keys
          key: secretkey
    - name: ACTIONS_HOSTNAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
  core_actions:
    egress_endpoint: http://deltafi-egress-sink-service
    image: deltafi/deltafi-core-actions:0.96.0
    keyStoreSecret: keystore-secret
    keyStorePasswordSecret: keystore-password-secret
    keyStoreMountPath: /etc/pki
  core_domain:
    image: deltafi/deltafi-core-domain:0.96.0
    mongo_host: deltafi-mongodb
    nativeConfigMap: config-server-configmap
    nativeConfigMountPath: /config
    # TODO should we allow nested yaml here and automatically create that config-map?
  ingress:
    image: deltafi/deltafi-ingress:0.96.0
    envVar:
      HTTP_MAX_BODY_SIZE: 5G
  auth:
    image: deltafi/deltafi-auth:0.96.0
    mode: disabled # basic, cert, or disabled
    secret: auth-secret
  api:
    image: deltafi/deltafi-api:0.96.0
  ui:
    image: deltafi/deltafi-ui:0.96.0
    # UI Configuration
    # title: DeltaFi
    # securityBanner:
    #   enabled: true
    #   backgroundColor: "#007a33"
    #   textColor: "#ffffff"
    #   text: "UNCLASSIFIED"
    # topBar:
    #   backgroundColor: "#003559"
    #   textColor: "#dddddd"
    # externalLinks:
    #   - name: GraphQL Documentation
    #     url: https://graphql.org/learn/
    #     description: Introduction to GraphQL
    # deltaFileLinks:
    #   - name: "View in HTTPBin"
    #     url: "https://httpbin.org/anything/${DID}"
  egress_sink:
    image: deltafi/deltafi-egress-sink:0.96.0
  nodemonitor:
    image: deltafi/deltafi-nodemonitor:0.96.0
    envVars:
      - name: GRAPHITE_HOST
        value: deltafi-graphite
      - name: GRAPHITE_PORT
        value: "2003"
      - name: PERIOD
        value: "9"

# Kubernetes ingress config
ingress:
  domain: local.deltafi.org
  tls:
    enabled: false
    secrets:
      default: local-deltafi-org
# MinIO config
minio:
  existingSecret: minio-keys
  resources:
    requests:
      memory: 2Gi
  replicas: 1
  persistence:
    enabled: true
    existingClaim: deltafi-minio
  ingress:
    enabled: false
  service:
    type: NodePort
    port: 9000
  buckets:
    - name: storage
      policy: none
      purge: false
      ilm:
        Rules:
          - Expiration:
              Days: 1
            ID: AgeOff
            Status: Enabled
  makeBucketJob:
    annotations:
      "helm.sh/hook-weight": "1"
  nodeSelector:
    node-role.deltafi.org/storage: "true"
# Values for the MongoDB dependency
mongodb:
  architecture: standalone
  useStatefulSet: false
  auth:
    existingSecret: mongodb-passwords
    enabled: true
    database: deltafi
    username: mongouser
  service:
    type: NodePort
  persistence:
    enabled: true
    existingClaim: deltafi-mongodb
  volumePermissions:
    enabled: true
  nodeSelector:
    node-role.deltafi.org/storage: "true"
# Redis config
redis:
  architecture: standalone
  auth:
    existingSecret: redis-password
    enabled: true
  commonConfiguration: |-
    # Diable AOF https://redis.io/topics/persistence#append-only-file
    appendonly no
    # Disable RDB persistence
    save ""
  master:
    persistence:
      enabled: false
    nodeSelector:
      node-role.deltafi.org/compute: "true"
# Kubernetes Dashboard config
kubernetes-dashboard:
  securityContext: null
  protocolHttp: true
  service:
    externalPort: 80
  settings:
    clusterName: 'DeltaFi'
    itemsPerPage: 50
    labelsLimit: 3
    logsAutoRefreshTimeInterval: 5
    resourceAutoRefreshTimeInterval: 5
    disableAccessDeniedNotifications: false
    defaultNamespace: deltafi
    namespaceFallbackList:
      - default

grafana:
  image:
    tag: 9.0.1
  persistence:
    enabled: true
    existingClaim: deltafi-grafana
  nodeSelector:
    node-role.deltafi.org/storage: "true"
  grafana.ini:
    auth.anonymous:
      enabled: true
      org_role: Admin
    auth.basic:
      enabled: false
  sidecar:
    dashboards:
      enabled: true
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
      - name: Graphite
        type: graphite
        access: proxy
        url: http://deltafi-graphite:8080
        editable: false
        isDefault: true
        version: 1
      - name: Loki
        type: loki
        access: proxy
        url: http://deltafi-loki:3100
        editable: false
        isDefault: false
        version: 1
promtail:
  image:
    tag: 2.5.0
  persistence:
    enabled: true
    existingClaim: deltafi-promtail
  nodeSelector:
    node-role.deltafi.org/storage: "true"
  config:
    clients:
      - url: http://deltafi-loki:3100/loki/api/v1/push
    snippets:
      pipelineStages:
        - cri: {}
        - labeldrop:
            - filename
        - match:
            selector: '{app="graphite"}'
            stages:
              # Filtering out graphite debug logs containing "(Tagging|Tagged)"
              - drop:
                  expression: "Tagg"
        - match:
            selector: '{app=~"(deltafi-core-actions|deltafi-ingress)"}'
            stages:
              - multiline:
                  firstline: '\d{4}-\d{2}-\d{2}\s\d{1,2}\:\d{2}\:\d{2}([\.,\,]{1}\d{3})?'
                  max_wait_time: 2s

loki:
  image:
    tag: 2.5.0
  persistence:
    enabled: true
    existingClaim: deltafi-loki
  nodeSelector:
    node-role.deltafi.org/storage: "true"
  extraArgs:
    log.level: warn
  config:
    compactor:
      retention_enabled: true
    query_scheduler:
      max_outstanding_requests_per_tenant: 500

# Graphite Configuration
graphite:
  image:
    tag: 1.1.10-1
  persistence:
    enabled: true
    existingClaim: deltafi-graphite
  nodeSelector:
    node-role.deltafi.org/storage: "true"
