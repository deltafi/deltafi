# DeltaFi config
deltafi:
  envVars:
    # notation needed spring-boot apps
    - name: DELTAFI_CONFIG_IMPORT
      value: deltafi:mongodb=true&git=false
    # notation needed for quarkus apps
    - name: CONFIG_SERVER_URL
      value: http://deltafi-core-domain-service/config
    - name: REDIS_PASSWORD
      valueFrom:
        secretKeyRef:
          name: redis-password
          key: redis-password
    - name: MINIO_ACCESSKEY
      valueFrom:
        secretKeyRef:
          name: minio-keys
          key: accesskey
    - name: MINIO_SECRETKEY
      valueFrom:
        secretKeyRef:
          name: minio-keys
          key: secretkey
    - name: ACTIONS_HOSTNAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
  core_actions:
    egress_endpoint: http://deltafi-egress-sink-service
    image: deltafi/deltafi-core-actions:0.95.4
    keyStoreSecret: keystore-secret
    keyStorePasswordSecret: keystore-password-secret
    keyStoreMountPath: /etc/pki
  core_domain:
    image: deltafi/deltafi-core-domain:0.95.4
    mongo_host: deltafi-mongodb
    nativeConfigMap: config-server-configmap
    nativeConfigMountPath: /config
    # TODO should we allow nested yaml here and automatically create that config-map?
  ingress:
    image: deltafi/deltafi-ingress:0.95.4
    envVar:
      HTTP_MAX_BODY_SIZE: 5G
  auth:
    image: deltafi/deltafi-auth:0.95.4
    mode: disabled # basic, cert, or disabled
    secret: auth-secret
  api:
    image: deltafi/deltafi-api:0.95.4
  ui:
    image: deltafi/deltafi-ui:0.95.4
    # UI Configuration
    # title: DeltaFi
    # securityBanner:
    #   enabled: true
    #   backgroundColor: "#007a33"
    #   textColor: "#ffffff"
    #   text: "UNCLASSIFIED"
    # topBar:
    #   backgroundColor: "#003559"
    #   textColor: "#dddddd"
    # externalLinks:
    #   - name: GraphQL Documentation
    #     url: https://graphql.org/learn/
    #     description: Introduction to GraphQL
    # deltaFileLinks:
    #   - name: "View in HTTPBin"
    #     url: "https://httpbin.org/anything/${DID}"
  egress_sink:
    image: deltafi/deltafi-egress-sink:0.95.4
# Kubernetes ingress config
ingress:
  domain: local.deltafi.org
  tls:
    enabled: false
    secrets:
      default: local-deltafi-org
# MinIO config
minio:
  existingSecret: minio-keys
  resources:
    requests:
      memory: 2Gi
  replicas: 1
  persistence:
    enabled: true
    existingClaim: deltafi-minio
  ingress:
    enabled: false
  service:
    type: NodePort
    port: 9000
  buckets:
    - name: storage
      policy: none
      purge: false
      ilm:
        Rules:
          - Expiration:
              Days: 1
            ID: AgeOff
            Status: Enabled
  makeBucketJob:
    annotations:
      "helm.sh/hook-weight": "1"
  nodeSelector:
    node-role.deltafi.org/storage: "true"
# Values for the MongoDB dependency
mongodb:
  architecture: standalone
  useStatefulSet: false
  auth:
    existingSecret: mongodb-passwords
    enabled: true
    database: deltafi
    username: mongouser
  service:
    type: NodePort
  persistence:
    enabled: true
    existingClaim: deltafi-mongodb
  volumePermissions:
    enabled: true
  nodeSelector:
    node-role.deltafi.org/storage: "true"
# ElasticSearch config
elasticsearch:
  nodeSelector:
    node-role.deltafi.org/storage: "true"
  clusterHealthCheckParams: "wait_for_status=yellow&timeout=15s"
  esJavaOpts: "-Xmx1024m -Xms1024m"
  replicas: 1
  resources:
    limits:
      cpu: "1"
      memory: 2Gi
    requests:
      cpu: "0"
      memory: 2Gi
  extraVolumes:
    - name: elasticsearch-pvc
      persistentVolumeClaim:
        claimName: deltafi-elasticsearch
  extraVolumeMounts:
    - name: elasticsearch-pvc
      mountPath: /usr/share/elasticsearch/data
  persistence:
    enabled: false
  esConfig:
    elasticsearch.yml: |
      discovery:
        type: single-node
        seed_hosts: ""
  extraEnvs:
    - name: discovery.type
      value: single-node
    - name: cluster.initial_master_nodes
  lifecycle:
    postStart:
      exec:
        command:
          - bash
          - -c
          - |
            #!/bin/bash
            TEMPLATE_NAME=default
            INDEX_PATTERN="*"
            SHARD_COUNT=1
            REPLICA_COUNT=0
            ES_URL=http://localhost:9200
            while [[ "$(curl -s -o /dev/null -w '%{http_code}\n' $ES_URL)" != "200" ]]; do sleep 1; done
            curl -XPUT "$ES_URL/_template/$TEMPLATE_NAME" -H 'Content-Type: application/json' -d'{"index_patterns":['\""$INDEX_PATTERN"\"'],"settings":{"number_of_shards":'$SHARD_COUNT',"number_of_replicas":'$REPLICA_COUNT'}}'
# Fluentd config
fluentd:
  configMapConfigs:
    - deltafi-fluentd-config
    - fluentd-prometheus-conf # Needed for readiness probe
  fileConfigs:
    01_sources.conf: "# Disabled"
    02_filters.conf: "# Disabled"
    03_dispatch.conf: "# Disabled"
    04_outputs.conf: "# Disabled"
  metricsAgeOffJob:
    schedule: "0 * * * *" # Top of every hour
    threshold: "1d"
    suspend: false
# Kibana config
kibana:
  load_saved_objects: true
  resources:
    limits:
      cpu: "1"
      memory: 2Gi
    requests:
      cpu: "0"
      memory: 2Gi
  nodeSelector:
    node-role.deltafi.org/compute: "true"
# Redis config
redis:
  architecture: standalone
  auth:
    existingSecret: redis-password
    enabled: true
  master:
    persistence:
      enabled: false
    nodeSelector:
      node-role.deltafi.org/compute: "true"
# Kubernetes Dashboard config
kubernetes-dashboard:
  securityContext: null
  protocolHttp: true
  service:
    externalPort: 80
  settings:
    clusterName: 'DeltaFi'
    itemsPerPage: 50
    labelsLimit: 3
    logsAutoRefreshTimeInterval: 5
    resourceAutoRefreshTimeInterval: 5
    disableAccessDeniedNotifications: false
    defaultNamespace: deltafi
    namespaceFallbackList:
      - default
