stages:
  - build
  - test
  - docker
  - publish
  - ci
  - trigger
  - scan

default:
  timeout: 45m

image: deltafi/deltafi-build:jdk21.0.2-python3.11-0

.gradle:
  variables:
    GRADLE_USER_HOME: /cache/.gradle
    GRADLE_OPTS: "-Dorg.gradle.daemon=false"
    GRADLE: "./gradlew -s --parallel --no-daemon -PgitLabTokenType=Job-Token -PgitLabToken=${CI_JOB_TOKEN}"

# Main build job (builds all the gradle things)
gradle:build:
  tags:
    - heavy
  extends:
    - .gradle
  stage: build
  script:
    - git describe --tags
    - ${GRADLE} --rerun-tasks license assemble test
  artifacts:
    when: always
    reports:
      junit: "**/build/test-results/test/**/TEST-*.xml"
    paths:
      - "**/build"
    exclude:
      - "**/build/tmp"
      - "**/build/classes"

.docker-multiarch:
  stage: docker
  image: docker:latest
  tags:
    - heavy
  when: manual
  rules:
    - if: $CI_COMMIT_TAG
  variables:
    CONTEXT: "${CI_PROJECT_DIR}/${PROJECT_NAME}"
    DOCKERFILE: ${CONTEXT}/Dockerfile
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker buildx create --name multiarch-builder --platform "linux/arm64,linux/amd64"
    - docker run --privileged --rm tonistiigi/binfmt --install all
  script:
    - export SHA_TAG=${CI_REGISTRY_IMAGE}/${PROJECT_NAME}:${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}
    - export NAMED_TAG=${CI_REGISTRY_IMAGE}/${PROJECT_NAME}:${CI_COMMIT_REF_NAME/\//_}
    - cd "$PROJECT_NAME"
    - echo $SHA_TAG
    - echo $NAMED_TAG
    - docker buildx use multiarch-builder
    - docker buildx build -t $NAMED_TAG --push --platform=linux/arm64,linux/amd64 .

# Kaniko used for these docker builds to speed up the process
.docker:
  stage: docker
  image:
    name: gcr.io/kaniko-project/executor:v1.22.0-debug
    entrypoint: [""]
  tags:
    - light
  variables:
    CONTEXT: "${CI_PROJECT_DIR}/${PROJECT_NAME}"
    DOCKERFILE: ${CONTEXT}/Dockerfile
  # except:
  #   refs:
  #     - tags
  script:
    - SHA_TAG=${CI_REGISTRY_IMAGE}/${PROJECT_NAME}:${CI_COMMIT_SHORT_SHA}
    - NAMED_TAG=${CI_REGISTRY_IMAGE}/${PROJECT_NAME}:${CI_COMMIT_REF_NAME/\//_}
    - time /kaniko/executor
      --context "$CONTEXT"
      --dockerfile "$DOCKERFILE"
      --destination "$SHA_TAG"
      --destination "$NAMED_TAG"
      --registry-mirror=172.17.0.1:6000
      --cache

.publish:
  tags:
    - heavy
  extends:
    - .gradle
  stage: publish
  needs:
    - job: "gradle:build"

publish:nexus:
  allow_failure: true
  tags:
    - heavy
  extends:
    - .publish
  rules:
    # - if: $CI_COMMIT_TAG && $CI_PROJECT_NAMESPACE == 'deltafi'
    - if: $CI_COMMIT_TAG && $CI_PROJECT_NAMESPACE != 'deltafi'
  script:
    - cat ${GPG_SIGNING_KEY} | base64 -d > ${GPG_SIGNING_KEY}.signing.gpg
    - ${GRADLE} -Psigning.keyId="${GPG_SIGNING_KEY_ID}" -Psigning.password="${GPG_SIGNING_PASSWORD}" -Psigning.secretKeyRingFile="${GPG_SIGNING_KEY}.signing.gpg" -PsonatypeNexusUsername="${SONATYPE_NEXUS_USERNAME}" -PsonatypeNexusPassword="${SONATYPE_NEXUS_PASSWORD}" publishPublicPublicationToSonatype closeSonatypeStagingRepository releaseSonatypeStagingRepository

publish:gradle:
  tags:
    - heavy
  extends:
    - .publish
  stage: publish
  rules:
    # - if: $CI_COMMIT_TAG && $CI_PROJECT_NAMESPACE == 'deltafi'
    - if: $CI_COMMIT_TAG && $CI_PROJECT_NAMESPACE != 'deltafi'
  script:
    - cat ${GPG_SIGNING_KEY} | base64 -d > ${GPG_SIGNING_KEY}.signing.gpg
    - ${GRADLE} -Psigning.keyId="${GPG_SIGNING_KEY_ID}" -Psigning.password="${GPG_SIGNING_PASSWORD}" -Psigning.secretKeyRingFile="${GPG_SIGNING_KEY}.signing.gpg" -Pgradle.publish.key="${GRADLE_PUBLISH_KEY}" -Pgradle.publish.secret="${GRADLE_PUBLISH_SECRET}" -PpublishToGradleOrg publishPlugin

publish:gitlab:
  tags:
    - heavy
  extends:
    - .publish
  only:
    refs:
      - tags
      - dev
      - main
      - "1.2"
  script:
    - cat ${GPG_SIGNING_KEY} | base64 -d > ${GPG_SIGNING_KEY}.signing.gpg
    - ${GRADLE} -PprojectMavenRepo="https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/maven" -Psigning.keyId="${GPG_SIGNING_KEY_ID}" -Psigning.password="${GPG_SIGNING_PASSWORD}" -Psigning.secretKeyRingFile="${GPG_SIGNING_KEY}.signing.gpg" publishAllPublicationsToGitlabRepository

publish:docs:
  stage: publish
  tags:
    - light
  rules:
    - if: $CI_PROJECT_NAMESPACE != 'deltafi'
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      allow_failure: true
  script:
    - curl -X POST -d {} $NETLIFY_DOCS_WEBHOOK

.publish-python:
  extends:
    - .publish
  only:
    refs:
      - tags
      - dev
      - main
      - "1.2"
  before_script:
    - apt update
    - apt-get install -y python3-pip
    - python3 -m pip install --upgrade twine
  script:
    - ./gradlew $PROJECT_NAME:build
    - export TWINE_PASSWORD=${CI_JOB_TOKEN}
    - export TWINE_USERNAME=gitlab-ci-token
    - python3 -m twine upload --skip-existing --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi $PROJECT_NAME/src/dist/*

.publish-python-pypi:
  extends:
    - .publish
  rules:
    - if: $CI_COMMIT_TAG && $CI_PROJECT_NAMESPACE != 'deltafi'
  before_script:
    - apt update
    - apt-get install -y python3-pip
    - python3 -m pip install --upgrade twine
  script:
    - ./gradlew $PROJECT_NAME:build
    - export TWINE_PASSWORD=${PYTHON_PYPI_PUBLISH_PASSWORD}
    - export TWINE_USERNAME="__token__"
    - python3 -m twine upload $PROJECT_NAME/src/dist/*

hub_docker_quota_check:
  stage: build
  image: alpine:3.19
  tags:
    - light
  before_script:
    - apk add curl jq
  when: manual
  script:
    - |
      TOKEN=$(curl "https://auth.docker.io/token?service=registry.docker.io&scope=repository:ratelimitpreview/test:pull" | jq --raw-output .token) && curl --head --header "Authorization: Bearer $TOKEN" "https://registry-1.docker.io/v2/ratelimitpreview/test/manifests/latest" 2>&1

# Trigger project for triggering downstream plugins
trigger:plugins:
  stage: trigger
  variables:
    TRIGGER_BRANCH: $CI_COMMIT_REF_NAME
    TRIGGER_TAG: $CI_COMMIT_TAG
  only:
    refs:
      - dev
      - main
      - release/*
      - "1.2"
      - tags
  trigger:
    project: $CI_PROJECT_NAMESPACE/ci-plugin-triggers
    branch: main
    forward:
      yaml_variables: true
      pipeline_variables: false

.container_scanning:
  tags:
    - light
  variables:
    CS_ANALYZER_IMAGE: "$CI_TEMPLATE_REGISTRY_HOST/security-products/container-scanning:5"
    GIT_STRATEGY: fetch
  image: "$CS_ANALYZER_IMAGE$CS_IMAGE_SUFFIX"
  stage: scan
  allow_failure: true
  artifacts:
    reports:
      container_scanning: deltafi-core.container-report.json
    paths:
      - deltafi-core.container-report.json
      - deltafi-core-actions.container-report.json
      - deltafi-passthrough.container-report.json
      - deltafi-api.container-report.json
      - deltafi-auth.container-report.json
      - deltafi-docs.container-report.json
      - deltafi-egress-sink.container-report.json
      - deltafi-nodemonitor.container-report.json
  dependencies: []
  when: manual
  script:
    - which grype && grype db update
    - CS_DOCKERFILE_PATH=deltafi-core CS_IMAGE=${CI_REGISTRY_IMAGE}/deltafi-core:${CI_COMMIT_SHORT_SHA} gtcs scan
    - cp gl-container-scanning-report.json deltafi-core.container-report.json
    - CS_DOCKERFILE_PATH=deltafi-core-actions CS_IMAGE=${CI_REGISTRY_IMAGE}/deltafi-core-actions:${CI_COMMIT_SHORT_SHA} gtcs scan
    - cp gl-container-scanning-report.json deltafi-core-actions.container-report.json
    - CS_DOCKERFILE_PATH=deltafi-passthrough CS_IMAGE=${CI_REGISTRY_IMAGE}/deltafi-passthrough:${CI_COMMIT_SHORT_SHA} gtcs scan
    - CS_DOCKERFILE_PATH=deltafi-api CS_IMAGE=${CI_REGISTRY_IMAGE}/deltafi-api:${CI_COMMIT_SHORT_SHA} gtcs scan
    - cp gl-container-scanning-report.json deltafi-passthrough.container-report.json
    - cp gl-container-scanning-report.json deltafi-api.container-report.json
    - CS_DOCKERFILE_PATH=deltafi-auth CS_IMAGE=${CI_REGISTRY_IMAGE}/deltafi-auth:${CI_COMMIT_SHORT_SHA} gtcs scan
    - cp gl-container-scanning-report.json deltafi-auth.container-report.json
    - CS_DOCKERFILE_PATH=deltafi-docs CS_IMAGE=${CI_REGISTRY_IMAGE}/deltafi-docs:${CI_COMMIT_SHORT_SHA} gtcs scan
    - cp gl-container-scanning-report.json deltafi-docs.container-report.json
    - CS_DOCKERFILE_PATH=deltafi-egress-sink CS_IMAGE=${CI_REGISTRY_IMAGE}/deltafi-egress-sink:${CI_COMMIT_SHORT_SHA} gtcs scan
    - cp gl-container-scanning-report.json deltafi-egress-sink.container-report.json
    - CS_DOCKERFILE_PATH=deltafi-nodemonitor CS_IMAGE=${CI_REGISTRY_IMAGE}/deltafi-nodemonitor:${CI_COMMIT_SHORT_SHA} gtcs scan
    - cp gl-container-scanning-report.json deltafi-nodemonitor.container-report.json

grype_scan:
  extends:
    - .container_scanning
  variables:
    CS_ANALYZER_IMAGE: "$CI_TEMPLATE_REGISTRY_HOST/security-products/container-scanning/grype:5"

trivy_scan:
  extends:
    - .container_scanning
  variables:
    CS_ANALYZER_IMAGE: "$CI_TEMPLATE_REGISTRY_HOST/security-products/container-scanning/trivy:5"

release:
  stage: publish
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "Release Job"
  release:
    name: '$CI_COMMIT_TAG'
    tag_name: '$CI_COMMIT_TAG'
    description: "./CHANGELOG/latest.md"

include:
  - local: '*/.gitlab-ci.yml'
