image: docker:latest

services:
  - name: docker:18.09.7-dind
    entrypoint: ["dockerd-entrypoint.sh"]
    command: ["--tls=false", "--max-concurrent-downloads", "10", "--registry-mirror=http://172.17.0.2:5000"] # I hate this

stages:
  - build
  - test
  - docker
  - publish
  - ci
  - trigger

default:
  timeout: 45m

variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  GRADLE: "gradle -s --parallel --no-daemon --build-cache -PgitLabTokenType=Job-Token -PgitLabToken=${CI_JOB_TOKEN}"
  DOCKER_TAG: ${CI_REGISTRY_IMAGE}/${PROJECT_NAME}:${CI_COMMIT_SHA}
  DOCKER_HOST: "tcp://docker:2375"
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2
  DEV_CHART: git@gitlab.com:systolic/deltafi/deltafi.git
  PROJECT_LIST: "deltafi-gateway deltafi-core-domain deltafi-core-actions deltafi-ingress deltafi-auth deltafi-api deltafi-config-server deltafi-egress-sink"
  deltafi_gateway_HELM_IMAGE_PATH: deltafi.gateway.image
  deltafi_config_server_HELM_IMAGE_PATH: deltafi.config_server.image
  deltafi_core_domain_HELM_IMAGE_PATH: deltafi.core_domain.image
  deltafi_core_actions_HELM_IMAGE_PATH: deltafi.core_actions.image
  deltafi_ingress_HELM_IMAGE_PATH: deltafi.ingress.image
  deltafi_auth_HELM_IMAGE_PATH: deltafi.auth.image
  deltafi_api_HELM_IMAGE_PATH: deltafi.api.image
  deltafi_egress_sink_HELM_IMAGE_PATH: deltafi.egress_sink.image

trigger_deltafi_stix:
  stage: trigger
  only:
    refs:
      - main
      - release/*
      - tags
  trigger:
    project: systolic/deltafi/deltafi-stix
    branch: $CI_COMMIT_REF_NAME
    forward:
      yaml_variables: false
      pipeline_variables: false

trigger_passthrough:
  stage: trigger
  only:
    refs:
      - main
      - release/*
      - tags
  trigger:
    project: systolic/deltafi/deltafi-passthrough
    branch: $CI_COMMIT_REF_NAME
    forward:
      yaml_variables: false
      pipeline_variables: false

.gradle:
  image: gradle:7.3.3-jdk11
  variables:
    GRADLE_USER_HOME: /cache/.gradle.${CI_CONCURRENT_ID}

.docker:
  script:
    - test -n "$PROJECT_NAME"
    - export DOCKER_NAMED_TAG=${CI_REGISTRY_IMAGE}/${PROJECT_NAME}:${CI_COMMIT_REF_NAME//\//_}
    - cd $PROJECT_NAME
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - echo "Building the following image ${DOCKER_NAMED_TAG}"
    - echo "Building the following image ${DOCKER_TAG}"
    # pull latest image if available (performance optimization)
    - docker pull ${DOCKER_NAMED_TAG} || true
    - >
      docker build
      --build-arg VCS_REF=$CI_COMMIT_SHA
      --build-arg VCS_URL=$CI_PROJECT_URL
      --cache-from ${DOCKER_NAMED_TAG}
      --tag ${DOCKER_TAG}
      .
    - docker push ${DOCKER_TAG}
    - docker tag ${DOCKER_TAG} ${DOCKER_NAMED_TAG}
    - docker push ${DOCKER_NAMED_TAG}
    - docker images

# Main build job (builds all the gradle things)
build:
  stage: build
  script:
    - ${GRADLE} --rerun-tasks license assemble test
  extends:
    - .gradle
  artifacts:
    when: always
    reports:
      junit: "**/build/test-results/test/**/TEST-*.xml"
    paths:
      - "**/build"
    exclude:
      - "**/build/tmp"
      - "**/build/classes"

publish-nexus:
  only:
    refs:
      - tags
  stage: publish
  extends:
    - .gradle
  needs:
    - job: "build"
  script:
    - cat ${GPG_SIGNING_KEY} | base64 -d > ${GPG_SIGNING_KEY}.signing.gpg
    - ${GRADLE} -Psigning.keyId="${GPG_SIGNING_KEY_ID}" -Psigning.password="${GPG_SIGNING_PASSWORD}" -Psigning.secretKeyRingFile="${GPG_SIGNING_KEY}.signing.gpg" -PsonatypeNexusUsername="${SONATYPE_NEXUS_USERNAME}" -PsonatypeNexusPassword="${SONATYPE_NEXUS_PASSWORD}" publishPublicPublicationToSonatype closeSonatypeStagingRepository releaseSonatypeStagingRepository

publish-gradle:
  only:
    refs:
      - tags
  stage: publish
  extends:
    - .gradle
  needs:
    - job: "build"
  script:
    - cat ${GPG_SIGNING_KEY} | base64 -d > ${GPG_SIGNING_KEY}.signing.gpg
    - ${GRADLE} -Psigning.keyId="${GPG_SIGNING_KEY_ID}" -Psigning.password="${GPG_SIGNING_PASSWORD}" -Psigning.secretKeyRingFile="${GPG_SIGNING_KEY}.signing.gpg" -Pgradle.publish.key="${GRADLE_PUBLISH_KEY}" -Pgradle.publish.secret="${GRADLE_PUBLISH_SECRET}" publishPlugin

publish-gitlab:
  only:
    refs:
      - tags
      - main
  stage: publish
  extends:
    - .gradle
  needs:
    - job: "build"
  script:
    - cat ${GPG_SIGNING_KEY} | base64 -d > ${GPG_SIGNING_KEY}.signing.gpg
    - ${GRADLE} -Psigning.keyId="${GPG_SIGNING_KEY_ID}" -Psigning.password="${GPG_SIGNING_PASSWORD}" -Psigning.secretKeyRingFile="${GPG_SIGNING_KEY}.signing.gpg" publishAllPublicationsToGitlabRepository

hub_docker_quota_check:
    stage: build
    image: alpine:latest
    before_script:
      - apk add curl jq
    when: manual
    script:
      - |
        TOKEN=$(curl "https://auth.docker.io/token?service=registry.docker.io&scope=repository:ratelimitpreview/test:pull" | jq --raw-output .token) && curl --head --header "Authorization: Bearer $TOKEN" "https://registry-1.docker.io/v2/ratelimitpreview/test/manifests/latest" 2>&1

include:
  - local: '*/.gitlab-ci.yml'

