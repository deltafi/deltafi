image: docker:latest

services:
  - name: docker:dind
    entrypoint: ["dockerd-entrypoint.sh"]
    command: ["--max-concurrent-downloads", "10"]

stages:
  - build
  - test
  - docker
  - publish
  - ci
  - trigger

default:
  timeout: 45m

variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  GRADLE: "gradle -s --no-daemon --build-cache -PgitLabTokenType=Job-Token -PgitLabToken=${CI_JOB_TOKEN}"
  DOCKER_TAG: ${CI_REGISTRY_IMAGE}/${PROJECT_NAME}:${CI_COMMIT_SHA}
  DOCKER_HOST: "tcp://docker:2375"
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2
  DEV_CHART: git@gitlab.com:systolic/deltafi/deltafi.git
  PROJECT_LIST: "deltafi-gateway deltafi-core-domain deltafi-core-actions deltafi-passthrough-actions deltafi-ingress deltafi-auth deltafi-api deltafi-config-server"
  deltafi_gateway_HELM_IMAGE_PATH: deltafi.gateway.image
  deltafi_config_server_HELM_IMAGE_PATH: deltafi.config_server.image
  deltafi_core_domain_HELM_IMAGE_PATH: deltafi.core_domain.image
  deltafi_passthrough_actions_HELM_IMAGE_PATH: deltafi.passthrough_actions.image
  deltafi_core_actions_HELM_IMAGE_PATH: deltafi.core_actions.image
  deltafi_ingress_HELM_IMAGE_PATH: deltafi.ingress.image
  deltafi_auth_HELM_IMAGE_PATH: deltafi.auth.image
  deltafi_api_HELM_IMAGE_PATH: deltafi.api.image

trigger_deltafi_stix:
  stage: trigger
  only:
    refs:
      - main
      - release/*
      - tags
  trigger:
    project: systolic/deltafi/deltafi-stix
    branch: $CI_COMMIT_REF_NAME

.gradle:
  image: gradle:6.8.3-jdk11
  variables:
    GRADLE_USER_HOME: /cache/.gradle.${CI_CONCURRENT_ID}

.publish:
  only:
    refs:
      - main
      - tags

.docker:
  services:
    - name: docker:18-dind
      entrypoint: ["dockerd-entrypoint.sh"]
      command: ["--max-concurrent-downloads", "10"]
  script:
    - test -n "$PROJECT_NAME"
    - export DOCKER_NAMED_TAG=${CI_REGISTRY_IMAGE}/${PROJECT_NAME}:${CI_COMMIT_REF_NAME//\//_}
    - cd $PROJECT_NAME
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - echo "Building the following image ${DOCKER_NAMED_TAG}"
    - echo "Building the following image ${DOCKER_TAG}"
    # pull latest image if available (performance optimization)
    - docker pull ${DOCKER_NAMED_TAG} || true
    - >
      docker build
      --build-arg VCS_REF=$CI_COMMIT_SHA
      --build-arg VCS_URL=$CI_PROJECT_URL
      --cache-from ${DOCKER_NAMED_TAG}
      --tag ${DOCKER_TAG}
      .
    - docker push ${DOCKER_TAG}
    - docker tag ${DOCKER_TAG} ${DOCKER_NAMED_TAG}
    - docker push ${DOCKER_NAMED_TAG}
    - docker images

.coverage_report:
  image: registry.gitlab.com/haynes/jacoco2cobertura:1.0.7
  before_script:
    - test -n "$PROJECT_NAME"
    - cd $PROJECT_NAME
  script:
    - 'python /opt/cover2cover.py build/jacocoReport/test/jacocoTestReport.xml src/main/java > build/cobertura.xml'
    - 'python /opt/source2filename.py build/cobertura.xml'
  artifacts:
    reports:
      cobertura: $PROJECT_NAME/build/jacocoReport/test/cobertura.xml
    paths:
      - $PROJECT_NAME/build/cobertura.xml

# Main build job (builds all the gradle things)
build:
  stage: build
  script:
    - ${GRADLE} --rerun-tasks assemble test
  extends:
    - .gradle
  artifacts:
    when: always
    reports:
      junit: "**/build/test-results/test/**/TEST-*.xml"
    paths:
      - "**/build"
      - ".gradle"

include:
  - local: '*/.gitlab-ci.yml'
