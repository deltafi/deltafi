stages:
  - build
  - test
  - docker
  - publish
  - ci
  - trigger
  - scan
  - release

default:
  timeout: 45m

image: deltafi/deltafi-build:jdk21.0.5-python3.12-0

.gradle:
  variables:
    GRADLE_USER_HOME: /cache/.gradle.${CI_CONCURRENT_ID}
    GRADLE_OPTS: "-Dorg.gradle.daemon=false"
    GRADLE: "./gradlew -s --parallel --no-daemon -PgitLabTokenType=Job-Token -PgitLabToken=${CI_JOB_TOKEN}"

.golang:
  image: deltafi/deltafi-build:jdk21.0.7_6-golang1.24.2-alpine-0
  variables:
    GOPATH: /cache/go.${CI_CONCURRENT_ID}

# Main build job (builds all the gradle things)
build:gradle:
  tags:
    - heavy
  extends:
    - .gradle
  stage: build
  script:
    - git describe --tags
    - ${GRADLE} --rerun-tasks license assemble test dockerPrepare
  artifacts:
    when: always
    reports:
      junit: "**/build/test-results/test/**/TEST-*.xml"
    paths:
      - "**/build"
    exclude:
      - "**/build/tmp"
      - "**/build/classes"

build:distros:
  rules:
    - if: $CI_COMMIT_TAG
  tags:
    - heavy
  extends:
    - .gradle
    - .golang
  stage: build
  script:
    - ${GRADLE} --rerun-tasks dist
    - tree build/*
  artifacts:
    when: always
    paths:
      - "build"

.docker-multiarch:
  stage: docker
  image: docker:latest
  tags:
    - heavy
  needs:
    - job: "build:gradle"
  variables:
    CONTEXT: "${CI_PROJECT_DIR}/${PROJECT_NAME}/build/docker"
  when: manual
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker buildx create --name multiarch-builder --platform "linux/arm64,linux/amd64"
    - docker run --privileged --rm tonistiigi/binfmt --install all
  script:
    - export SHA_TAG=${CI_REGISTRY_IMAGE}/${PROJECT_NAME}:${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}
    - export NAMED_TAG=${CI_REGISTRY_IMAGE}/${PROJECT_NAME}:${CI_COMMIT_REF_NAME/\//_}
    - cd "$CONTEXT"
    - echo $SHA_TAG
    - echo $NAMED_TAG
    - docker buildx use multiarch-builder
    - docker buildx build -t $NAMED_TAG --push --platform=linux/arm64,linux/amd64 .

# Kaniko used for these docker builds to speed up the process
.docker:
  stage: docker
  image:
    name: gcr.io/kaniko-project/executor:v1.23.2-debug
    entrypoint: [""]
  tags:
    - light
  needs:
    - job: "build:gradle"
  variables:
    CONTEXT: "${CI_PROJECT_DIR}/${PROJECT_NAME}/build/docker"
  # except:
  #   refs:
  #     - tags
  script:
    - SHA_TAG=${CI_REGISTRY_IMAGE}/${PROJECT_NAME}:${CI_COMMIT_SHORT_SHA}
    - NAMED_TAG=${CI_REGISTRY_IMAGE}/${PROJECT_NAME}:${CI_COMMIT_REF_NAME/\//_}
    - time /kaniko/executor
      --context "$CONTEXT"
      --dockerfile "${CONTEXT}/Dockerfile"
      --destination "$SHA_TAG"
      --destination "$NAMED_TAG"
      --registry-mirror=172.17.0.1:6000
      --cache

.publish:
  tags:
    - heavy
  extends:
    - .gradle
  stage: publish
  needs:
    - job: "build:gradle"

publish:nexus:
  allow_failure: true
  tags:
    - heavy
  extends:
    - .publish
  rules:
    # - if: $CI_COMMIT_TAG && $CI_PROJECT_NAMESPACE == 'deltafi'
    - if: $CI_COMMIT_TAG && $CI_PROJECT_NAMESPACE != 'deltafi'
  script:
    - cat ${GPG_SIGNING_KEY} | base64 -d > ${GPG_SIGNING_KEY}.signing.gpg
    - ${GRADLE} -Psigning.keyId="${GPG_SIGNING_KEY_ID}" -Psigning.password="${GPG_SIGNING_PASSWORD}" -Psigning.secretKeyRingFile="${GPG_SIGNING_KEY}.signing.gpg" -PsonatypeNexusUsername="${SONATYPE_NEXUS_USERNAME}" -PsonatypeNexusPassword="${SONATYPE_NEXUS_PASSWORD}" publishPublicPublicationToSonatype closeSonatypeStagingRepository releaseSonatypeStagingRepository

publish:gradle:
  tags:
    - heavy
  extends:
    - .publish
  stage: publish
  rules:
    # - if: $CI_COMMIT_TAG && $CI_PROJECT_NAMESPACE == 'deltafi'
    - if: $CI_COMMIT_TAG && $CI_PROJECT_NAMESPACE != 'deltafi'
  script:
    - cat ${GPG_SIGNING_KEY} | base64 -d > ${GPG_SIGNING_KEY}.signing.gpg
    - ${GRADLE} -Psigning.keyId="${GPG_SIGNING_KEY_ID}" -Psigning.password="${GPG_SIGNING_PASSWORD}" -Psigning.secretKeyRingFile="${GPG_SIGNING_KEY}.signing.gpg" -Pgradle.publish.key="${GRADLE_PUBLISH_KEY}" -Pgradle.publish.secret="${GRADLE_PUBLISH_SECRET}" -PpublishToGradleOrg publishPlugin

publish:gitlab:
  tags:
    - heavy
  extends:
    - .publish
  only:
    refs:
      - tags
      - dev
      - main
      - "2.0"
  script:
    - cat ${GPG_SIGNING_KEY} | base64 -d > ${GPG_SIGNING_KEY}.signing.gpg
    - ${GRADLE} -PprojectMavenRepo="https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/maven" -Psigning.keyId="${GPG_SIGNING_KEY_ID}" -Psigning.password="${GPG_SIGNING_PASSWORD}" -Psigning.secretKeyRingFile="${GPG_SIGNING_KEY}.signing.gpg" publishAllPublicationsToGitlabRepository

publish:docs:
  stage: publish
  image: curlimages/curl:latest
  tags:
    - light
  rules:
    - if: $CI_PROJECT_NAMESPACE != 'deltafi'
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      allow_failure: true
  script:
    - curl -X POST -d {} $NETLIFY_DOCS_WEBHOOK

.publish-python:
  extends:
    - .publish
  only:
    refs:
      - tags
      - dev
      - main
      - "2.0"
  script:
    - ./gradlew $PROJECT_NAME:build
    - export TWINE_PASSWORD=${CI_JOB_TOKEN}
    - export TWINE_USERNAME=gitlab-ci-token
    - $PROJECT_NAME/src/venv/bin/pip install twine
    - $PROJECT_NAME/src/venv/bin/python -m twine upload --skip-existing --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi $PROJECT_NAME/src/dist/*

.publish-python-pypi:
  extends:
    - .publish
  rules:
    - if: $CI_COMMIT_TAG && $CI_PROJECT_NAMESPACE != 'deltafi'
  script:
    - ./gradlew $PROJECT_NAME:build
    - export TWINE_PASSWORD=${PYTHON_PYPI_PUBLISH_PASSWORD}
    - export TWINE_USERNAME="__token__"
    - $PROJECT_NAME/src/venv/bin/pip install twine
    - $PROJECT_NAME/src/venv/bin/python -m twine upload $PROJECT_NAME/src/dist/*

hub_docker_quota_check:
  stage: build
  image: alpine:3.21
  tags:
    - light
  before_script:
    - apk add curl jq
  when: manual
  script:
    - |
      TOKEN=$(curl "https://auth.docker.io/token?service=registry.docker.io&scope=repository:ratelimitpreview/test:pull" | jq --raw-output .token) && curl --head --header "Authorization: Bearer $TOKEN" "https://registry-1.docker.io/v2/ratelimitpreview/test/manifests/latest" 2>&1

# Trigger project for triggering downstream plugins
trigger:plugins:
  stage: trigger
  variables:
    TRIGGER_BRANCH: $CI_COMMIT_REF_NAME
    TRIGGER_TAG: $CI_COMMIT_TAG
  only:
    refs:
      - dev
      - main
      - release/*
      - "2.0"
      - tags
  trigger:
    project: $CI_PROJECT_NAMESPACE/ci-plugin-triggers
    branch: main
    forward:
      yaml_variables: true
      pipeline_variables: false

.container_scanning:
  tags:
    - light
  variables:
    CS_ANALYZER_IMAGE: "$CI_TEMPLATE_REGISTRY_HOST/security-products/container-scanning:5"
    GIT_STRATEGY: fetch
  image: "$CS_ANALYZER_IMAGE$CS_IMAGE_SUFFIX"
  stage: scan
  allow_failure: true
  artifacts:
    reports:
      container_scanning: deltafi-core.container-report.json
    paths:
      - deltafi-core.container-report.json
      - deltafi-core-actions.container-report.json
      - deltafi-egress-sink.container-report.json
      - deltafi-nodemonitor.container-report.json
  dependencies: []
  when: manual
  script:
    - which grype && grype db update
    - CS_DOCKERFILE_PATH=deltafi-core CS_IMAGE=${CI_REGISTRY_IMAGE}/deltafi-core:${CI_COMMIT_SHORT_SHA} gtcs scan
    - cp gl-container-scanning-report.json deltafi-core.container-report.json
    - CS_DOCKERFILE_PATH=deltafi-core-actions CS_IMAGE=${CI_REGISTRY_IMAGE}/deltafi-core-actions:${CI_COMMIT_SHORT_SHA} gtcs scan
    - cp gl-container-scanning-report.json deltafi-core-actions.container-report.json
    - CS_DOCKERFILE_PATH=deltafi-egress-sink CS_IMAGE=${CI_REGISTRY_IMAGE}/deltafi-egress-sink:${CI_COMMIT_SHORT_SHA} gtcs scan
    - cp gl-container-scanning-report.json deltafi-egress-sink.container-report.json
    - CS_DOCKERFILE_PATH=deltafi-nodemonitor CS_IMAGE=${CI_REGISTRY_IMAGE}/deltafi-nodemonitor:${CI_COMMIT_SHORT_SHA} gtcs scan
    - cp gl-container-scanning-report.json deltafi-nodemonitor.container-report.json

grype_scan:
  extends:
    - .container_scanning
  variables:
    CS_ANALYZER_IMAGE: "$CI_TEMPLATE_REGISTRY_HOST/security-products/container-scanning/grype:5"

trivy_scan:
  extends:
    - .container_scanning
  variables:
    CS_ANALYZER_IMAGE: "$CI_TEMPLATE_REGISTRY_HOST/security-products/container-scanning/trivy:5"

publish:distros:
  stage: publish
  image: curlimages/curl:latest
  needs:
    - job: "build:distros"
  tags:
    - light
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - |
      # Read version from VERSION file
      VERSION=$(cat VERSION)
      if [ -z "$VERSION" ]; then
        echo "Error: Could not read version from VERSION file"
        exit 1
      fi
      echo "Using version: $VERSION"
      DIST_LIST="distribution.md"
      echo "### Distribution Files" > $DIST_LIST
      echo "" >> $DIST_LIST

      # Process each .tgz file
      ls -la build/dist/*.tgz
      for file in build/dist/*.tgz; do
        if [ -f "$file" ]; then
          filename=$(basename "$file")
          echo "Publishing $filename to package registry..."
          curl --header "JOB-TOKEN: $CI_JOB_TOKEN" \
               --upload-file "$file" \
               "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${VERSION}/${filename}"
          echo "* [$filename](${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${VERSION}/${filename})" >> $DIST_LIST
        fi
      done
  artifacts:
    paths:
      - distribution.md

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  needs:
    - job: "publish:distros"
  script:
    - echo "Release Job"
    - cp ./CHANGELOG/latest.md release_notes.md
    - echo >> release_notes.md
    - cat distribution.md >> release_notes.md
  release:
    name: '$CI_COMMIT_TAG'
    tag_name: '$CI_COMMIT_TAG'
    description: "release_notes.md"
    assets:
      links:
        - name: "deltafi-${CI_COMMIT_TAG}-darwin-arm64.tgz"
          url: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${CI_COMMIT_TAG}/deltafi-${CI_COMMIT_TAG}-darwin-arm64.tgz"
          link_type: "package"
        - name: "deltafi-${CI_COMMIT_TAG}-darwin-amd64.tgz"
          url: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${CI_COMMIT_TAG}/deltafi-${CI_COMMIT_TAG}-darwin-amd64.tgz"
          link_type: "package"
        - name: "deltafi-${CI_COMMIT_TAG}-linux-amd64.tgz"
          url: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${CI_COMMIT_TAG}/deltafi-${CI_COMMIT_TAG}-linux-amd64.tgz"
          link_type: "package"
        - name: "deltafi ${CI_COMMIT_TAG} (darwin, arm64)"
          filepath: "deltafi-${CI_COMMIT_TAG}-darwin-arm64.tar.gz"
          url: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${CI_COMMIT_TAG}/deltafi-${CI_COMMIT_TAG}-darwin-arm64.tgz"
          link_type: "package"
        - name: "deltafi ${CI_COMMIT_TAG} (darwin, amd64)"
          filepath: "deltafi-${CI_COMMIT_TAG}-darwin-amd64.tar.gz"
          url: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${CI_COMMIT_TAG}/deltafi-${CI_COMMIT_TAG}-darwin-amd64.tgz"
          link_type: "package"
        - name: "deltafi ${CI_COMMIT_TAG} (linux, amd64)"
          filepath: "deltafi-${CI_COMMIT_TAG}-linux-amd64.tar.gz"
          url: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${CI_COMMIT_TAG}/deltafi-${CI_COMMIT_TAG}-linux-amd64.tgz"
          link_type: "package"
  artifacts:
    paths:
      - release_notes.md

include:
  - local: '*/.gitlab-ci.yml'
  - local: 'orchestration/*/.gitlab-ci.yml'
