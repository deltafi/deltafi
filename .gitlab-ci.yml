include:
  - local: .ci/core.yml
  - local: '*/.gitlab-ci.yml'
  - local: 'orchestration/*/.gitlab-ci.yml'

stages:
  - build
  - test
  - docker
  - publish
  - ci
  - trigger
  - scan
  - release

# Main build job (builds all the gradle things)
"Core Build":
  extends:
    - .gradle-build
  stage: build
  tags:
    - heavy
  variables:
    GRADLE_TASKS: license assemble test dockerPrepare
  before_script:
    - git describe --tags
  artifacts:
    when: always
    reports:
      junit: "**/build/test-results/test/**/TEST-*.xml"
    paths:
      - "**/build"
    exclude:
      - "**/build/tmp"
      - "**/build/classes"

"Build Installer Distros":
  rules:
    - if: $CI_COMMIT_TAG
  tags:
    - heavy
  extends:
    - .gradle-build
    - .golang
  stage: build
  script:
    - ${GRADLE} --rerun-tasks dist
    - tree build/*
  artifacts:
    when: always
    paths:
      - "build"

"Publish Maven Artifacts to Nexus":
  allow_failure: true
  tags:
    - heavy
  extends:
    - .publish
  when: manual
  rules:
    - if: $CI_COMMIT_TAG && $CI_PROJECT_NAMESPACE != 'deltafi'
  script:
    - cat ${GPG_SIGNING_KEY} | base64 -d > ${GPG_SIGNING_KEY}.signing.gpg
    - ${GRADLE} -Psigning.keyId="${GPG_SIGNING_KEY_ID}" -Psigning.password="${GPG_SIGNING_PASSWORD}" -Psigning.secretKeyRingFile="${GPG_SIGNING_KEY}.signing.gpg" -PsonatypeNexusUsername="${SONATYPE_NEXUS_USERNAME}" -PsonatypeNexusPassword="${SONATYPE_NEXUS_PASSWORD}" publishPublicPublicationToSonatype closeSonatypeStagingRepository releaseSonatypeStagingRepository

"Publish Plugin to gradle.org":
  tags:
    - heavy
  extends:
    - .publish
  stage: publish
  rules:
    # - if: $CI_COMMIT_TAG && $CI_PROJECT_NAMESPACE == 'deltafi'
    - if: $CI_COMMIT_TAG && $CI_PROJECT_NAMESPACE != 'deltafi'
  script:
    - cat ${GPG_SIGNING_KEY} | base64 -d > ${GPG_SIGNING_KEY}.signing.gpg
    - ${GRADLE} -Psigning.keyId="${GPG_SIGNING_KEY_ID}" -Psigning.password="${GPG_SIGNING_PASSWORD}" -Psigning.secretKeyRingFile="${GPG_SIGNING_KEY}.signing.gpg" -Pgradle.publish.key="${GRADLE_PUBLISH_KEY}" -Pgradle.publish.secret="${GRADLE_PUBLISH_SECRET}" -PpublishToGradleOrg publishPlugin

"Publish Maven Artifacts to GitLab":
  stage: publish
  tags:
    - heavy
  extends:
    - .publish
  only:
    refs:
      - tags
      - dev
      - main
  script:
    - cat ${GPG_SIGNING_KEY} | base64 -d > ${GPG_SIGNING_KEY}.signing.gpg
    - ${GRADLE} -PprojectMavenRepo="https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/maven" -Psigning.keyId="${GPG_SIGNING_KEY_ID}" -Psigning.password="${GPG_SIGNING_PASSWORD}" -Psigning.secretKeyRingFile="${GPG_SIGNING_KEY}.signing.gpg" publishAllPublicationsToGitlabRepository

"Trigger Netlify Docs":
  stage: publish
  image: curlimages/curl:latest
  tags:
    - light
  rules:
    - if: $CI_PROJECT_NAMESPACE != 'deltafi'
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      allow_failure: true
  script:
    - curl -X POST -d {} $NETLIFY_DOCS_WEBHOOK

"Check Docker Hub quota":
  stage: build
  image: alpine:3.21
  tags:
    - light
  before_script:
    - apk add curl jq
  when: manual
  script:
    - |
      TOKEN=$(curl "https://auth.docker.io/token?service=registry.docker.io&scope=repository:ratelimitpreview/test:pull" | jq --raw-output .token) && curl --head --header "Authorization: Bearer $TOKEN" "https://registry-1.docker.io/v2/ratelimitpreview/test/manifests/latest" 2>&1

# Trigger project for triggering downstream plugins
"Trigger Plugin Jobs":
  stage: trigger
  variables:
    TRIGGER_BRANCH: $CI_COMMIT_REF_NAME
    TRIGGER_TAG: $CI_COMMIT_TAG
  # rules:
  #   - if: $CI_COMMIT_TAG
  #   - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH == 'main'
  only:
    refs:
      - dev
      - main
      - release/*
      - tags
  trigger:
    project: $CI_PROJECT_NAMESPACE/ci-plugin-triggers
    branch: main
    forward:
      yaml_variables: true
      pipeline_variables: false

"Grype Scan":
  extends:
    - .container_scanning
  variables:
    CS_ANALYZER_IMAGE: "$CI_TEMPLATE_REGISTRY_HOST/security-products/container-scanning/grype:5"

"Trivy Scan":
  extends:
    - .container_scanning
  variables:
    CS_ANALYZER_IMAGE: "$CI_TEMPLATE_REGISTRY_HOST/security-products/container-scanning/trivy:5"

"Publish Installer Distros":
  stage: publish
  image: curlimages/curl:latest
  needs:
    - job: "Build Installer Distros"
  tags:
    - light
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - |
      # Read version from VERSION file
      VERSION=$(cat VERSION)
      if [ -z "$VERSION" ]; then
        echo "Error: Could not read version from VERSION file"
        exit 1
      fi
      echo "Using version: $VERSION"
      DIST_LIST="distribution.md"
      echo "### Distribution Files" > $DIST_LIST
      echo "" >> $DIST_LIST

      # Process each .tgz file
      ls -la build/dist/*.tgz
      for file in build/dist/*.tgz; do
        if [ -f "$file" ]; then
          filename=$(basename "$file")
          echo "Publishing $filename to package registry..."
          curl --header "JOB-TOKEN: $CI_JOB_TOKEN" \
               --upload-file "$file" \
               "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${VERSION}/${filename}"
          echo "* [$filename](${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${VERSION}/${filename})" >> $DIST_LIST
        fi
      done
  artifacts:
    paths:
      - distribution.md

"linux arm64 distro image":
  extends: .distro-containers
  variables:
    ARCH: arm64
    OS: linux
  needs:
    - job: "Publish Installer Distros"

"linux amd64 distro image":
  extends: .distro-containers
  variables:
    ARCH: amd64
    OS: linux
  needs:
    - job: "Publish Installer Distros"

"macos arm64 distro image":
  extends: .distro-containers
  variables:
    ARCH: arm64
    OS: macos
  needs:
    - job: "Publish Installer Distros"

"macos amd64 distro image":
  extends: .distro-containers
  variables:
    ARCH: amd64
    OS: macos
  needs:
    - job: "Publish Installer Distros"

Release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  needs:
    - job: "Publish Installer Distros"
  script:
    - echo "Release Job"
    - cp ./CHANGELOG/latest.md release_notes.md
    - echo >> release_notes.md
    - cat distribution.md >> release_notes.md
  release:
    name: '$CI_COMMIT_TAG'
    tag_name: '$CI_COMMIT_TAG'
    description: "release_notes.md"
    assets:
      links:
        - name: "deltafi ${CI_COMMIT_TAG} (linux, amd64, tgz)"
          url: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${CI_COMMIT_TAG}/deltafi-${CI_COMMIT_TAG}-linux-amd64.tgz"
          link_type: "package"
        - name: "deltafi ${CI_COMMIT_TAG} (linux, arm64, tgz)"
          url: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${CI_COMMIT_TAG}/deltafi-${CI_COMMIT_TAG}-linux-arm64.tgz"
          link_type: "package"
        - name: "deltafi ${CI_COMMIT_TAG} (darwin, amd64, tgz)"
          url: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${CI_COMMIT_TAG}/deltafi-${CI_COMMIT_TAG}-darwin-amd64.tgz"
          link_type: "package"
        - name: "deltafi ${CI_COMMIT_TAG} (darwin, arm64, tgz)"
          url: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${CI_COMMIT_TAG}/deltafi-${CI_COMMIT_TAG}-darwin-arm64.tgz"
          link_type: "package"
  artifacts:
    paths:
      - release_notes.md
